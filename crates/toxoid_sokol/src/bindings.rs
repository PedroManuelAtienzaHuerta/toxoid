/* automatically generated by rust-bindgen 0.69.1 */

pub const SOKOL_APP_INCLUDED: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SOKOL_GFX_INCLUDED: u32 = 1;
pub const SOKOL_LOG_INCLUDED: u32 = 1;
pub const SOKOL_TIME_INCLUDED: u32 = 1;
pub const SOKOL_GP_INCLUDED: u32 = 1;
pub const SGP_BATCH_OPTIMIZER_DEPTH: u32 = 8;
pub const SGP_UNIFORM_CONTENT_SLOTS: u32 = 4;
pub const SGP_TEXTURE_SLOTS: u32 = 4;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const SAPP_MAX_TOUCHPOINTS: _bindgen_ty_1 = 8;
pub const SAPP_MAX_MOUSEBUTTONS: _bindgen_ty_1 = 3;
pub const SAPP_MAX_KEYCODES: _bindgen_ty_1 = 512;
pub const SAPP_MAX_ICONIMAGES: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const sapp_event_type_SAPP_EVENTTYPE_INVALID: sapp_event_type = 0;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_DOWN: sapp_event_type = 1;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_UP: sapp_event_type = 2;
pub const sapp_event_type_SAPP_EVENTTYPE_CHAR: sapp_event_type = 3;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_DOWN: sapp_event_type = 4;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_UP: sapp_event_type = 5;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_SCROLL: sapp_event_type = 6;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_MOVE: sapp_event_type = 7;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_ENTER: sapp_event_type = 8;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_LEAVE: sapp_event_type = 9;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_BEGAN: sapp_event_type = 10;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_MOVED: sapp_event_type = 11;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_ENDED: sapp_event_type = 12;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_CANCELLED: sapp_event_type = 13;
pub const sapp_event_type_SAPP_EVENTTYPE_RESIZED: sapp_event_type = 14;
pub const sapp_event_type_SAPP_EVENTTYPE_ICONIFIED: sapp_event_type = 15;
pub const sapp_event_type_SAPP_EVENTTYPE_RESTORED: sapp_event_type = 16;
pub const sapp_event_type_SAPP_EVENTTYPE_FOCUSED: sapp_event_type = 17;
pub const sapp_event_type_SAPP_EVENTTYPE_UNFOCUSED: sapp_event_type = 18;
pub const sapp_event_type_SAPP_EVENTTYPE_SUSPENDED: sapp_event_type = 19;
pub const sapp_event_type_SAPP_EVENTTYPE_RESUMED: sapp_event_type = 20;
pub const sapp_event_type_SAPP_EVENTTYPE_QUIT_REQUESTED: sapp_event_type = 21;
pub const sapp_event_type_SAPP_EVENTTYPE_CLIPBOARD_PASTED: sapp_event_type = 22;
pub const sapp_event_type_SAPP_EVENTTYPE_FILES_DROPPED: sapp_event_type = 23;
pub const sapp_event_type__SAPP_EVENTTYPE_NUM: sapp_event_type = 24;
pub const sapp_event_type__SAPP_EVENTTYPE_FORCE_U32: sapp_event_type = 2147483647;
pub type sapp_event_type = ::std::os::raw::c_int;
pub const sapp_keycode_SAPP_KEYCODE_INVALID: sapp_keycode = 0;
pub const sapp_keycode_SAPP_KEYCODE_SPACE: sapp_keycode = 32;
pub const sapp_keycode_SAPP_KEYCODE_APOSTROPHE: sapp_keycode = 39;
pub const sapp_keycode_SAPP_KEYCODE_COMMA: sapp_keycode = 44;
pub const sapp_keycode_SAPP_KEYCODE_MINUS: sapp_keycode = 45;
pub const sapp_keycode_SAPP_KEYCODE_PERIOD: sapp_keycode = 46;
pub const sapp_keycode_SAPP_KEYCODE_SLASH: sapp_keycode = 47;
pub const sapp_keycode_SAPP_KEYCODE_0: sapp_keycode = 48;
pub const sapp_keycode_SAPP_KEYCODE_1: sapp_keycode = 49;
pub const sapp_keycode_SAPP_KEYCODE_2: sapp_keycode = 50;
pub const sapp_keycode_SAPP_KEYCODE_3: sapp_keycode = 51;
pub const sapp_keycode_SAPP_KEYCODE_4: sapp_keycode = 52;
pub const sapp_keycode_SAPP_KEYCODE_5: sapp_keycode = 53;
pub const sapp_keycode_SAPP_KEYCODE_6: sapp_keycode = 54;
pub const sapp_keycode_SAPP_KEYCODE_7: sapp_keycode = 55;
pub const sapp_keycode_SAPP_KEYCODE_8: sapp_keycode = 56;
pub const sapp_keycode_SAPP_KEYCODE_9: sapp_keycode = 57;
pub const sapp_keycode_SAPP_KEYCODE_SEMICOLON: sapp_keycode = 59;
pub const sapp_keycode_SAPP_KEYCODE_EQUAL: sapp_keycode = 61;
pub const sapp_keycode_SAPP_KEYCODE_A: sapp_keycode = 65;
pub const sapp_keycode_SAPP_KEYCODE_B: sapp_keycode = 66;
pub const sapp_keycode_SAPP_KEYCODE_C: sapp_keycode = 67;
pub const sapp_keycode_SAPP_KEYCODE_D: sapp_keycode = 68;
pub const sapp_keycode_SAPP_KEYCODE_E: sapp_keycode = 69;
pub const sapp_keycode_SAPP_KEYCODE_F: sapp_keycode = 70;
pub const sapp_keycode_SAPP_KEYCODE_G: sapp_keycode = 71;
pub const sapp_keycode_SAPP_KEYCODE_H: sapp_keycode = 72;
pub const sapp_keycode_SAPP_KEYCODE_I: sapp_keycode = 73;
pub const sapp_keycode_SAPP_KEYCODE_J: sapp_keycode = 74;
pub const sapp_keycode_SAPP_KEYCODE_K: sapp_keycode = 75;
pub const sapp_keycode_SAPP_KEYCODE_L: sapp_keycode = 76;
pub const sapp_keycode_SAPP_KEYCODE_M: sapp_keycode = 77;
pub const sapp_keycode_SAPP_KEYCODE_N: sapp_keycode = 78;
pub const sapp_keycode_SAPP_KEYCODE_O: sapp_keycode = 79;
pub const sapp_keycode_SAPP_KEYCODE_P: sapp_keycode = 80;
pub const sapp_keycode_SAPP_KEYCODE_Q: sapp_keycode = 81;
pub const sapp_keycode_SAPP_KEYCODE_R: sapp_keycode = 82;
pub const sapp_keycode_SAPP_KEYCODE_S: sapp_keycode = 83;
pub const sapp_keycode_SAPP_KEYCODE_T: sapp_keycode = 84;
pub const sapp_keycode_SAPP_KEYCODE_U: sapp_keycode = 85;
pub const sapp_keycode_SAPP_KEYCODE_V: sapp_keycode = 86;
pub const sapp_keycode_SAPP_KEYCODE_W: sapp_keycode = 87;
pub const sapp_keycode_SAPP_KEYCODE_X: sapp_keycode = 88;
pub const sapp_keycode_SAPP_KEYCODE_Y: sapp_keycode = 89;
pub const sapp_keycode_SAPP_KEYCODE_Z: sapp_keycode = 90;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_BRACKET: sapp_keycode = 91;
pub const sapp_keycode_SAPP_KEYCODE_BACKSLASH: sapp_keycode = 92;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_BRACKET: sapp_keycode = 93;
pub const sapp_keycode_SAPP_KEYCODE_GRAVE_ACCENT: sapp_keycode = 96;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_1: sapp_keycode = 161;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_2: sapp_keycode = 162;
pub const sapp_keycode_SAPP_KEYCODE_ESCAPE: sapp_keycode = 256;
pub const sapp_keycode_SAPP_KEYCODE_ENTER: sapp_keycode = 257;
pub const sapp_keycode_SAPP_KEYCODE_TAB: sapp_keycode = 258;
pub const sapp_keycode_SAPP_KEYCODE_BACKSPACE: sapp_keycode = 259;
pub const sapp_keycode_SAPP_KEYCODE_INSERT: sapp_keycode = 260;
pub const sapp_keycode_SAPP_KEYCODE_DELETE: sapp_keycode = 261;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT: sapp_keycode = 262;
pub const sapp_keycode_SAPP_KEYCODE_LEFT: sapp_keycode = 263;
pub const sapp_keycode_SAPP_KEYCODE_DOWN: sapp_keycode = 264;
pub const sapp_keycode_SAPP_KEYCODE_UP: sapp_keycode = 265;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_UP: sapp_keycode = 266;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_DOWN: sapp_keycode = 267;
pub const sapp_keycode_SAPP_KEYCODE_HOME: sapp_keycode = 268;
pub const sapp_keycode_SAPP_KEYCODE_END: sapp_keycode = 269;
pub const sapp_keycode_SAPP_KEYCODE_CAPS_LOCK: sapp_keycode = 280;
pub const sapp_keycode_SAPP_KEYCODE_SCROLL_LOCK: sapp_keycode = 281;
pub const sapp_keycode_SAPP_KEYCODE_NUM_LOCK: sapp_keycode = 282;
pub const sapp_keycode_SAPP_KEYCODE_PRINT_SCREEN: sapp_keycode = 283;
pub const sapp_keycode_SAPP_KEYCODE_PAUSE: sapp_keycode = 284;
pub const sapp_keycode_SAPP_KEYCODE_F1: sapp_keycode = 290;
pub const sapp_keycode_SAPP_KEYCODE_F2: sapp_keycode = 291;
pub const sapp_keycode_SAPP_KEYCODE_F3: sapp_keycode = 292;
pub const sapp_keycode_SAPP_KEYCODE_F4: sapp_keycode = 293;
pub const sapp_keycode_SAPP_KEYCODE_F5: sapp_keycode = 294;
pub const sapp_keycode_SAPP_KEYCODE_F6: sapp_keycode = 295;
pub const sapp_keycode_SAPP_KEYCODE_F7: sapp_keycode = 296;
pub const sapp_keycode_SAPP_KEYCODE_F8: sapp_keycode = 297;
pub const sapp_keycode_SAPP_KEYCODE_F9: sapp_keycode = 298;
pub const sapp_keycode_SAPP_KEYCODE_F10: sapp_keycode = 299;
pub const sapp_keycode_SAPP_KEYCODE_F11: sapp_keycode = 300;
pub const sapp_keycode_SAPP_KEYCODE_F12: sapp_keycode = 301;
pub const sapp_keycode_SAPP_KEYCODE_F13: sapp_keycode = 302;
pub const sapp_keycode_SAPP_KEYCODE_F14: sapp_keycode = 303;
pub const sapp_keycode_SAPP_KEYCODE_F15: sapp_keycode = 304;
pub const sapp_keycode_SAPP_KEYCODE_F16: sapp_keycode = 305;
pub const sapp_keycode_SAPP_KEYCODE_F17: sapp_keycode = 306;
pub const sapp_keycode_SAPP_KEYCODE_F18: sapp_keycode = 307;
pub const sapp_keycode_SAPP_KEYCODE_F19: sapp_keycode = 308;
pub const sapp_keycode_SAPP_KEYCODE_F20: sapp_keycode = 309;
pub const sapp_keycode_SAPP_KEYCODE_F21: sapp_keycode = 310;
pub const sapp_keycode_SAPP_KEYCODE_F22: sapp_keycode = 311;
pub const sapp_keycode_SAPP_KEYCODE_F23: sapp_keycode = 312;
pub const sapp_keycode_SAPP_KEYCODE_F24: sapp_keycode = 313;
pub const sapp_keycode_SAPP_KEYCODE_F25: sapp_keycode = 314;
pub const sapp_keycode_SAPP_KEYCODE_KP_0: sapp_keycode = 320;
pub const sapp_keycode_SAPP_KEYCODE_KP_1: sapp_keycode = 321;
pub const sapp_keycode_SAPP_KEYCODE_KP_2: sapp_keycode = 322;
pub const sapp_keycode_SAPP_KEYCODE_KP_3: sapp_keycode = 323;
pub const sapp_keycode_SAPP_KEYCODE_KP_4: sapp_keycode = 324;
pub const sapp_keycode_SAPP_KEYCODE_KP_5: sapp_keycode = 325;
pub const sapp_keycode_SAPP_KEYCODE_KP_6: sapp_keycode = 326;
pub const sapp_keycode_SAPP_KEYCODE_KP_7: sapp_keycode = 327;
pub const sapp_keycode_SAPP_KEYCODE_KP_8: sapp_keycode = 328;
pub const sapp_keycode_SAPP_KEYCODE_KP_9: sapp_keycode = 329;
pub const sapp_keycode_SAPP_KEYCODE_KP_DECIMAL: sapp_keycode = 330;
pub const sapp_keycode_SAPP_KEYCODE_KP_DIVIDE: sapp_keycode = 331;
pub const sapp_keycode_SAPP_KEYCODE_KP_MULTIPLY: sapp_keycode = 332;
pub const sapp_keycode_SAPP_KEYCODE_KP_SUBTRACT: sapp_keycode = 333;
pub const sapp_keycode_SAPP_KEYCODE_KP_ADD: sapp_keycode = 334;
pub const sapp_keycode_SAPP_KEYCODE_KP_ENTER: sapp_keycode = 335;
pub const sapp_keycode_SAPP_KEYCODE_KP_EQUAL: sapp_keycode = 336;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SHIFT: sapp_keycode = 340;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_CONTROL: sapp_keycode = 341;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_ALT: sapp_keycode = 342;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SUPER: sapp_keycode = 343;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SHIFT: sapp_keycode = 344;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_CONTROL: sapp_keycode = 345;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_ALT: sapp_keycode = 346;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SUPER: sapp_keycode = 347;
pub const sapp_keycode_SAPP_KEYCODE_MENU: sapp_keycode = 348;
pub type sapp_keycode = ::std::os::raw::c_int;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_UNKNOWN: sapp_android_tooltype = 0;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_FINGER: sapp_android_tooltype = 1;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_STYLUS: sapp_android_tooltype = 2;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_MOUSE: sapp_android_tooltype = 3;
pub type sapp_android_tooltype = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_touchpoint {
    pub identifier: usize,
    pub pos_x: f32,
    pub pos_y: f32,
    pub android_tooltype: sapp_android_tooltype,
    pub changed: bool,
}
#[test]
fn bindgen_test_layout_sapp_touchpoint() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_touchpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_touchpoint>(),
        24usize,
        concat!("Size of: ", stringify!(sapp_touchpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_touchpoint>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_touchpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_touchpoint),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_touchpoint),
            "::",
            stringify!(pos_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_touchpoint),
            "::",
            stringify!(pos_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).android_tooltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_touchpoint),
            "::",
            stringify!(android_tooltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_touchpoint),
            "::",
            stringify!(changed)
        )
    );
}
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_LEFT: sapp_mousebutton = 0;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_RIGHT: sapp_mousebutton = 1;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_MIDDLE: sapp_mousebutton = 2;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_INVALID: sapp_mousebutton = 256;
pub type sapp_mousebutton = ::std::os::raw::c_int;
pub const SAPP_MODIFIER_SHIFT: _bindgen_ty_2 = 1;
pub const SAPP_MODIFIER_CTRL: _bindgen_ty_2 = 2;
pub const SAPP_MODIFIER_ALT: _bindgen_ty_2 = 4;
pub const SAPP_MODIFIER_SUPER: _bindgen_ty_2 = 8;
pub const SAPP_MODIFIER_LMB: _bindgen_ty_2 = 256;
pub const SAPP_MODIFIER_RMB: _bindgen_ty_2 = 512;
pub const SAPP_MODIFIER_MMB: _bindgen_ty_2 = 1024;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_event {
    pub frame_count: u64,
    pub type_: sapp_event_type,
    pub key_code: sapp_keycode,
    pub char_code: u32,
    pub key_repeat: bool,
    pub modifiers: u32,
    pub mouse_button: sapp_mousebutton,
    pub mouse_x: f32,
    pub mouse_y: f32,
    pub mouse_dx: f32,
    pub mouse_dy: f32,
    pub scroll_x: f32,
    pub scroll_y: f32,
    pub num_touches: ::std::os::raw::c_int,
    pub touches: [sapp_touchpoint; 8usize],
    pub window_width: ::std::os::raw::c_int,
    pub window_height: ::std::os::raw::c_int,
    pub framebuffer_width: ::std::os::raw::c_int,
    pub framebuffer_height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sapp_event() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_event>(),
        272usize,
        concat!("Size of: ", stringify!(sapp_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_event>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(frame_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_code) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(key_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_code) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(char_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_repeat) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(key_repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_button) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(mouse_button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_x) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(mouse_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_y) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(mouse_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_dx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(mouse_dx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouse_dy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(mouse_dy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scroll_x) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(scroll_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scroll_y) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(scroll_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_touches) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(num_touches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touches) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(touches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_width) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(window_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_height) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(window_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framebuffer_width) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(framebuffer_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framebuffer_height) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_event),
            "::",
            stringify!(framebuffer_height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_sapp_range() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_range>(),
        16usize,
        concat!("Size of: ", stringify!(sapp_range))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_range>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_range))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_range),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_range),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_image_desc {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: sapp_range,
}
#[test]
fn bindgen_test_layout_sapp_image_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_image_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_image_desc>(),
        24usize,
        concat!("Size of: ", stringify!(sapp_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_image_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_image_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_image_desc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_image_desc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_image_desc),
            "::",
            stringify!(pixels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_icon_desc {
    pub sokol_default: bool,
    pub images: [sapp_image_desc; 8usize],
}
#[test]
fn bindgen_test_layout_sapp_icon_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_icon_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_icon_desc>(),
        200usize,
        concat!("Size of: ", stringify!(sapp_icon_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_icon_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_icon_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sokol_default) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_icon_desc),
            "::",
            stringify!(sokol_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_icon_desc),
            "::",
            stringify!(images)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sapp_allocator() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_allocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_allocator>(),
        24usize,
        concat!("Size of: ", stringify!(sapp_allocator))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_allocator>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_allocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_fn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_allocator),
            "::",
            stringify!(alloc_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_allocator),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_allocator),
            "::",
            stringify!(user_data)
        )
    );
}
pub const sapp_log_item_SAPP_LOGITEM_OK: sapp_log_item = 0;
pub const sapp_log_item_SAPP_LOGITEM_MALLOC_FAILED: sapp_log_item = 1;
pub const sapp_log_item_SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE: sapp_log_item = 2;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED: sapp_log_item = 3;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED: sapp_log_item = 4;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED: sapp_log_item = 5;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED: sapp_log_item = 6;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED: sapp_log_item = 7;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED: sapp_log_item = 8;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED: sapp_log_item = 9;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED: sapp_log_item = 10;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED: sapp_log_item = 11;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED: sapp_log_item = 12;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED: sapp_log_item = 13;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED: sapp_log_item =
    14;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED: sapp_log_item = 15;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED: sapp_log_item = 16;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT: sapp_log_item = 17;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER: sapp_log_item =
    18;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED:
    sapp_log_item = 19;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED: sapp_log_item = 20;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED: sapp_log_item = 21;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED:
    sapp_log_item = 22;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK:
    sapp_log_item = 23;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK:
    sapp_log_item = 24;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED: sapp_log_item = 25;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED: sapp_log_item = 26;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED: sapp_log_item = 27;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND: sapp_log_item = 28;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED: sapp_log_item = 29;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW: sapp_log_item = 30;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS: sapp_log_item = 31;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG: sapp_log_item = 32;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED: sapp_log_item = 33;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING: sapp_log_item = 34;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED: sapp_log_item = 35;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED: sapp_log_item = 36;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED: sapp_log_item = 37;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED: sapp_log_item = 38;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED: sapp_log_item = 39;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED: sapp_log_item = 40;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED: sapp_log_item = 41;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS: sapp_log_item = 42;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL: sapp_log_item = 43;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED: sapp_log_item = 44;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED: sapp_log_item = 45;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED: sapp_log_item = 46;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED: sapp_log_item = 47;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED: sapp_log_item = 48;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED: sapp_log_item = 49;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME: sapp_log_item = 50;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB: sapp_log_item = 51;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB: sapp_log_item = 52;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_READ_MSG_FAILED: sapp_log_item = 53;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED: sapp_log_item = 54;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_CREATE: sapp_log_item = 55;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_RESUME: sapp_log_item = 56;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_PAUSE: sapp_log_item = 57;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_FOCUS: sapp_log_item = 58;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS: sapp_log_item = 59;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW: sapp_log_item = 60;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE: sapp_log_item = 61;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_DESTROY: sapp_log_item = 62;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNKNOWN_MSG: sapp_log_item = 63;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED: sapp_log_item = 64;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE: sapp_log_item = 65;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART: sapp_log_item = 66;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME: sapp_log_item = 67;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE: sapp_log_item =
    68;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED: sapp_log_item =
    69;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE: sapp_log_item = 70;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP: sapp_log_item = 71;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED: sapp_log_item =
    72;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED:
    sapp_log_item = 73;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED: sapp_log_item =
    74;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED: sapp_log_item =
    75;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED: sapp_log_item =
    76;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY: sapp_log_item = 77;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY: sapp_log_item = 78;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE: sapp_log_item = 79;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE: sapp_log_item = 80;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED: sapp_log_item = 81;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS: sapp_log_item = 82;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED: sapp_log_item = 83;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SWAPCHAIN_FAILED: sapp_log_item = 84;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED:
    sapp_log_item = 85;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED:
    sapp_log_item = 86;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED: sapp_log_item = 87;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED: sapp_log_item = 88;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_ERROR: sapp_log_item = 89;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_UNKNOWN: sapp_log_item = 90;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE: sapp_log_item = 91;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_ERROR: sapp_log_item = 92;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN: sapp_log_item = 93;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_CREATE_INSTANCE_FAILED: sapp_log_item = 94;
pub const sapp_log_item_SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH: sapp_log_item = 95;
pub const sapp_log_item_SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG: sapp_log_item = 96;
pub const sapp_log_item_SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG: sapp_log_item = 97;
pub type sapp_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sapp_logger() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_logger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_logger>(),
        16usize,
        concat!("Size of: ", stringify!(sapp_logger))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_logger>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_logger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_logger),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_logger),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_desc {
    pub init_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub frame_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub cleanup_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub event_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_event)>,
    pub user_data: *mut ::std::os::raw::c_void,
    pub init_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub frame_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub cleanup_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub event_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const sapp_event, arg2: *mut ::std::os::raw::c_void),
    >,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub swap_interval: ::std::os::raw::c_int,
    pub high_dpi: bool,
    pub fullscreen: bool,
    pub alpha: bool,
    pub window_title: *const ::std::os::raw::c_char,
    pub enable_clipboard: bool,
    pub clipboard_size: ::std::os::raw::c_int,
    pub enable_dragndrop: bool,
    pub max_dropped_files: ::std::os::raw::c_int,
    pub max_dropped_file_path_length: ::std::os::raw::c_int,
    pub icon: sapp_icon_desc,
    pub allocator: sapp_allocator,
    pub logger: sapp_logger,
    pub gl_major_version: ::std::os::raw::c_int,
    pub gl_minor_version: ::std::os::raw::c_int,
    pub win32_console_utf8: bool,
    pub win32_console_create: bool,
    pub win32_console_attach: bool,
    pub html5_canvas_name: *const ::std::os::raw::c_char,
    pub html5_canvas_resize: bool,
    pub html5_preserve_drawing_buffer: bool,
    pub html5_premultiplied_alpha: bool,
    pub html5_ask_leave_site: bool,
    pub ios_keyboard_resizes_canvas: bool,
}
#[test]
fn bindgen_test_layout_sapp_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_desc>(),
        400usize,
        concat!("Size of: ", stringify!(sapp_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_cb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(init_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_cb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(frame_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup_cb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(cleanup_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_cb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(event_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_userdata_cb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(init_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_userdata_cb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(frame_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup_userdata_cb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(cleanup_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_userdata_cb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(event_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap_interval) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(swap_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high_dpi) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(high_dpi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullscreen) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_title) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(window_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_clipboard) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(enable_clipboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipboard_size) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(clipboard_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_dragndrop) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(enable_dragndrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dropped_files) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(max_dropped_files)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_dropped_file_path_length) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(max_dropped_file_path_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logger) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(logger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_major_version) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(gl_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_minor_version) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(gl_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32_console_utf8) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(win32_console_utf8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32_console_create) as usize - ptr as usize },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(win32_console_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32_console_attach) as usize - ptr as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(win32_console_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html5_canvas_name) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(html5_canvas_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html5_canvas_resize) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(html5_canvas_resize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).html5_preserve_drawing_buffer) as usize - ptr as usize
        },
        393usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(html5_preserve_drawing_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html5_premultiplied_alpha) as usize - ptr as usize },
        394usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(html5_premultiplied_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).html5_ask_leave_site) as usize - ptr as usize },
        395usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(html5_ask_leave_site)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ios_keyboard_resizes_canvas) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_desc),
            "::",
            stringify!(ios_keyboard_resizes_canvas)
        )
    );
}
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_NO_ERROR: sapp_html5_fetch_error = 0;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL: sapp_html5_fetch_error =
    1;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_OTHER: sapp_html5_fetch_error = 2;
pub type sapp_html5_fetch_error = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_response {
    pub succeeded: bool,
    pub error_code: sapp_html5_fetch_error,
    pub file_index: ::std::os::raw::c_int,
    pub data: sapp_range,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sapp_html5_fetch_response() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_html5_fetch_response> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_html5_fetch_response>(),
        56usize,
        concat!("Size of: ", stringify!(sapp_html5_fetch_response))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_html5_fetch_response>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_html5_fetch_response))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).succeeded) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(succeeded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(file_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_response),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_request {
    pub dropped_file_index: ::std::os::raw::c_int,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_html5_fetch_response)>,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sapp_html5_fetch_request() {
    const UNINIT: ::std::mem::MaybeUninit<sapp_html5_fetch_request> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sapp_html5_fetch_request>(),
        40usize,
        concat!("Size of: ", stringify!(sapp_html5_fetch_request))
    );
    assert_eq!(
        ::std::mem::align_of::<sapp_html5_fetch_request>(),
        8usize,
        concat!("Alignment of ", stringify!(sapp_html5_fetch_request))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dropped_file_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_request),
            "::",
            stringify!(dropped_file_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_request),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_request),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sapp_html5_fetch_request),
            "::",
            stringify!(user_data)
        )
    );
}
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_DEFAULT: sapp_mouse_cursor = 0;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_ARROW: sapp_mouse_cursor = 1;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_IBEAM: sapp_mouse_cursor = 2;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_CROSSHAIR: sapp_mouse_cursor = 3;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_POINTING_HAND: sapp_mouse_cursor = 4;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_EW: sapp_mouse_cursor = 5;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NS: sapp_mouse_cursor = 6;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NWSE: sapp_mouse_cursor = 7;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NESW: sapp_mouse_cursor = 8;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_ALL: sapp_mouse_cursor = 9;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_NOT_ALLOWED: sapp_mouse_cursor = 10;
pub const sapp_mouse_cursor__SAPP_MOUSECURSOR_NUM: sapp_mouse_cursor = 11;
pub type sapp_mouse_cursor = ::std::os::raw::c_int;
extern "C" {
    pub fn sokol_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> sapp_desc;
}
extern "C" {
    pub fn sapp_isvalid() -> bool;
}
extern "C" {
    pub fn sapp_width() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_widthf() -> f32;
}
extern "C" {
    pub fn sapp_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_heightf() -> f32;
}
extern "C" {
    pub fn sapp_color_format() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_depth_format() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_sample_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_high_dpi() -> bool;
}
extern "C" {
    pub fn sapp_dpi_scale() -> f32;
}
extern "C" {
    pub fn sapp_show_keyboard(show: bool);
}
extern "C" {
    pub fn sapp_keyboard_shown() -> bool;
}
extern "C" {
    pub fn sapp_is_fullscreen() -> bool;
}
extern "C" {
    pub fn sapp_toggle_fullscreen();
}
extern "C" {
    pub fn sapp_show_mouse(show: bool);
}
extern "C" {
    pub fn sapp_mouse_shown() -> bool;
}
extern "C" {
    pub fn sapp_lock_mouse(lock: bool);
}
extern "C" {
    pub fn sapp_mouse_locked() -> bool;
}
extern "C" {
    pub fn sapp_set_mouse_cursor(cursor: sapp_mouse_cursor);
}
extern "C" {
    pub fn sapp_get_mouse_cursor() -> sapp_mouse_cursor;
}
extern "C" {
    pub fn sapp_userdata() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_query_desc() -> sapp_desc;
}
extern "C" {
    pub fn sapp_request_quit();
}
extern "C" {
    pub fn sapp_cancel_quit();
}
extern "C" {
    pub fn sapp_quit();
}
extern "C" {
    pub fn sapp_consume_event();
}
extern "C" {
    pub fn sapp_frame_count() -> u64;
}
extern "C" {
    pub fn sapp_frame_duration() -> f64;
}
extern "C" {
    pub fn sapp_set_clipboard_string(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sapp_get_clipboard_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapp_set_window_title(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sapp_set_icon(icon_desc: *const sapp_icon_desc);
}
extern "C" {
    pub fn sapp_get_num_dropped_files() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_get_dropped_file_path(
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapp_run(desc: *const sapp_desc);
}
extern "C" {
    pub fn sapp_egl_get_display() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_egl_get_context() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_html5_ask_leave_site(ask: bool);
}
extern "C" {
    pub fn sapp_html5_get_dropped_file_size(index: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn sapp_html5_fetch_dropped_file(request: *const sapp_html5_fetch_request);
}
extern "C" {
    pub fn sapp_metal_get_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_metal_get_renderpass_descriptor() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_metal_get_drawable() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_macos_get_window() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_ios_get_window() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_device_context() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_swap_chain() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_render_target_view() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_win32_get_hwnd() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_render_view() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_resolve_view() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sapp_android_get_native_activity() -> *const ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<sg_buffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_buffer>(),
        4usize,
        concat!("Size of: ", stringify!(sg_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_buffer>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_image() {
    const UNINIT: ::std::mem::MaybeUninit<sg_image> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_image>(),
        4usize,
        concat!("Size of: ", stringify!(sg_image))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_image>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_image))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_sampler() {
    const UNINIT: ::std::mem::MaybeUninit<sg_sampler> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_sampler>(),
        4usize,
        concat!("Size of: ", stringify!(sg_sampler))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_sampler>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_sampler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_shader() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader>(),
        4usize,
        concat!("Size of: ", stringify!(sg_shader))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_shader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_pipeline() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pipeline> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pipeline>(),
        4usize,
        concat!("Size of: ", stringify!(sg_pipeline))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pipeline>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pipeline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_pass() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pass> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pass>(),
        4usize,
        concat!("Size of: ", stringify!(sg_pass))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pass>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_context {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_sg_context() {
    const UNINIT: ::std::mem::MaybeUninit<sg_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_context>(),
        4usize,
        concat!("Size of: ", stringify!(sg_context))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_context>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_sg_range() {
    const UNINIT: ::std::mem::MaybeUninit<sg_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_range>(),
        16usize,
        concat!("Size of: ", stringify!(sg_range))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_range>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_range))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_range),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_range),
            "::",
            stringify!(size)
        )
    );
}
pub const SG_INVALID_ID: _bindgen_ty_3 = 0;
pub const SG_NUM_SHADER_STAGES: _bindgen_ty_3 = 2;
pub const SG_NUM_INFLIGHT_FRAMES: _bindgen_ty_3 = 2;
pub const SG_MAX_COLOR_ATTACHMENTS: _bindgen_ty_3 = 4;
pub const SG_MAX_VERTEX_BUFFERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGES: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_SAMPLERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGESAMPLERPAIRS: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_UBS: _bindgen_ty_3 = 4;
pub const SG_MAX_UB_MEMBERS: _bindgen_ty_3 = 16;
pub const SG_MAX_VERTEX_ATTRIBUTES: _bindgen_ty_3 = 16;
pub const SG_MAX_MIPMAPS: _bindgen_ty_3 = 16;
pub const SG_MAX_TEXTUREARRAY_LAYERS: _bindgen_ty_3 = 128;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_sg_color() {
    const UNINIT: ::std::mem::MaybeUninit<sg_color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_color>(),
        16usize,
        concat!("Size of: ", stringify!(sg_color))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_color>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color),
            "::",
            stringify!(a)
        )
    );
}
pub const sg_backend_SG_BACKEND_GLCORE33: sg_backend = 0;
pub const sg_backend_SG_BACKEND_GLES3: sg_backend = 1;
pub const sg_backend_SG_BACKEND_D3D11: sg_backend = 2;
pub const sg_backend_SG_BACKEND_METAL_IOS: sg_backend = 3;
pub const sg_backend_SG_BACKEND_METAL_MACOS: sg_backend = 4;
pub const sg_backend_SG_BACKEND_METAL_SIMULATOR: sg_backend = 5;
pub const sg_backend_SG_BACKEND_WGPU: sg_backend = 6;
pub const sg_backend_SG_BACKEND_DUMMY: sg_backend = 7;
pub type sg_backend = ::std::os::raw::c_int;
pub const sg_pixel_format__SG_PIXELFORMAT_DEFAULT: sg_pixel_format = 0;
pub const sg_pixel_format_SG_PIXELFORMAT_NONE: sg_pixel_format = 1;
pub const sg_pixel_format_SG_PIXELFORMAT_R8: sg_pixel_format = 2;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SN: sg_pixel_format = 3;
pub const sg_pixel_format_SG_PIXELFORMAT_R8UI: sg_pixel_format = 4;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SI: sg_pixel_format = 5;
pub const sg_pixel_format_SG_PIXELFORMAT_R16: sg_pixel_format = 6;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SN: sg_pixel_format = 7;
pub const sg_pixel_format_SG_PIXELFORMAT_R16UI: sg_pixel_format = 8;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SI: sg_pixel_format = 9;
pub const sg_pixel_format_SG_PIXELFORMAT_R16F: sg_pixel_format = 10;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8: sg_pixel_format = 11;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SN: sg_pixel_format = 12;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8UI: sg_pixel_format = 13;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SI: sg_pixel_format = 14;
pub const sg_pixel_format_SG_PIXELFORMAT_R32UI: sg_pixel_format = 15;
pub const sg_pixel_format_SG_PIXELFORMAT_R32SI: sg_pixel_format = 16;
pub const sg_pixel_format_SG_PIXELFORMAT_R32F: sg_pixel_format = 17;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16: sg_pixel_format = 18;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SN: sg_pixel_format = 19;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16UI: sg_pixel_format = 20;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SI: sg_pixel_format = 21;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16F: sg_pixel_format = 22;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8: sg_pixel_format = 23;
pub const sg_pixel_format_SG_PIXELFORMAT_SRGB8A8: sg_pixel_format = 24;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SN: sg_pixel_format = 25;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8UI: sg_pixel_format = 26;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SI: sg_pixel_format = 27;
pub const sg_pixel_format_SG_PIXELFORMAT_BGRA8: sg_pixel_format = 28;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB10A2: sg_pixel_format = 29;
pub const sg_pixel_format_SG_PIXELFORMAT_RG11B10F: sg_pixel_format = 30;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32UI: sg_pixel_format = 31;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32SI: sg_pixel_format = 32;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32F: sg_pixel_format = 33;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16: sg_pixel_format = 34;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SN: sg_pixel_format = 35;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16UI: sg_pixel_format = 36;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SI: sg_pixel_format = 37;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16F: sg_pixel_format = 38;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32UI: sg_pixel_format = 39;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32SI: sg_pixel_format = 40;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32F: sg_pixel_format = 41;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH: sg_pixel_format = 42;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH_STENCIL: sg_pixel_format = 43;
pub const sg_pixel_format_SG_PIXELFORMAT_BC1_RGBA: sg_pixel_format = 44;
pub const sg_pixel_format_SG_PIXELFORMAT_BC2_RGBA: sg_pixel_format = 45;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_RGBA: sg_pixel_format = 46;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_R: sg_pixel_format = 47;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_RSN: sg_pixel_format = 48;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RG: sg_pixel_format = 49;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RGSN: sg_pixel_format = 50;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBF: sg_pixel_format = 51;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBUF: sg_pixel_format = 52;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_RGBA: sg_pixel_format = 53;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_2BPP: sg_pixel_format = 54;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_4BPP: sg_pixel_format = 55;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_2BPP: sg_pixel_format = 56;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_4BPP: sg_pixel_format = 57;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8: sg_pixel_format = 58;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8A1: sg_pixel_format = 59;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGBA8: sg_pixel_format = 60;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11: sg_pixel_format = 61;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11SN: sg_pixel_format = 62;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB9E5: sg_pixel_format = 63;
pub const sg_pixel_format__SG_PIXELFORMAT_NUM: sg_pixel_format = 64;
pub const sg_pixel_format__SG_PIXELFORMAT_FORCE_U32: sg_pixel_format = 2147483647;
pub type sg_pixel_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pixelformat_info {
    pub sample: bool,
    pub filter: bool,
    pub render: bool,
    pub blend: bool,
    pub msaa: bool,
    pub depth: bool,
}
#[test]
fn bindgen_test_layout_sg_pixelformat_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pixelformat_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pixelformat_info>(),
        6usize,
        concat!("Size of: ", stringify!(sg_pixelformat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pixelformat_info>(),
        1usize,
        concat!("Alignment of ", stringify!(sg_pixelformat_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(render)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msaa) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(msaa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pixelformat_info),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_features {
    pub origin_top_left: bool,
    pub image_clamp_to_border: bool,
    pub mrt_independent_blend_state: bool,
    pub mrt_independent_write_mask: bool,
}
#[test]
fn bindgen_test_layout_sg_features() {
    const UNINIT: ::std::mem::MaybeUninit<sg_features> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_features>(),
        4usize,
        concat!("Size of: ", stringify!(sg_features))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_features>(),
        1usize,
        concat!("Alignment of ", stringify!(sg_features))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin_top_left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_features),
            "::",
            stringify!(origin_top_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_clamp_to_border) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_features),
            "::",
            stringify!(image_clamp_to_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mrt_independent_blend_state) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_features),
            "::",
            stringify!(mrt_independent_blend_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mrt_independent_write_mask) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_features),
            "::",
            stringify!(mrt_independent_write_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_limits {
    pub max_image_size_2d: ::std::os::raw::c_int,
    pub max_image_size_cube: ::std::os::raw::c_int,
    pub max_image_size_3d: ::std::os::raw::c_int,
    pub max_image_size_array: ::std::os::raw::c_int,
    pub max_image_array_layers: ::std::os::raw::c_int,
    pub max_vertex_attrs: ::std::os::raw::c_int,
    pub gl_max_vertex_uniform_vectors: ::std::os::raw::c_int,
    pub gl_max_combined_texture_image_units: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_limits() {
    const UNINIT: ::std::mem::MaybeUninit<sg_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_limits>(),
        32usize,
        concat!("Size of: ", stringify!(sg_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_image_size_2d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_image_size_2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_image_size_cube) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_image_size_cube)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_image_size_3d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_image_size_3d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_image_size_array) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_image_size_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_image_array_layers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_image_array_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_vertex_attrs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(max_vertex_attrs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gl_max_vertex_uniform_vectors) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(gl_max_vertex_uniform_vectors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gl_max_combined_texture_image_units) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_limits),
            "::",
            stringify!(gl_max_combined_texture_image_units)
        )
    );
}
pub const sg_resource_state_SG_RESOURCESTATE_INITIAL: sg_resource_state = 0;
pub const sg_resource_state_SG_RESOURCESTATE_ALLOC: sg_resource_state = 1;
pub const sg_resource_state_SG_RESOURCESTATE_VALID: sg_resource_state = 2;
pub const sg_resource_state_SG_RESOURCESTATE_FAILED: sg_resource_state = 3;
pub const sg_resource_state_SG_RESOURCESTATE_INVALID: sg_resource_state = 4;
pub const sg_resource_state__SG_RESOURCESTATE_FORCE_U32: sg_resource_state = 2147483647;
pub type sg_resource_state = ::std::os::raw::c_int;
pub const sg_usage__SG_USAGE_DEFAULT: sg_usage = 0;
pub const sg_usage_SG_USAGE_IMMUTABLE: sg_usage = 1;
pub const sg_usage_SG_USAGE_DYNAMIC: sg_usage = 2;
pub const sg_usage_SG_USAGE_STREAM: sg_usage = 3;
pub const sg_usage__SG_USAGE_NUM: sg_usage = 4;
pub const sg_usage__SG_USAGE_FORCE_U32: sg_usage = 2147483647;
pub type sg_usage = ::std::os::raw::c_int;
pub const sg_buffer_type__SG_BUFFERTYPE_DEFAULT: sg_buffer_type = 0;
pub const sg_buffer_type_SG_BUFFERTYPE_VERTEXBUFFER: sg_buffer_type = 1;
pub const sg_buffer_type_SG_BUFFERTYPE_INDEXBUFFER: sg_buffer_type = 2;
pub const sg_buffer_type__SG_BUFFERTYPE_NUM: sg_buffer_type = 3;
pub const sg_buffer_type__SG_BUFFERTYPE_FORCE_U32: sg_buffer_type = 2147483647;
pub type sg_buffer_type = ::std::os::raw::c_int;
pub const sg_index_type__SG_INDEXTYPE_DEFAULT: sg_index_type = 0;
pub const sg_index_type_SG_INDEXTYPE_NONE: sg_index_type = 1;
pub const sg_index_type_SG_INDEXTYPE_UINT16: sg_index_type = 2;
pub const sg_index_type_SG_INDEXTYPE_UINT32: sg_index_type = 3;
pub const sg_index_type__SG_INDEXTYPE_NUM: sg_index_type = 4;
pub const sg_index_type__SG_INDEXTYPE_FORCE_U32: sg_index_type = 2147483647;
pub type sg_index_type = ::std::os::raw::c_int;
pub const sg_image_type__SG_IMAGETYPE_DEFAULT: sg_image_type = 0;
pub const sg_image_type_SG_IMAGETYPE_2D: sg_image_type = 1;
pub const sg_image_type_SG_IMAGETYPE_CUBE: sg_image_type = 2;
pub const sg_image_type_SG_IMAGETYPE_3D: sg_image_type = 3;
pub const sg_image_type_SG_IMAGETYPE_ARRAY: sg_image_type = 4;
pub const sg_image_type__SG_IMAGETYPE_NUM: sg_image_type = 5;
pub const sg_image_type__SG_IMAGETYPE_FORCE_U32: sg_image_type = 2147483647;
pub type sg_image_type = ::std::os::raw::c_int;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_DEFAULT: sg_image_sample_type = 0;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_FLOAT: sg_image_sample_type = 1;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_DEPTH: sg_image_sample_type = 2;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_SINT: sg_image_sample_type = 3;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UINT: sg_image_sample_type = 4;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT: sg_image_sample_type = 5;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_NUM: sg_image_sample_type = 6;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_FORCE_U32: sg_image_sample_type = 2147483647;
pub type sg_image_sample_type = ::std::os::raw::c_int;
pub const sg_sampler_type__SG_SAMPLERTYPE_DEFAULT: sg_sampler_type = 0;
pub const sg_sampler_type_SG_SAMPLERTYPE_FILTERING: sg_sampler_type = 1;
pub const sg_sampler_type_SG_SAMPLERTYPE_NONFILTERING: sg_sampler_type = 2;
pub const sg_sampler_type_SG_SAMPLERTYPE_COMPARISON: sg_sampler_type = 3;
pub const sg_sampler_type__SG_SAMPLERTYPE_NUM: sg_sampler_type = 4;
pub const sg_sampler_type__SG_SAMPLERTYPE_FORCE_U32: sg_sampler_type = 5;
pub type sg_sampler_type = ::std::os::raw::c_int;
pub const sg_cube_face_SG_CUBEFACE_POS_X: sg_cube_face = 0;
pub const sg_cube_face_SG_CUBEFACE_NEG_X: sg_cube_face = 1;
pub const sg_cube_face_SG_CUBEFACE_POS_Y: sg_cube_face = 2;
pub const sg_cube_face_SG_CUBEFACE_NEG_Y: sg_cube_face = 3;
pub const sg_cube_face_SG_CUBEFACE_POS_Z: sg_cube_face = 4;
pub const sg_cube_face_SG_CUBEFACE_NEG_Z: sg_cube_face = 5;
pub const sg_cube_face_SG_CUBEFACE_NUM: sg_cube_face = 6;
pub const sg_cube_face__SG_CUBEFACE_FORCE_U32: sg_cube_face = 2147483647;
pub type sg_cube_face = ::std::os::raw::c_int;
pub const sg_shader_stage_SG_SHADERSTAGE_VS: sg_shader_stage = 0;
pub const sg_shader_stage_SG_SHADERSTAGE_FS: sg_shader_stage = 1;
pub const sg_shader_stage__SG_SHADERSTAGE_FORCE_U32: sg_shader_stage = 2147483647;
pub type sg_shader_stage = ::std::os::raw::c_int;
pub const sg_primitive_type__SG_PRIMITIVETYPE_DEFAULT: sg_primitive_type = 0;
pub const sg_primitive_type_SG_PRIMITIVETYPE_POINTS: sg_primitive_type = 1;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINES: sg_primitive_type = 2;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINE_STRIP: sg_primitive_type = 3;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLES: sg_primitive_type = 4;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLE_STRIP: sg_primitive_type = 5;
pub const sg_primitive_type__SG_PRIMITIVETYPE_NUM: sg_primitive_type = 6;
pub const sg_primitive_type__SG_PRIMITIVETYPE_FORCE_U32: sg_primitive_type = 2147483647;
pub type sg_primitive_type = ::std::os::raw::c_int;
pub const sg_filter__SG_FILTER_DEFAULT: sg_filter = 0;
pub const sg_filter_SG_FILTER_NONE: sg_filter = 1;
pub const sg_filter_SG_FILTER_NEAREST: sg_filter = 2;
pub const sg_filter_SG_FILTER_LINEAR: sg_filter = 3;
pub const sg_filter__SG_FILTER_NUM: sg_filter = 4;
pub const sg_filter__SG_FILTER_FORCE_U32: sg_filter = 2147483647;
pub type sg_filter = ::std::os::raw::c_int;
pub const sg_wrap__SG_WRAP_DEFAULT: sg_wrap = 0;
pub const sg_wrap_SG_WRAP_REPEAT: sg_wrap = 1;
pub const sg_wrap_SG_WRAP_CLAMP_TO_EDGE: sg_wrap = 2;
pub const sg_wrap_SG_WRAP_CLAMP_TO_BORDER: sg_wrap = 3;
pub const sg_wrap_SG_WRAP_MIRRORED_REPEAT: sg_wrap = 4;
pub const sg_wrap__SG_WRAP_NUM: sg_wrap = 5;
pub const sg_wrap__SG_WRAP_FORCE_U32: sg_wrap = 2147483647;
pub type sg_wrap = ::std::os::raw::c_int;
pub const sg_border_color__SG_BORDERCOLOR_DEFAULT: sg_border_color = 0;
pub const sg_border_color_SG_BORDERCOLOR_TRANSPARENT_BLACK: sg_border_color = 1;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_BLACK: sg_border_color = 2;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_WHITE: sg_border_color = 3;
pub const sg_border_color__SG_BORDERCOLOR_NUM: sg_border_color = 4;
pub const sg_border_color__SG_BORDERCOLOR_FORCE_U32: sg_border_color = 2147483647;
pub type sg_border_color = ::std::os::raw::c_int;
pub const sg_vertex_format_SG_VERTEXFORMAT_INVALID: sg_vertex_format = 0;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT: sg_vertex_format = 1;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT2: sg_vertex_format = 2;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT3: sg_vertex_format = 3;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT4: sg_vertex_format = 4;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4: sg_vertex_format = 5;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4N: sg_vertex_format = 6;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4: sg_vertex_format = 7;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4N: sg_vertex_format = 8;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2: sg_vertex_format = 9;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2N: sg_vertex_format = 10;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT2N: sg_vertex_format = 11;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4: sg_vertex_format = 12;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4N: sg_vertex_format = 13;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT4N: sg_vertex_format = 14;
pub const sg_vertex_format_SG_VERTEXFORMAT_UINT10_N2: sg_vertex_format = 15;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF2: sg_vertex_format = 16;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF4: sg_vertex_format = 17;
pub const sg_vertex_format__SG_VERTEXFORMAT_NUM: sg_vertex_format = 18;
pub const sg_vertex_format__SG_VERTEXFORMAT_FORCE_U32: sg_vertex_format = 2147483647;
pub type sg_vertex_format = ::std::os::raw::c_int;
pub const sg_vertex_step__SG_VERTEXSTEP_DEFAULT: sg_vertex_step = 0;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_VERTEX: sg_vertex_step = 1;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_INSTANCE: sg_vertex_step = 2;
pub const sg_vertex_step__SG_VERTEXSTEP_NUM: sg_vertex_step = 3;
pub const sg_vertex_step__SG_VERTEXSTEP_FORCE_U32: sg_vertex_step = 2147483647;
pub type sg_vertex_step = ::std::os::raw::c_int;
pub const sg_uniform_type_SG_UNIFORMTYPE_INVALID: sg_uniform_type = 0;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT: sg_uniform_type = 1;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT2: sg_uniform_type = 2;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT3: sg_uniform_type = 3;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT4: sg_uniform_type = 4;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT: sg_uniform_type = 5;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT2: sg_uniform_type = 6;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT3: sg_uniform_type = 7;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT4: sg_uniform_type = 8;
pub const sg_uniform_type_SG_UNIFORMTYPE_MAT4: sg_uniform_type = 9;
pub const sg_uniform_type__SG_UNIFORMTYPE_NUM: sg_uniform_type = 10;
pub const sg_uniform_type__SG_UNIFORMTYPE_FORCE_U32: sg_uniform_type = 2147483647;
pub type sg_uniform_type = ::std::os::raw::c_int;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_DEFAULT: sg_uniform_layout = 0;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_NATIVE: sg_uniform_layout = 1;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_STD140: sg_uniform_layout = 2;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_NUM: sg_uniform_layout = 3;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_FORCE_U32: sg_uniform_layout = 2147483647;
pub type sg_uniform_layout = ::std::os::raw::c_int;
pub const sg_cull_mode__SG_CULLMODE_DEFAULT: sg_cull_mode = 0;
pub const sg_cull_mode_SG_CULLMODE_NONE: sg_cull_mode = 1;
pub const sg_cull_mode_SG_CULLMODE_FRONT: sg_cull_mode = 2;
pub const sg_cull_mode_SG_CULLMODE_BACK: sg_cull_mode = 3;
pub const sg_cull_mode__SG_CULLMODE_NUM: sg_cull_mode = 4;
pub const sg_cull_mode__SG_CULLMODE_FORCE_U32: sg_cull_mode = 2147483647;
pub type sg_cull_mode = ::std::os::raw::c_int;
pub const sg_face_winding__SG_FACEWINDING_DEFAULT: sg_face_winding = 0;
pub const sg_face_winding_SG_FACEWINDING_CCW: sg_face_winding = 1;
pub const sg_face_winding_SG_FACEWINDING_CW: sg_face_winding = 2;
pub const sg_face_winding__SG_FACEWINDING_NUM: sg_face_winding = 3;
pub const sg_face_winding__SG_FACEWINDING_FORCE_U32: sg_face_winding = 2147483647;
pub type sg_face_winding = ::std::os::raw::c_int;
pub const sg_compare_func__SG_COMPAREFUNC_DEFAULT: sg_compare_func = 0;
pub const sg_compare_func_SG_COMPAREFUNC_NEVER: sg_compare_func = 1;
pub const sg_compare_func_SG_COMPAREFUNC_LESS: sg_compare_func = 2;
pub const sg_compare_func_SG_COMPAREFUNC_EQUAL: sg_compare_func = 3;
pub const sg_compare_func_SG_COMPAREFUNC_LESS_EQUAL: sg_compare_func = 4;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER: sg_compare_func = 5;
pub const sg_compare_func_SG_COMPAREFUNC_NOT_EQUAL: sg_compare_func = 6;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER_EQUAL: sg_compare_func = 7;
pub const sg_compare_func_SG_COMPAREFUNC_ALWAYS: sg_compare_func = 8;
pub const sg_compare_func__SG_COMPAREFUNC_NUM: sg_compare_func = 9;
pub const sg_compare_func__SG_COMPAREFUNC_FORCE_U32: sg_compare_func = 2147483647;
pub type sg_compare_func = ::std::os::raw::c_int;
pub const sg_stencil_op__SG_STENCILOP_DEFAULT: sg_stencil_op = 0;
pub const sg_stencil_op_SG_STENCILOP_KEEP: sg_stencil_op = 1;
pub const sg_stencil_op_SG_STENCILOP_ZERO: sg_stencil_op = 2;
pub const sg_stencil_op_SG_STENCILOP_REPLACE: sg_stencil_op = 3;
pub const sg_stencil_op_SG_STENCILOP_INCR_CLAMP: sg_stencil_op = 4;
pub const sg_stencil_op_SG_STENCILOP_DECR_CLAMP: sg_stencil_op = 5;
pub const sg_stencil_op_SG_STENCILOP_INVERT: sg_stencil_op = 6;
pub const sg_stencil_op_SG_STENCILOP_INCR_WRAP: sg_stencil_op = 7;
pub const sg_stencil_op_SG_STENCILOP_DECR_WRAP: sg_stencil_op = 8;
pub const sg_stencil_op__SG_STENCILOP_NUM: sg_stencil_op = 9;
pub const sg_stencil_op__SG_STENCILOP_FORCE_U32: sg_stencil_op = 2147483647;
pub type sg_stencil_op = ::std::os::raw::c_int;
pub const sg_blend_factor__SG_BLENDFACTOR_DEFAULT: sg_blend_factor = 0;
pub const sg_blend_factor_SG_BLENDFACTOR_ZERO: sg_blend_factor = 1;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE: sg_blend_factor = 2;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_COLOR: sg_blend_factor = 3;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR: sg_blend_factor = 4;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA: sg_blend_factor = 5;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: sg_blend_factor = 6;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_COLOR: sg_blend_factor = 7;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_COLOR: sg_blend_factor = 8;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_ALPHA: sg_blend_factor = 9;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA: sg_blend_factor = 10;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA_SATURATED: sg_blend_factor = 11;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_COLOR: sg_blend_factor = 12;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR: sg_blend_factor = 13;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_ALPHA: sg_blend_factor = 14;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA: sg_blend_factor = 15;
pub const sg_blend_factor__SG_BLENDFACTOR_NUM: sg_blend_factor = 16;
pub const sg_blend_factor__SG_BLENDFACTOR_FORCE_U32: sg_blend_factor = 2147483647;
pub type sg_blend_factor = ::std::os::raw::c_int;
pub const sg_blend_op__SG_BLENDOP_DEFAULT: sg_blend_op = 0;
pub const sg_blend_op_SG_BLENDOP_ADD: sg_blend_op = 1;
pub const sg_blend_op_SG_BLENDOP_SUBTRACT: sg_blend_op = 2;
pub const sg_blend_op_SG_BLENDOP_REVERSE_SUBTRACT: sg_blend_op = 3;
pub const sg_blend_op__SG_BLENDOP_NUM: sg_blend_op = 4;
pub const sg_blend_op__SG_BLENDOP_FORCE_U32: sg_blend_op = 2147483647;
pub type sg_blend_op = ::std::os::raw::c_int;
pub const sg_color_mask__SG_COLORMASK_DEFAULT: sg_color_mask = 0;
pub const sg_color_mask_SG_COLORMASK_NONE: sg_color_mask = 16;
pub const sg_color_mask_SG_COLORMASK_R: sg_color_mask = 1;
pub const sg_color_mask_SG_COLORMASK_G: sg_color_mask = 2;
pub const sg_color_mask_SG_COLORMASK_RG: sg_color_mask = 3;
pub const sg_color_mask_SG_COLORMASK_B: sg_color_mask = 4;
pub const sg_color_mask_SG_COLORMASK_RB: sg_color_mask = 5;
pub const sg_color_mask_SG_COLORMASK_GB: sg_color_mask = 6;
pub const sg_color_mask_SG_COLORMASK_RGB: sg_color_mask = 7;
pub const sg_color_mask_SG_COLORMASK_A: sg_color_mask = 8;
pub const sg_color_mask_SG_COLORMASK_RA: sg_color_mask = 9;
pub const sg_color_mask_SG_COLORMASK_GA: sg_color_mask = 10;
pub const sg_color_mask_SG_COLORMASK_RGA: sg_color_mask = 11;
pub const sg_color_mask_SG_COLORMASK_BA: sg_color_mask = 12;
pub const sg_color_mask_SG_COLORMASK_RBA: sg_color_mask = 13;
pub const sg_color_mask_SG_COLORMASK_GBA: sg_color_mask = 14;
pub const sg_color_mask_SG_COLORMASK_RGBA: sg_color_mask = 15;
pub const sg_color_mask__SG_COLORMASK_FORCE_U32: sg_color_mask = 2147483647;
pub type sg_color_mask = ::std::os::raw::c_int;
pub const sg_load_action__SG_LOADACTION_DEFAULT: sg_load_action = 0;
pub const sg_load_action_SG_LOADACTION_CLEAR: sg_load_action = 1;
pub const sg_load_action_SG_LOADACTION_LOAD: sg_load_action = 2;
pub const sg_load_action_SG_LOADACTION_DONTCARE: sg_load_action = 3;
pub const sg_load_action__SG_LOADACTION_FORCE_U32: sg_load_action = 2147483647;
pub type sg_load_action = ::std::os::raw::c_int;
pub const sg_store_action__SG_STOREACTION_DEFAULT: sg_store_action = 0;
pub const sg_store_action_SG_STOREACTION_STORE: sg_store_action = 1;
pub const sg_store_action_SG_STOREACTION_DONTCARE: sg_store_action = 2;
pub const sg_store_action__SG_STOREACTION_FORCE_U32: sg_store_action = 2147483647;
pub type sg_store_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: sg_color,
}
#[test]
fn bindgen_test_layout_sg_color_attachment_action() {
    const UNINIT: ::std::mem::MaybeUninit<sg_color_attachment_action> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_color_attachment_action>(),
        24usize,
        concat!("Size of: ", stringify!(sg_color_attachment_action))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_color_attachment_action>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_color_attachment_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_attachment_action),
            "::",
            stringify!(load_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_action) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_attachment_action),
            "::",
            stringify!(store_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_attachment_action),
            "::",
            stringify!(clear_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: f32,
}
#[test]
fn bindgen_test_layout_sg_depth_attachment_action() {
    const UNINIT: ::std::mem::MaybeUninit<sg_depth_attachment_action> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_depth_attachment_action>(),
        12usize,
        concat!("Size of: ", stringify!(sg_depth_attachment_action))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_depth_attachment_action>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_depth_attachment_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_attachment_action),
            "::",
            stringify!(load_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_action) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_attachment_action),
            "::",
            stringify!(store_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_attachment_action),
            "::",
            stringify!(clear_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: u8,
}
#[test]
fn bindgen_test_layout_sg_stencil_attachment_action() {
    const UNINIT: ::std::mem::MaybeUninit<sg_stencil_attachment_action> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_stencil_attachment_action>(),
        12usize,
        concat!("Size of: ", stringify!(sg_stencil_attachment_action))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_stencil_attachment_action>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_stencil_attachment_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_attachment_action),
            "::",
            stringify!(load_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_action) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_attachment_action),
            "::",
            stringify!(store_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_attachment_action),
            "::",
            stringify!(clear_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_action {
    pub _start_canary: u32,
    pub colors: [sg_color_attachment_action; 4usize],
    pub depth: sg_depth_attachment_action,
    pub stencil: sg_stencil_attachment_action,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_pass_action() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pass_action> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pass_action>(),
        128usize,
        concat!("Size of: ", stringify!(sg_pass_action))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pass_action>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pass_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_action),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_action),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_action),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencil) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_action),
            "::",
            stringify!(stencil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_action),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stage_bindings {
    pub images: [sg_image; 12usize],
    pub samplers: [sg_sampler; 8usize],
}
#[test]
fn bindgen_test_layout_sg_stage_bindings() {
    const UNINIT: ::std::mem::MaybeUninit<sg_stage_bindings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_stage_bindings>(),
        80usize,
        concat!("Size of: ", stringify!(sg_stage_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_stage_bindings>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_stage_bindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stage_bindings),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stage_bindings),
            "::",
            stringify!(samplers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_bindings {
    pub _start_canary: u32,
    pub vertex_buffers: [sg_buffer; 8usize],
    pub vertex_buffer_offsets: [::std::os::raw::c_int; 8usize],
    pub index_buffer: sg_buffer,
    pub index_buffer_offset: ::std::os::raw::c_int,
    pub vs: sg_stage_bindings,
    pub fs: sg_stage_bindings,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_bindings() {
    const UNINIT: ::std::mem::MaybeUninit<sg_bindings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_bindings>(),
        240usize,
        concat!("Size of: ", stringify!(sg_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_bindings>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_bindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex_buffers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(vertex_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertex_buffer_offsets) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(vertex_buffer_offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_buffer) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(index_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_buffer_offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(index_buffer_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(vs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_bindings),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_desc {
    pub _start_canary: u32,
    pub size: usize,
    pub type_: sg_buffer_type,
    pub usage: sg_usage,
    pub data: sg_range,
    pub label: *const ::std::os::raw::c_char,
    pub gl_buffers: [u32; 2usize],
    pub mtl_buffers: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_buffer: *const ::std::os::raw::c_void,
    pub wgpu_buffer: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_buffer_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_buffer_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_buffer_desc>(),
        96usize,
        concat!("Size of: ", stringify!(sg_buffer_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_buffer_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_buffer_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_buffers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(gl_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtl_buffers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(mtl_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11_buffer) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(d3d11_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu_buffer) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(wgpu_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_data {
    pub subimage: [[sg_range; 16usize]; 6usize],
}
#[test]
fn bindgen_test_layout_sg_image_data() {
    const UNINIT: ::std::mem::MaybeUninit<sg_image_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_image_data>(),
        1536usize,
        concat!("Size of: ", stringify!(sg_image_data))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_image_data>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_image_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subimage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_data),
            "::",
            stringify!(subimage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_desc {
    pub _start_canary: u32,
    pub type_: sg_image_type,
    pub render_target: bool,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub num_slices: ::std::os::raw::c_int,
    pub num_mipmaps: ::std::os::raw::c_int,
    pub usage: sg_usage,
    pub pixel_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub data: sg_image_data,
    pub label: *const ::std::os::raw::c_char,
    pub gl_textures: [u32; 2usize],
    pub gl_texture_target: u32,
    pub mtl_textures: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_texture: *const ::std::os::raw::c_void,
    pub d3d11_shader_resource_view: *const ::std::os::raw::c_void,
    pub wgpu_texture: *const ::std::os::raw::c_void,
    pub wgpu_texture_view: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_image_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_image_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_image_desc>(),
        1656usize,
        concat!("Size of: ", stringify!(sg_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_image_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_image_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(render_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_slices) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(num_slices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_mipmaps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(num_mipmaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_textures) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(gl_textures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_texture_target) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(gl_texture_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtl_textures) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(mtl_textures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11_texture) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(d3d11_texture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11_shader_resource_view) as usize - ptr as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(d3d11_shader_resource_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu_texture) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(wgpu_texture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu_texture_view) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(wgpu_texture_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_desc {
    pub _start_canary: u32,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub wrap_w: sg_wrap,
    pub min_lod: f32,
    pub max_lod: f32,
    pub border_color: sg_border_color,
    pub compare: sg_compare_func,
    pub max_anisotropy: u32,
    pub label: *const ::std::os::raw::c_char,
    pub gl_sampler: u32,
    pub mtl_sampler: *const ::std::os::raw::c_void,
    pub d3d11_sampler: *const ::std::os::raw::c_void,
    pub wgpu_sampler: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_sampler_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_sampler_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_sampler_desc>(),
        96usize,
        concat!("Size of: ", stringify!(sg_sampler_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_sampler_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_sampler_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_filter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(min_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag_filter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(mag_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap_filter) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(mipmap_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_u) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(wrap_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_v) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(wrap_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(wrap_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_lod) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(min_lod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_lod) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(max_lod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(border_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_anisotropy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(max_anisotropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_sampler) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(gl_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtl_sampler) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(mtl_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11_sampler) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(d3d11_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu_sampler) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(wgpu_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_attr_desc {
    pub name: *const ::std::os::raw::c_char,
    pub sem_name: *const ::std::os::raw::c_char,
    pub sem_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_shader_attr_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_attr_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_attr_desc>(),
        24usize,
        concat!("Size of: ", stringify!(sg_shader_attr_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_attr_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_shader_attr_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_attr_desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_attr_desc),
            "::",
            stringify!(sem_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_attr_desc),
            "::",
            stringify!(sem_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_desc {
    pub name: *const ::std::os::raw::c_char,
    pub type_: sg_uniform_type,
    pub array_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_shader_uniform_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_uniform_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_uniform_desc>(),
        16usize,
        concat!("Size of: ", stringify!(sg_shader_uniform_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_uniform_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_shader_uniform_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_desc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_desc),
            "::",
            stringify!(array_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_block_desc {
    pub size: usize,
    pub layout: sg_uniform_layout,
    pub uniforms: [sg_shader_uniform_desc; 16usize],
}
#[test]
fn bindgen_test_layout_sg_shader_uniform_block_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_uniform_block_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_uniform_block_desc>(),
        272usize,
        concat!("Size of: ", stringify!(sg_shader_uniform_block_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_uniform_block_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_shader_uniform_block_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_block_desc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_block_desc),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniforms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_uniform_block_desc),
            "::",
            stringify!(uniforms)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_desc {
    pub used: bool,
    pub multisampled: bool,
    pub image_type: sg_image_type,
    pub sample_type: sg_image_sample_type,
}
#[test]
fn bindgen_test_layout_sg_shader_image_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_image_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_image_desc>(),
        12usize,
        concat!("Size of: ", stringify!(sg_shader_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_image_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_shader_image_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_desc),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multisampled) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_desc),
            "::",
            stringify!(multisampled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_desc),
            "::",
            stringify!(image_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_desc),
            "::",
            stringify!(sample_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_sampler_desc {
    pub used: bool,
    pub sampler_type: sg_sampler_type,
}
#[test]
fn bindgen_test_layout_sg_shader_sampler_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_sampler_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_sampler_desc>(),
        8usize,
        concat!("Size of: ", stringify!(sg_shader_sampler_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_sampler_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_shader_sampler_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_sampler_desc),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_sampler_desc),
            "::",
            stringify!(sampler_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_sampler_pair_desc {
    pub used: bool,
    pub image_slot: ::std::os::raw::c_int,
    pub sampler_slot: ::std::os::raw::c_int,
    pub glsl_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sg_shader_image_sampler_pair_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_image_sampler_pair_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_image_sampler_pair_desc>(),
        24usize,
        concat!("Size of: ", stringify!(sg_shader_image_sampler_pair_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_image_sampler_pair_desc>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sg_shader_image_sampler_pair_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_sampler_pair_desc),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_slot) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_sampler_pair_desc),
            "::",
            stringify!(image_slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler_slot) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_sampler_pair_desc),
            "::",
            stringify!(sampler_slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glsl_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_image_sampler_pair_desc),
            "::",
            stringify!(glsl_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_stage_desc {
    pub source: *const ::std::os::raw::c_char,
    pub bytecode: sg_range,
    pub entry: *const ::std::os::raw::c_char,
    pub d3d11_target: *const ::std::os::raw::c_char,
    pub uniform_blocks: [sg_shader_uniform_block_desc; 4usize],
    pub images: [sg_shader_image_desc; 12usize],
    pub samplers: [sg_shader_sampler_desc; 8usize],
    pub image_sampler_pairs: [sg_shader_image_sampler_pair_desc; 12usize],
}
#[test]
fn bindgen_test_layout_sg_shader_stage_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_stage_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_stage_desc>(),
        1624usize,
        concat!("Size of: ", stringify!(sg_shader_stage_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_stage_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_shader_stage_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytecode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(bytecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11_target) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(d3d11_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniform_blocks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(uniform_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplers) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(samplers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_sampler_pairs) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_stage_desc),
            "::",
            stringify!(image_sampler_pairs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_desc {
    pub _start_canary: u32,
    pub attrs: [sg_shader_attr_desc; 16usize],
    pub vs: sg_shader_stage_desc,
    pub fs: sg_shader_stage_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_shader_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_desc>(),
        3656usize,
        concat!("Size of: ", stringify!(sg_shader_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_shader_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(vs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_buffer_layout_state {
    pub stride: ::std::os::raw::c_int,
    pub step_func: sg_vertex_step,
    pub step_rate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_vertex_buffer_layout_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_vertex_buffer_layout_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_vertex_buffer_layout_state>(),
        12usize,
        concat!("Size of: ", stringify!(sg_vertex_buffer_layout_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_vertex_buffer_layout_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_vertex_buffer_layout_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_buffer_layout_state),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_func) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_buffer_layout_state),
            "::",
            stringify!(step_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step_rate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_buffer_layout_state),
            "::",
            stringify!(step_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_attr_state {
    pub buffer_index: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub format: sg_vertex_format,
}
#[test]
fn bindgen_test_layout_sg_vertex_attr_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_vertex_attr_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_vertex_attr_state>(),
        12usize,
        concat!("Size of: ", stringify!(sg_vertex_attr_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_vertex_attr_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_vertex_attr_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_attr_state),
            "::",
            stringify!(buffer_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_attr_state),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_attr_state),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_layout_state {
    pub buffers: [sg_vertex_buffer_layout_state; 8usize],
    pub attrs: [sg_vertex_attr_state; 16usize],
}
#[test]
fn bindgen_test_layout_sg_vertex_layout_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_vertex_layout_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_vertex_layout_state>(),
        288usize,
        concat!("Size of: ", stringify!(sg_vertex_layout_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_vertex_layout_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_vertex_layout_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_layout_state),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_vertex_layout_state),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_face_state {
    pub compare: sg_compare_func,
    pub fail_op: sg_stencil_op,
    pub depth_fail_op: sg_stencil_op,
    pub pass_op: sg_stencil_op,
}
#[test]
fn bindgen_test_layout_sg_stencil_face_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_stencil_face_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_stencil_face_state>(),
        16usize,
        concat!("Size of: ", stringify!(sg_stencil_face_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_stencil_face_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_stencil_face_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_face_state),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_op) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_face_state),
            "::",
            stringify!(fail_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth_fail_op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_face_state),
            "::",
            stringify!(depth_fail_op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_op) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_face_state),
            "::",
            stringify!(pass_op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_state {
    pub enabled: bool,
    pub front: sg_stencil_face_state,
    pub back: sg_stencil_face_state,
    pub read_mask: u8,
    pub write_mask: u8,
    pub ref_: u8,
}
#[test]
fn bindgen_test_layout_sg_stencil_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_stencil_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_stencil_state>(),
        40usize,
        concat!("Size of: ", stringify!(sg_stencil_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_stencil_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_stencil_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(front)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_mask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(read_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_mask) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(write_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_stencil_state),
            "::",
            stringify!(ref_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_state {
    pub pixel_format: sg_pixel_format,
    pub compare: sg_compare_func,
    pub write_enabled: bool,
    pub bias: f32,
    pub bias_slope_scale: f32,
    pub bias_clamp: f32,
}
#[test]
fn bindgen_test_layout_sg_depth_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_depth_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_depth_state>(),
        24usize,
        concat!("Size of: ", stringify!(sg_depth_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_depth_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_depth_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_enabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(write_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(bias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bias_slope_scale) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(bias_slope_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bias_clamp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_depth_state),
            "::",
            stringify!(bias_clamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_blend_state {
    pub enabled: bool,
    pub src_factor_rgb: sg_blend_factor,
    pub dst_factor_rgb: sg_blend_factor,
    pub op_rgb: sg_blend_op,
    pub src_factor_alpha: sg_blend_factor,
    pub dst_factor_alpha: sg_blend_factor,
    pub op_alpha: sg_blend_op,
}
#[test]
fn bindgen_test_layout_sg_blend_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_blend_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_blend_state>(),
        28usize,
        concat!("Size of: ", stringify!(sg_blend_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_blend_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_blend_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_factor_rgb) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(src_factor_rgb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_factor_rgb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(dst_factor_rgb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_rgb) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(op_rgb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_factor_alpha) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(src_factor_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_factor_alpha) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(dst_factor_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_alpha) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_blend_state),
            "::",
            stringify!(op_alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_target_state {
    pub pixel_format: sg_pixel_format,
    pub write_mask: sg_color_mask,
    pub blend: sg_blend_state,
}
#[test]
fn bindgen_test_layout_sg_color_target_state() {
    const UNINIT: ::std::mem::MaybeUninit<sg_color_target_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_color_target_state>(),
        36usize,
        concat!("Size of: ", stringify!(sg_color_target_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_color_target_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_color_target_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_target_state),
            "::",
            stringify!(pixel_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_target_state),
            "::",
            stringify!(write_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_color_target_state),
            "::",
            stringify!(blend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_desc {
    pub _start_canary: u32,
    pub shader: sg_shader,
    pub layout: sg_vertex_layout_state,
    pub depth: sg_depth_state,
    pub stencil: sg_stencil_state,
    pub color_count: ::std::os::raw::c_int,
    pub colors: [sg_color_target_state; 4usize],
    pub primitive_type: sg_primitive_type,
    pub index_type: sg_index_type,
    pub cull_mode: sg_cull_mode,
    pub face_winding: sg_face_winding,
    pub sample_count: ::std::os::raw::c_int,
    pub blend_color: sg_color,
    pub alpha_to_coverage_enabled: bool,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_pipeline_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pipeline_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pipeline_desc>(),
        568usize,
        concat!("Size of: ", stringify!(sg_pipeline_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pipeline_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_pipeline_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shader) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencil) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(stencil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_count) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(color_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitive_type) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(primitive_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_type) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(index_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cull_mode) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(cull_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).face_winding) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(face_winding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend_color) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(blend_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha_to_coverage_enabled) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(alpha_to_coverage_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_attachment_desc {
    pub image: sg_image,
    pub mip_level: ::std::os::raw::c_int,
    pub slice: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_pass_attachment_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pass_attachment_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pass_attachment_desc>(),
        12usize,
        concat!("Size of: ", stringify!(sg_pass_attachment_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pass_attachment_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pass_attachment_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_attachment_desc),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mip_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_attachment_desc),
            "::",
            stringify!(mip_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_attachment_desc),
            "::",
            stringify!(slice)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_desc {
    pub _start_canary: u32,
    pub color_attachments: [sg_pass_attachment_desc; 4usize],
    pub resolve_attachments: [sg_pass_attachment_desc; 4usize],
    pub depth_stencil_attachment: sg_pass_attachment_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_pass_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pass_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pass_desc>(),
        128usize,
        concat!("Size of: ", stringify!(sg_pass_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pass_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_pass_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_attachments) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(color_attachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_attachments) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(resolve_attachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth_stencil_attachment) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(depth_stencil_attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_trace_hooks {
    pub user_data: *mut ::std::os::raw::c_void,
    pub reset_state_cache:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub make_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_buffer_desc,
            result: sg_buffer,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_image: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_image_desc,
            result: sg_image,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_sampler_desc,
            result: sg_sampler,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_shader: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_shader_desc,
            result: sg_shader,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pipeline_desc,
            result: sg_pipeline,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_pass: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pass_desc,
            result: sg_pass,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub destroy_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_image: ::std::option::Option<
        unsafe extern "C" fn(img: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_shader: ::std::option::Option<
        unsafe extern "C" fn(shd: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_pass: ::std::option::Option<
        unsafe extern "C" fn(pass: sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub update_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub update_image: ::std::option::Option<
        unsafe extern "C" fn(
            img: sg_image,
            data: *const sg_image_data,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub append_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            result: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub begin_default_pass: ::std::option::Option<
        unsafe extern "C" fn(
            pass_action: *const sg_pass_action,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub begin_pass: ::std::option::Option<
        unsafe extern "C" fn(
            pass: sg_pass,
            pass_action: *const sg_pass_action,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_viewport: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_scissor_rect: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_bindings: ::std::option::Option<
        unsafe extern "C" fn(bindings: *const sg_bindings, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_uniforms: ::std::option::Option<
        unsafe extern "C" fn(
            stage: sg_shader_stage,
            ub_index: ::std::os::raw::c_int,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub draw: ::std::option::Option<
        unsafe extern "C" fn(
            base_element: ::std::os::raw::c_int,
            num_elements: ::std::os::raw::c_int,
            num_instances: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub end_pass:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub commit: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub alloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(result: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_image: ::std::option::Option<
        unsafe extern "C" fn(result: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(result: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_shader: ::std::option::Option<
        unsafe extern "C" fn(result: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(result: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_pass: ::std::option::Option<
        unsafe extern "C" fn(result: sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_pass: ::std::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub init_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf_id: sg_buffer,
            desc: *const sg_buffer_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_image: ::std::option::Option<
        unsafe extern "C" fn(
            img_id: sg_image,
            desc: *const sg_image_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            smp_id: sg_sampler,
            desc: *const sg_sampler_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_shader: ::std::option::Option<
        unsafe extern "C" fn(
            shd_id: sg_shader,
            desc: *const sg_shader_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            pip_id: sg_pipeline,
            desc: *const sg_pipeline_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_pass: ::std::option::Option<
        unsafe extern "C" fn(
            pass_id: sg_pass,
            desc: *const sg_pass_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub uninit_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_pass: ::std::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_pass: ::std::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub push_debug_group: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub pop_debug_group:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_sg_trace_hooks() {
    const UNINIT: ::std::mem::MaybeUninit<sg_trace_hooks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_trace_hooks>(),
        472usize,
        concat!("Size of: ", stringify!(sg_trace_hooks))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_trace_hooks>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_trace_hooks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_state_cache) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(reset_state_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_image) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_sampler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_shader) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_pipeline) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_pass) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(make_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_buffer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_image) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_sampler) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_shader) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_pipeline) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_pass) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(destroy_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_buffer) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(update_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_image) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(update_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append_buffer) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(append_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_default_pass) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(begin_default_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_pass) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(begin_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply_viewport) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(apply_viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply_scissor_rect) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(apply_scissor_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply_pipeline) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(apply_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply_bindings) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(apply_bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply_uniforms) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(apply_uniforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_pass) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(end_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_buffer) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_image) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_sampler) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_shader) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_pipeline) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_pass) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(alloc_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_buffer) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_image) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_sampler) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_shader) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_pipeline) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_pass) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(dealloc_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_buffer) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_image) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_sampler) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_shader) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_pipeline) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_pass) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(init_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_buffer) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_image) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_sampler) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_shader) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_pipeline) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uninit_pass) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(uninit_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_buffer) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_image) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_sampler) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_shader) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_pipeline) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_pass) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(fail_pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).push_debug_group) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(push_debug_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pop_debug_group) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_trace_hooks),
            "::",
            stringify!(pop_debug_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_slot_info {
    pub state: sg_resource_state,
    pub res_id: u32,
    pub ctx_id: u32,
}
#[test]
fn bindgen_test_layout_sg_slot_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_slot_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_slot_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_slot_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_slot_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_slot_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_slot_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_slot_info),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_slot_info),
            "::",
            stringify!(ctx_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_info {
    pub slot: sg_slot_info,
    pub update_frame_index: u32,
    pub append_frame_index: u32,
    pub append_pos: ::std::os::raw::c_int,
    pub append_overflow: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_buffer_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_buffer_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_buffer_info>(),
        36usize,
        concat!("Size of: ", stringify!(sg_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_buffer_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_buffer_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_frame_index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(update_frame_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append_frame_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(append_frame_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append_pos) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(append_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append_overflow) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(append_overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_slots) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_buffer_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_info {
    pub slot: sg_slot_info,
    pub upd_frame_index: u32,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_image_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_image_info>(),
        24usize,
        concat!("Size of: ", stringify!(sg_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_image_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_info),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upd_frame_index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_info),
            "::",
            stringify!(upd_frame_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_slots) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_info),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_image_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_info {
    pub slot: sg_slot_info,
}
#[test]
fn bindgen_test_layout_sg_sampler_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_sampler_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_sampler_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_sampler_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_sampler_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_sampler_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_sampler_info),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_info {
    pub slot: sg_slot_info,
}
#[test]
fn bindgen_test_layout_sg_shader_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_shader_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_shader_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_shader_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_shader_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_shader_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_shader_info),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_info {
    pub slot: sg_slot_info,
}
#[test]
fn bindgen_test_layout_sg_pipeline_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pipeline_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pipeline_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_pipeline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pipeline_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pipeline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pipeline_info),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_info {
    pub slot: sg_slot_info,
}
#[test]
fn bindgen_test_layout_sg_pass_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_pass_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_pass_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_pass_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_pass_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_pass_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_pass_info),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_gl {
    pub num_bind_buffer: u32,
    pub num_active_texture: u32,
    pub num_bind_texture: u32,
    pub num_bind_sampler: u32,
    pub num_use_program: u32,
    pub num_render_state: u32,
    pub num_vertex_attrib_pointer: u32,
    pub num_vertex_attrib_divisor: u32,
    pub num_enable_vertex_attrib_array: u32,
    pub num_disable_vertex_attrib_array: u32,
    pub num_uniform: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_gl() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_gl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_gl>(),
        44usize,
        concat!("Size of: ", stringify!(sg_frame_stats_gl))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_gl>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_gl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bind_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_bind_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_active_texture) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_active_texture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bind_texture) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_bind_texture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bind_sampler) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_bind_sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_use_program) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_use_program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_render_state) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_render_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertex_attrib_pointer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_vertex_attrib_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vertex_attrib_divisor) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_vertex_attrib_divisor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_enable_vertex_attrib_array) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_enable_vertex_attrib_array)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_disable_vertex_attrib_array) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_disable_vertex_attrib_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_uniform) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_gl),
            "::",
            stringify!(num_uniform)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pass {
    pub num_om_set_render_targets: u32,
    pub num_clear_render_target_view: u32,
    pub num_clear_depth_stencil_view: u32,
    pub num_resolve_subresource: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11_pass() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11_pass> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11_pass>(),
        16usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11_pass))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11_pass>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11_pass))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_om_set_render_targets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pass),
            "::",
            stringify!(num_om_set_render_targets)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_clear_render_target_view) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pass),
            "::",
            stringify!(num_clear_render_target_view)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_clear_depth_stencil_view) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pass),
            "::",
            stringify!(num_clear_depth_stencil_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_resolve_subresource) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pass),
            "::",
            stringify!(num_resolve_subresource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pipeline {
    pub num_rs_set_state: u32,
    pub num_om_set_depth_stencil_state: u32,
    pub num_om_set_blend_state: u32,
    pub num_ia_set_primitive_topology: u32,
    pub num_ia_set_input_layout: u32,
    pub num_vs_set_shader: u32,
    pub num_vs_set_constant_buffers: u32,
    pub num_ps_set_shader: u32,
    pub num_ps_set_constant_buffers: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11_pipeline() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11_pipeline> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11_pipeline>(),
        36usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11_pipeline))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11_pipeline>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11_pipeline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_rs_set_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_rs_set_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_om_set_depth_stencil_state) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_om_set_depth_stencil_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_om_set_blend_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_om_set_blend_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ia_set_primitive_topology) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_ia_set_primitive_topology)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ia_set_input_layout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_ia_set_input_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vs_set_shader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_vs_set_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vs_set_constant_buffers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_vs_set_constant_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ps_set_shader) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_ps_set_shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ps_set_constant_buffers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_pipeline),
            "::",
            stringify!(num_ps_set_constant_buffers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_bindings {
    pub num_ia_set_vertex_buffers: u32,
    pub num_ia_set_index_buffer: u32,
    pub num_vs_set_shader_resources: u32,
    pub num_ps_set_shader_resources: u32,
    pub num_vs_set_samplers: u32,
    pub num_ps_set_samplers: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11_bindings() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11_bindings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11_bindings>(),
        24usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11_bindings>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11_bindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ia_set_vertex_buffers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_ia_set_vertex_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ia_set_index_buffer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_ia_set_index_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vs_set_shader_resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_vs_set_shader_resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ps_set_shader_resources) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_ps_set_shader_resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vs_set_samplers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_vs_set_samplers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ps_set_samplers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_bindings),
            "::",
            stringify!(num_ps_set_samplers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_uniforms {
    pub num_update_subresource: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11_uniforms() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11_uniforms> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11_uniforms>(),
        4usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11_uniforms))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11_uniforms>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11_uniforms))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_update_subresource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_uniforms),
            "::",
            stringify!(num_update_subresource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_draw {
    pub num_draw_indexed_instanced: u32,
    pub num_draw_indexed: u32,
    pub num_draw_instanced: u32,
    pub num_draw: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11_draw() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11_draw> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11_draw>(),
        16usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11_draw))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11_draw>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11_draw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_draw_indexed_instanced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_draw),
            "::",
            stringify!(num_draw_indexed_instanced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_draw_indexed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_draw),
            "::",
            stringify!(num_draw_indexed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_draw_instanced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_draw),
            "::",
            stringify!(num_draw_instanced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_draw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11_draw),
            "::",
            stringify!(num_draw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11 {
    pub pass: sg_frame_stats_d3d11_pass,
    pub pipeline: sg_frame_stats_d3d11_pipeline,
    pub bindings: sg_frame_stats_d3d11_bindings,
    pub uniforms: sg_frame_stats_d3d11_uniforms,
    pub draw: sg_frame_stats_d3d11_draw,
    pub num_map: u32,
    pub num_unmap: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_d3d11() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_d3d11> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_d3d11>(),
        104usize,
        concat!("Size of: ", stringify!(sg_frame_stats_d3d11))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_d3d11>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_d3d11))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindings) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniforms) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(uniforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).draw) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_map) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(num_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_unmap) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_d3d11),
            "::",
            stringify!(num_unmap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_idpool {
    pub num_added: u32,
    pub num_released: u32,
    pub num_garbage_collected: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_metal_idpool() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_metal_idpool> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_metal_idpool>(),
        12usize,
        concat!("Size of: ", stringify!(sg_frame_stats_metal_idpool))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_metal_idpool>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_metal_idpool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_added) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_idpool),
            "::",
            stringify!(num_added)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_released) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_idpool),
            "::",
            stringify!(num_released)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_garbage_collected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_idpool),
            "::",
            stringify!(num_garbage_collected)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_pipeline {
    pub num_set_blend_color: u32,
    pub num_set_cull_mode: u32,
    pub num_set_front_facing_winding: u32,
    pub num_set_stencil_reference_value: u32,
    pub num_set_depth_bias: u32,
    pub num_set_render_pipeline_state: u32,
    pub num_set_depth_stencil_state: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_metal_pipeline() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_metal_pipeline> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_metal_pipeline>(),
        28usize,
        concat!("Size of: ", stringify!(sg_frame_stats_metal_pipeline))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_metal_pipeline>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_metal_pipeline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_blend_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_blend_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_cull_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_cull_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_front_facing_winding) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_front_facing_winding)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_stencil_reference_value) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_stencil_reference_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_depth_bias) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_depth_bias)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_render_pipeline_state) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_render_pipeline_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_depth_stencil_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_pipeline),
            "::",
            stringify!(num_set_depth_stencil_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_set_vertex_texture: u32,
    pub num_set_vertex_sampler_state: u32,
    pub num_set_fragment_texture: u32,
    pub num_set_fragment_sampler_state: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_metal_bindings() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_metal_bindings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_metal_bindings>(),
        20usize,
        concat!("Size of: ", stringify!(sg_frame_stats_metal_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_metal_bindings>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_metal_bindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_vertex_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_bindings),
            "::",
            stringify!(num_set_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_vertex_texture) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_bindings),
            "::",
            stringify!(num_set_vertex_texture)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_vertex_sampler_state) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_bindings),
            "::",
            stringify!(num_set_vertex_sampler_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_fragment_texture) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_bindings),
            "::",
            stringify!(num_set_fragment_texture)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_fragment_sampler_state) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_bindings),
            "::",
            stringify!(num_set_fragment_sampler_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_uniforms {
    pub num_set_vertex_buffer_offset: u32,
    pub num_set_fragment_buffer_offset: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_metal_uniforms() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_metal_uniforms> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_metal_uniforms>(),
        8usize,
        concat!("Size of: ", stringify!(sg_frame_stats_metal_uniforms))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_metal_uniforms>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_metal_uniforms))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_vertex_buffer_offset) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_uniforms),
            "::",
            stringify!(num_set_vertex_buffer_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_set_fragment_buffer_offset) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal_uniforms),
            "::",
            stringify!(num_set_fragment_buffer_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal {
    pub idpool: sg_frame_stats_metal_idpool,
    pub pipeline: sg_frame_stats_metal_pipeline,
    pub bindings: sg_frame_stats_metal_bindings,
    pub uniforms: sg_frame_stats_metal_uniforms,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_metal() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_metal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_metal>(),
        68usize,
        concat!("Size of: ", stringify!(sg_frame_stats_metal))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_metal>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_metal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idpool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal),
            "::",
            stringify!(idpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniforms) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_metal),
            "::",
            stringify!(uniforms)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_uniforms {
    pub num_set_bindgroup: u32,
    pub size_write_buffer: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_wgpu_uniforms() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_wgpu_uniforms> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_wgpu_uniforms>(),
        8usize,
        concat!("Size of: ", stringify!(sg_frame_stats_wgpu_uniforms))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_wgpu_uniforms>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_wgpu_uniforms))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_bindgroup) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_uniforms),
            "::",
            stringify!(num_set_bindgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_write_buffer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_uniforms),
            "::",
            stringify!(size_write_buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_skip_redundant_vertex_buffer: u32,
    pub num_set_index_buffer: u32,
    pub num_skip_redundant_index_buffer: u32,
    pub num_create_bindgroup: u32,
    pub num_discard_bindgroup: u32,
    pub num_set_bindgroup: u32,
    pub num_skip_redundant_bindgroup: u32,
    pub num_bindgroup_cache_hits: u32,
    pub num_bindgroup_cache_misses: u32,
    pub num_bindgroup_cache_collisions: u32,
    pub num_bindgroup_cache_hash_vs_key_mismatch: u32,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_wgpu_bindings() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_wgpu_bindings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_wgpu_bindings>(),
        48usize,
        concat!("Size of: ", stringify!(sg_frame_stats_wgpu_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_wgpu_bindings>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_wgpu_bindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_vertex_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_set_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_skip_redundant_vertex_buffer) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_skip_redundant_vertex_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_index_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_set_index_buffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_skip_redundant_index_buffer) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_skip_redundant_index_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_create_bindgroup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_create_bindgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_discard_bindgroup) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_discard_bindgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_set_bindgroup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_set_bindgroup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_skip_redundant_bindgroup) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_skip_redundant_bindgroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bindgroup_cache_hits) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_bindgroup_cache_hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bindgroup_cache_misses) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_bindgroup_cache_misses)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_bindgroup_cache_collisions) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_bindgroup_cache_collisions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_bindgroup_cache_hash_vs_key_mismatch) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu_bindings),
            "::",
            stringify!(num_bindgroup_cache_hash_vs_key_mismatch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu {
    pub uniforms: sg_frame_stats_wgpu_uniforms,
    pub bindings: sg_frame_stats_wgpu_bindings,
}
#[test]
fn bindgen_test_layout_sg_frame_stats_wgpu() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats_wgpu> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats_wgpu>(),
        56usize,
        concat!("Size of: ", stringify!(sg_frame_stats_wgpu))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats_wgpu>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats_wgpu))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniforms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu),
            "::",
            stringify!(uniforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindings) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats_wgpu),
            "::",
            stringify!(bindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats {
    pub frame_index: u32,
    pub num_passes: u32,
    pub num_apply_viewport: u32,
    pub num_apply_scissor_rect: u32,
    pub num_apply_pipeline: u32,
    pub num_apply_bindings: u32,
    pub num_apply_uniforms: u32,
    pub num_draw: u32,
    pub num_update_buffer: u32,
    pub num_append_buffer: u32,
    pub num_update_image: u32,
    pub size_apply_uniforms: u32,
    pub size_update_buffer: u32,
    pub size_append_buffer: u32,
    pub size_update_image: u32,
    pub gl: sg_frame_stats_gl,
    pub d3d11: sg_frame_stats_d3d11,
    pub metal: sg_frame_stats_metal,
    pub wgpu: sg_frame_stats_wgpu,
}
#[test]
fn bindgen_test_layout_sg_frame_stats() {
    const UNINIT: ::std::mem::MaybeUninit<sg_frame_stats> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_frame_stats>(),
        332usize,
        concat!("Size of: ", stringify!(sg_frame_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_frame_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_frame_stats))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(frame_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_passes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_passes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_apply_viewport) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_apply_viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_apply_scissor_rect) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_apply_scissor_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_apply_pipeline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_apply_pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_apply_bindings) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_apply_bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_apply_uniforms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_apply_uniforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_draw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_update_buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_update_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_append_buffer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_append_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_update_image) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(num_update_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_apply_uniforms) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(size_apply_uniforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_update_buffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(size_update_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_append_buffer) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(size_append_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_update_image) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(size_update_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(gl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(d3d11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metal) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(metal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_frame_stats),
            "::",
            stringify!(wgpu)
        )
    );
}
pub const sg_log_item_SG_LOGITEM_OK: sg_log_item = 0;
pub const sg_log_item_SG_LOGITEM_MALLOC_FAILED: sg_log_item = 1;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 2;
pub const sg_log_item_SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED: sg_log_item = 3;
pub const sg_log_item_SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED: sg_log_item = 4;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_COMPILATION_FAILED: sg_log_item = 5;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_LINKING_FAILED: sg_log_item = 6;
pub const sg_log_item_SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER: sg_log_item = 7;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER: sg_log_item = 8;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNDEFINED: sg_log_item = 9;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT: sg_log_item = 10;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT: sg_log_item =
    11;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNSUPPORTED: sg_log_item = 12;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE: sg_log_item = 13;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNKNOWN: sg_log_item = 14;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED: sg_log_item = 15;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item =
    16;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED: sg_log_item = 17;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 18;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED: sg_log_item = 19;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED: sg_log_item = 20;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 21;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED: sg_log_item = 22;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED: sg_log_item = 23;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED: sg_log_item = 24;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED: sg_log_item = 25;
pub const sg_log_item_SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED: sg_log_item = 26;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED: sg_log_item = 27;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT: sg_log_item = 28;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED: sg_log_item = 29;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED: sg_log_item = 30;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED: sg_log_item = 31;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED: sg_log_item = 32;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED: sg_log_item = 33;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RTV_FAILED: sg_log_item = 34;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DSV_FAILED: sg_log_item = 35;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED: sg_log_item = 36;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED: sg_log_item = 37;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED: sg_log_item = 38;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_BUFFER_FAILED: sg_log_item = 39;
pub const sg_log_item_SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 40;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_TEXTURE_FAILED: sg_log_item = 41;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_SAMPLER_FAILED: sg_log_item = 42;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED: sg_log_item = 43;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_CREATION_FAILED: sg_log_item = 44;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT: sg_log_item = 45;
pub const sg_log_item_SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND: sg_log_item = 46;
pub const sg_log_item_SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND: sg_log_item = 47;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_FAILED: sg_log_item = 48;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_OUTPUT: sg_log_item = 49;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_DSS_FAILED: sg_log_item = 50;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPS_POOL_EXHAUSTED: sg_log_item = 51;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE: sg_log_item = 52;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_POW2: sg_log_item = 53;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATEBINDGROUP_FAILED: sg_log_item = 54;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_BUFFER_FAILED: sg_log_item = 55;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_FAILED: sg_log_item = 56;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 57;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SAMPLER_FAILED: sg_log_item = 58;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SHADER_MODULE_FAILED: sg_log_item = 59;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_IMAGES: sg_log_item = 60;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_SAMPLERS: sg_log_item = 61;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED: sg_log_item = 62;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_PIPELINE_LAYOUT_FAILED: sg_log_item = 63;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_RENDER_PIPELINE_FAILED: sg_log_item = 64;
pub const sg_log_item_SG_LOGITEM_WGPU_PASS_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 65;
pub const sg_log_item_SG_LOGITEM_UNINIT_BUFFER_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 66;
pub const sg_log_item_SG_LOGITEM_UNINIT_IMAGE_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 67;
pub const sg_log_item_SG_LOGITEM_UNINIT_SAMPLER_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 68;
pub const sg_log_item_SG_LOGITEM_UNINIT_SHADER_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 69;
pub const sg_log_item_SG_LOGITEM_UNINIT_PIPELINE_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 70;
pub const sg_log_item_SG_LOGITEM_UNINIT_PASS_ACTIVE_CONTEXT_MISMATCH: sg_log_item = 71;
pub const sg_log_item_SG_LOGITEM_IDENTICAL_COMMIT_LISTENER: sg_log_item = 72;
pub const sg_log_item_SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL: sg_log_item = 73;
pub const sg_log_item_SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED: sg_log_item = 74;
pub const sg_log_item_SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE: sg_log_item = 75;
pub const sg_log_item_SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE: sg_log_item = 76;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SAMPLER_INVALID_STATE: sg_log_item = 77;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE: sg_log_item = 78;
pub const sg_log_item_SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE: sg_log_item = 79;
pub const sg_log_item_SG_LOGITEM_DEALLOC_PASS_INVALID_STATE: sg_log_item = 80;
pub const sg_log_item_SG_LOGITEM_INIT_BUFFER_INVALID_STATE: sg_log_item = 81;
pub const sg_log_item_SG_LOGITEM_INIT_IMAGE_INVALID_STATE: sg_log_item = 82;
pub const sg_log_item_SG_LOGITEM_INIT_SAMPLER_INVALID_STATE: sg_log_item = 83;
pub const sg_log_item_SG_LOGITEM_INIT_SHADER_INVALID_STATE: sg_log_item = 84;
pub const sg_log_item_SG_LOGITEM_INIT_PIPELINE_INVALID_STATE: sg_log_item = 85;
pub const sg_log_item_SG_LOGITEM_INIT_PASS_INVALID_STATE: sg_log_item = 86;
pub const sg_log_item_SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE: sg_log_item = 87;
pub const sg_log_item_SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE: sg_log_item = 88;
pub const sg_log_item_SG_LOGITEM_UNINIT_SAMPLER_INVALID_STATE: sg_log_item = 89;
pub const sg_log_item_SG_LOGITEM_UNINIT_SHADER_INVALID_STATE: sg_log_item = 90;
pub const sg_log_item_SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE: sg_log_item = 91;
pub const sg_log_item_SG_LOGITEM_UNINIT_PASS_INVALID_STATE: sg_log_item = 92;
pub const sg_log_item_SG_LOGITEM_FAIL_BUFFER_INVALID_STATE: sg_log_item = 93;
pub const sg_log_item_SG_LOGITEM_FAIL_IMAGE_INVALID_STATE: sg_log_item = 94;
pub const sg_log_item_SG_LOGITEM_FAIL_SAMPLER_INVALID_STATE: sg_log_item = 95;
pub const sg_log_item_SG_LOGITEM_FAIL_SHADER_INVALID_STATE: sg_log_item = 96;
pub const sg_log_item_SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE: sg_log_item = 97;
pub const sg_log_item_SG_LOGITEM_FAIL_PASS_INVALID_STATE: sg_log_item = 98;
pub const sg_log_item_SG_LOGITEM_BUFFER_POOL_EXHAUSTED: sg_log_item = 99;
pub const sg_log_item_SG_LOGITEM_IMAGE_POOL_EXHAUSTED: sg_log_item = 100;
pub const sg_log_item_SG_LOGITEM_SAMPLER_POOL_EXHAUSTED: sg_log_item = 101;
pub const sg_log_item_SG_LOGITEM_SHADER_POOL_EXHAUSTED: sg_log_item = 102;
pub const sg_log_item_SG_LOGITEM_PIPELINE_POOL_EXHAUSTED: sg_log_item = 103;
pub const sg_log_item_SG_LOGITEM_PASS_POOL_EXHAUSTED: sg_log_item = 104;
pub const sg_log_item_SG_LOGITEM_DRAW_WITHOUT_BINDINGS: sg_log_item = 105;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY: sg_log_item = 106;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE: sg_log_item = 107;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA: sg_log_item = 108;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE: sg_log_item = 109;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA: sg_log_item = 110;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA: sg_log_item = 111;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE: sg_log_item = 112;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY: sg_log_item = 113;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH: sg_log_item = 114;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT: sg_log_item = 115;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT: sg_log_item = 116;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT: sg_log_item = 117;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT: sg_log_item = 118;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT: sg_log_item = 119;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS: sg_log_item = 120;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_3D_IMAGE: sg_log_item = 121;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE: sg_log_item = 122;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE: sg_log_item = 123;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA: sg_log_item = 124;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA: sg_log_item = 125;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA: sg_log_item = 126;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE: sg_log_item = 127;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_CANARY: sg_log_item = 128;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MINFILTER_NONE: sg_log_item = 129;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MAGFILTER_NONE: sg_log_item = 130;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING:
    sg_log_item = 131;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_CANARY: sg_log_item = 132;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE: sg_log_item = 133;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE: sg_log_item = 134;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE: sg_log_item = 135;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE: sg_log_item = 136;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS: sg_log_item = 137;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS: sg_log_item = 138;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS: sg_log_item = 139;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME: sg_log_item = 140;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH: sg_log_item = 141;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT: sg_log_item = 142;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE: sg_log_item = 143;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGES: sg_log_item = 144;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_SAMPLERS: sg_log_item = 145;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_IMAGE_SLOT_OUT_OF_RANGE:
    sg_log_item = 146;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE : sg_log_item = 147 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_NAME_REQUIRED_FOR_GL:
    sg_log_item = 148;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_NAME_BUT_NOT_USED:
    sg_log_item = 149;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_IMAGE_BUT_NOT_USED:
    sg_log_item = 150;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_SAMPLER_BUT_NOT_USED:
    sg_log_item = 151;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED: sg_log_item =
    152;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED: sg_log_item = 153;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS:
    sg_log_item = 154;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS : sg_log_item = 155 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGE_SAMPLER_PAIRS: sg_log_item = 156;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS: sg_log_item = 157;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG: sg_log_item = 158;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY: sg_log_item = 159;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER: sg_log_item = 160;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS: sg_log_item = 161;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4: sg_log_item = 162;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS: sg_log_item = 163;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_CANARY: sg_log_item = 164;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_NO_ATTACHMENTS: sg_log_item = 165;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_NO_CONT_COLOR_ATTS: sg_log_item = 166;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_IMAGE: sg_log_item = 167;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_MIPLEVEL: sg_log_item = 168;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_FACE: sg_log_item = 169;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_LAYER: sg_log_item = 170;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_SLICE: sg_log_item = 171;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_NO_RT: sg_log_item = 172;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_COLOR_INV_PIXELFORMAT: sg_log_item = 173;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_INV_PIXELFORMAT: sg_log_item = 174;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SIZES: sg_log_item = 175;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_IMAGE_SAMPLE_COUNTS: sg_log_item = 176;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_COLOR_IMAGE_MSAA: sg_log_item = 177;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE: sg_log_item = 178;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_SAMPLE_COUNT: sg_log_item = 179;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_MIPLEVEL: sg_log_item = 180;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_FACE: sg_log_item = 181;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_LAYER: sg_log_item = 182;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_SLICE: sg_log_item = 183;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_NO_RT: sg_log_item = 184;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_SIZES: sg_log_item = 185;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_RESOLVE_IMAGE_FORMAT: sg_log_item = 186;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE: sg_log_item = 187;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_MIPLEVEL: sg_log_item = 188;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_FACE: sg_log_item = 189;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_LAYER: sg_log_item = 190;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_SLICE: sg_log_item = 191;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_NO_RT: sg_log_item = 192;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_SIZES: sg_log_item = 193;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PASSDESC_DEPTH_IMAGE_SAMPLE_COUNT: sg_log_item = 194;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_PASS: sg_log_item = 195;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE: sg_log_item = 196;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE: sg_log_item = 197;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE: sg_log_item =
    198;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID: sg_log_item = 199;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS: sg_log_item = 200;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID: sg_log_item = 201;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS: sg_log_item = 202;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_VALID: sg_log_item = 203;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_ATT_COUNT: sg_log_item = 204;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT: sg_log_item = 205;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT: sg_log_item = 206;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT: sg_log_item = 207;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE: sg_log_item = 208;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS: sg_log_item = 209;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID: sg_log_item = 210;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VBS: sg_log_item = 211;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_EXISTS: sg_log_item = 212;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_TYPE: sg_log_item = 213;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW: sg_log_item = 214;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_NO_IB: sg_log_item = 215;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB: sg_log_item = 216;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_EXISTS: sg_log_item = 217;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_TYPE: sg_log_item = 218;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW: sg_log_item = 219;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_IMAGE_BINDING: sg_log_item = 220;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS: sg_log_item = 221;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_TYPE_MISMATCH: sg_log_item = 222;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_MSAA: sg_log_item = 223;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 224;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_DEPTH_IMAGE: sg_log_item = 225;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 226;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_BINDING: sg_log_item = 227;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    228;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 229;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 230;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 231;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_SMP_EXISTS: sg_log_item = 232;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_IMAGE_BINDING: sg_log_item = 233;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS: sg_log_item = 234;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_TYPE_MISMATCH: sg_log_item = 235;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_MSAA: sg_log_item = 236;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 237;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_DEPTH_IMAGE: sg_log_item = 238;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 239;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_BINDING: sg_log_item = 240;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    241;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 242;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 243;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 244;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_SMP_EXISTS: sg_log_item = 245;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE: sg_log_item = 246;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT: sg_log_item = 247;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_SIZE: sg_log_item = 248;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE: sg_log_item = 249;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE: sg_log_item = 250;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE: sg_log_item = 251;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND: sg_log_item = 252;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_USAGE: sg_log_item = 253;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_SIZE: sg_log_item = 254;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE: sg_log_item = 255;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_USAGE: sg_log_item = 256;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_ONCE: sg_log_item = 257;
pub const sg_log_item_SG_LOGITEM_VALIDATION_FAILED: sg_log_item = 258;
pub type sg_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_context_desc {
    pub device: *const ::std::os::raw::c_void,
    pub renderpass_descriptor_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub renderpass_descriptor_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub drawable_cb: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub drawable_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_metal_context_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_metal_context_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_metal_context_desc>(),
        48usize,
        concat!("Size of: ", stringify!(sg_metal_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_metal_context_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_metal_context_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderpass_descriptor_cb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(renderpass_descriptor_cb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).renderpass_descriptor_userdata_cb) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(renderpass_descriptor_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawable_cb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(drawable_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawable_userdata_cb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(drawable_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_metal_context_desc),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_context_desc {
    pub device: *const ::std::os::raw::c_void,
    pub device_context: *const ::std::os::raw::c_void,
    pub render_target_view_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub render_target_view_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub depth_stencil_view_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub depth_stencil_view_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_context_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_context_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_context_desc>(),
        56usize,
        concat!("Size of: ", stringify!(sg_d3d11_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_context_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_context_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(device_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_target_view_cb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(render_target_view_cb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).render_target_view_userdata_cb) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(render_target_view_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth_stencil_view_cb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(depth_stencil_view_cb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depth_stencil_view_userdata_cb) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(depth_stencil_view_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_context_desc),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_context_desc {
    pub device: *const ::std::os::raw::c_void,
    pub render_view_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub render_view_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub resolve_view_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub resolve_view_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub depth_stencil_view_cb:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_void>,
    pub depth_stencil_view_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_context_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_context_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_context_desc>(),
        64usize,
        concat!("Size of: ", stringify!(sg_wgpu_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_context_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_context_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_view_cb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(render_view_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).render_view_userdata_cb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(render_view_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_view_cb) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(resolve_view_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_view_userdata_cb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(resolve_view_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth_stencil_view_cb) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(depth_stencil_view_cb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depth_stencil_view_userdata_cb) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(depth_stencil_view_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_context_desc),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_context_desc {
    pub default_framebuffer_cb: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub default_framebuffer_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> u32>,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_gl_context_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_context_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_context_desc>(),
        24usize,
        concat!("Size of: ", stringify!(sg_gl_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_context_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_gl_context_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_framebuffer_cb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_context_desc),
            "::",
            stringify!(default_framebuffer_cb)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).default_framebuffer_userdata_cb) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_context_desc),
            "::",
            stringify!(default_framebuffer_userdata_cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_context_desc),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_context_desc {
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub metal: sg_metal_context_desc,
    pub d3d11: sg_d3d11_context_desc,
    pub wgpu: sg_wgpu_context_desc,
    pub gl: sg_gl_context_desc,
}
#[test]
fn bindgen_test_layout_sg_context_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_context_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_context_desc>(),
        208usize,
        concat!("Size of: ", stringify!(sg_context_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_context_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_context_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(color_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth_format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(depth_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(metal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d3d11) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(d3d11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(wgpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_context_desc),
            "::",
            stringify!(gl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_commit_listener {
    pub func: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_commit_listener() {
    const UNINIT: ::std::mem::MaybeUninit<sg_commit_listener> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_commit_listener>(),
        16usize,
        concat!("Size of: ", stringify!(sg_commit_listener))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_commit_listener>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_commit_listener))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_commit_listener),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_commit_listener),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_allocator() {
    const UNINIT: ::std::mem::MaybeUninit<sg_allocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_allocator>(),
        24usize,
        concat!("Size of: ", stringify!(sg_allocator))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_allocator>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_allocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_fn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_allocator),
            "::",
            stringify!(alloc_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_allocator),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_allocator),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_logger() {
    const UNINIT: ::std::mem::MaybeUninit<sg_logger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_logger>(),
        16usize,
        concat!("Size of: ", stringify!(sg_logger))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_logger>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_logger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_logger),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_logger),
            "::",
            stringify!(user_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_desc {
    pub _start_canary: u32,
    pub buffer_pool_size: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub sampler_pool_size: ::std::os::raw::c_int,
    pub shader_pool_size: ::std::os::raw::c_int,
    pub pipeline_pool_size: ::std::os::raw::c_int,
    pub pass_pool_size: ::std::os::raw::c_int,
    pub context_pool_size: ::std::os::raw::c_int,
    pub uniform_buffer_size: ::std::os::raw::c_int,
    pub max_commit_listeners: ::std::os::raw::c_int,
    pub disable_validation: bool,
    pub mtl_force_managed_storage_mode: bool,
    pub wgpu_disable_bindgroups_cache: bool,
    pub wgpu_bindgroups_cache_size: ::std::os::raw::c_int,
    pub allocator: sg_allocator,
    pub logger: sg_logger,
    pub context: sg_context_desc,
    pub _end_canary: u32,
}
#[test]
fn bindgen_test_layout_sg_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sg_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_desc>(),
        304usize,
        concat!("Size of: ", stringify!(sg_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._start_canary) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(_start_canary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_pool_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(buffer_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_pool_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(image_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler_pool_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(sampler_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shader_pool_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(shader_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline_pool_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(pipeline_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_pool_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(pass_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_pool_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(context_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniform_buffer_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(uniform_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_commit_listeners) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(max_commit_listeners)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_validation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(disable_validation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mtl_force_managed_storage_mode) as usize - ptr as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(mtl_force_managed_storage_mode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wgpu_disable_bindgroups_cache) as usize - ptr as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(wgpu_disable_bindgroups_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgpu_bindgroups_cache_size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(wgpu_bindgroups_cache_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(allocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logger) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(logger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._end_canary) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_desc),
            "::",
            stringify!(_end_canary)
        )
    );
}
extern "C" {
    pub fn sg_setup(desc: *const sg_desc);
}
extern "C" {
    pub fn sg_shutdown();
}
extern "C" {
    pub fn sg_isvalid() -> bool;
}
extern "C" {
    pub fn sg_reset_state_cache();
}
extern "C" {
    pub fn sg_install_trace_hooks(trace_hooks: *const sg_trace_hooks) -> sg_trace_hooks;
}
extern "C" {
    pub fn sg_push_debug_group(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sg_pop_debug_group();
}
extern "C" {
    pub fn sg_add_commit_listener(listener: sg_commit_listener) -> bool;
}
extern "C" {
    pub fn sg_remove_commit_listener(listener: sg_commit_listener) -> bool;
}
extern "C" {
    pub fn sg_make_buffer(desc: *const sg_buffer_desc) -> sg_buffer;
}
extern "C" {
    pub fn sg_make_image(desc: *const sg_image_desc) -> sg_image;
}
extern "C" {
    pub fn sg_make_sampler(desc: *const sg_sampler_desc) -> sg_sampler;
}
extern "C" {
    pub fn sg_make_shader(desc: *const sg_shader_desc) -> sg_shader;
}
extern "C" {
    pub fn sg_make_pipeline(desc: *const sg_pipeline_desc) -> sg_pipeline;
}
extern "C" {
    pub fn sg_make_pass(desc: *const sg_pass_desc) -> sg_pass;
}
extern "C" {
    pub fn sg_destroy_buffer(buf: sg_buffer);
}
extern "C" {
    pub fn sg_destroy_image(img: sg_image);
}
extern "C" {
    pub fn sg_destroy_sampler(smp: sg_sampler);
}
extern "C" {
    pub fn sg_destroy_shader(shd: sg_shader);
}
extern "C" {
    pub fn sg_destroy_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_destroy_pass(pass: sg_pass);
}
extern "C" {
    pub fn sg_update_buffer(buf: sg_buffer, data: *const sg_range);
}
extern "C" {
    pub fn sg_update_image(img: sg_image, data: *const sg_image_data);
}
extern "C" {
    pub fn sg_append_buffer(buf: sg_buffer, data: *const sg_range) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_query_buffer_overflow(buf: sg_buffer) -> bool;
}
extern "C" {
    pub fn sg_query_buffer_will_overflow(buf: sg_buffer, size: usize) -> bool;
}
extern "C" {
    pub fn sg_begin_default_pass(
        pass_action: *const sg_pass_action,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sg_begin_default_passf(pass_action: *const sg_pass_action, width: f32, height: f32);
}
extern "C" {
    pub fn sg_begin_pass(pass: sg_pass, pass_action: *const sg_pass_action);
}
extern "C" {
    pub fn sg_apply_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
extern "C" {
    pub fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
extern "C" {
    pub fn sg_apply_scissor_rect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
extern "C" {
    pub fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
extern "C" {
    pub fn sg_apply_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_apply_bindings(bindings: *const sg_bindings);
}
extern "C" {
    pub fn sg_apply_uniforms(
        stage: sg_shader_stage,
        ub_index: ::std::os::raw::c_int,
        data: *const sg_range,
    );
}
extern "C" {
    pub fn sg_draw(
        base_element: ::std::os::raw::c_int,
        num_elements: ::std::os::raw::c_int,
        num_instances: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sg_end_pass();
}
extern "C" {
    pub fn sg_commit();
}
extern "C" {
    pub fn sg_query_desc() -> sg_desc;
}
extern "C" {
    pub fn sg_query_backend() -> sg_backend;
}
extern "C" {
    pub fn sg_query_features() -> sg_features;
}
extern "C" {
    pub fn sg_query_limits() -> sg_limits;
}
extern "C" {
    pub fn sg_query_pixelformat(fmt: sg_pixel_format) -> sg_pixelformat_info;
}
extern "C" {
    pub fn sg_query_buffer_state(buf: sg_buffer) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_image_state(img: sg_image) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_sampler_state(smp: sg_sampler) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_shader_state(shd: sg_shader) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_pipeline_state(pip: sg_pipeline) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_pass_state(pass: sg_pass) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_buffer_info(buf: sg_buffer) -> sg_buffer_info;
}
extern "C" {
    pub fn sg_query_image_info(img: sg_image) -> sg_image_info;
}
extern "C" {
    pub fn sg_query_sampler_info(smp: sg_sampler) -> sg_sampler_info;
}
extern "C" {
    pub fn sg_query_shader_info(shd: sg_shader) -> sg_shader_info;
}
extern "C" {
    pub fn sg_query_pipeline_info(pip: sg_pipeline) -> sg_pipeline_info;
}
extern "C" {
    pub fn sg_query_pass_info(pass: sg_pass) -> sg_pass_info;
}
extern "C" {
    pub fn sg_query_buffer_desc(buf: sg_buffer) -> sg_buffer_desc;
}
extern "C" {
    pub fn sg_query_image_desc(img: sg_image) -> sg_image_desc;
}
extern "C" {
    pub fn sg_query_sampler_desc(smp: sg_sampler) -> sg_sampler_desc;
}
extern "C" {
    pub fn sg_query_shader_desc(shd: sg_shader) -> sg_shader_desc;
}
extern "C" {
    pub fn sg_query_pipeline_desc(pip: sg_pipeline) -> sg_pipeline_desc;
}
extern "C" {
    pub fn sg_query_pass_desc(pass: sg_pass) -> sg_pass_desc;
}
extern "C" {
    pub fn sg_query_buffer_defaults(desc: *const sg_buffer_desc) -> sg_buffer_desc;
}
extern "C" {
    pub fn sg_query_image_defaults(desc: *const sg_image_desc) -> sg_image_desc;
}
extern "C" {
    pub fn sg_query_sampler_defaults(desc: *const sg_sampler_desc) -> sg_sampler_desc;
}
extern "C" {
    pub fn sg_query_shader_defaults(desc: *const sg_shader_desc) -> sg_shader_desc;
}
extern "C" {
    pub fn sg_query_pipeline_defaults(desc: *const sg_pipeline_desc) -> sg_pipeline_desc;
}
extern "C" {
    pub fn sg_query_pass_defaults(desc: *const sg_pass_desc) -> sg_pass_desc;
}
extern "C" {
    pub fn sg_alloc_buffer() -> sg_buffer;
}
extern "C" {
    pub fn sg_alloc_image() -> sg_image;
}
extern "C" {
    pub fn sg_alloc_sampler() -> sg_sampler;
}
extern "C" {
    pub fn sg_alloc_shader() -> sg_shader;
}
extern "C" {
    pub fn sg_alloc_pipeline() -> sg_pipeline;
}
extern "C" {
    pub fn sg_alloc_pass() -> sg_pass;
}
extern "C" {
    pub fn sg_dealloc_buffer(buf: sg_buffer);
}
extern "C" {
    pub fn sg_dealloc_image(img: sg_image);
}
extern "C" {
    pub fn sg_dealloc_sampler(smp: sg_sampler);
}
extern "C" {
    pub fn sg_dealloc_shader(shd: sg_shader);
}
extern "C" {
    pub fn sg_dealloc_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_dealloc_pass(pass: sg_pass);
}
extern "C" {
    pub fn sg_init_buffer(buf: sg_buffer, desc: *const sg_buffer_desc);
}
extern "C" {
    pub fn sg_init_image(img: sg_image, desc: *const sg_image_desc);
}
extern "C" {
    pub fn sg_init_sampler(smg: sg_sampler, desc: *const sg_sampler_desc);
}
extern "C" {
    pub fn sg_init_shader(shd: sg_shader, desc: *const sg_shader_desc);
}
extern "C" {
    pub fn sg_init_pipeline(pip: sg_pipeline, desc: *const sg_pipeline_desc);
}
extern "C" {
    pub fn sg_init_pass(pass: sg_pass, desc: *const sg_pass_desc);
}
extern "C" {
    pub fn sg_uninit_buffer(buf: sg_buffer);
}
extern "C" {
    pub fn sg_uninit_image(img: sg_image);
}
extern "C" {
    pub fn sg_uninit_sampler(smp: sg_sampler);
}
extern "C" {
    pub fn sg_uninit_shader(shd: sg_shader);
}
extern "C" {
    pub fn sg_uninit_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_uninit_pass(pass: sg_pass);
}
extern "C" {
    pub fn sg_fail_buffer(buf: sg_buffer);
}
extern "C" {
    pub fn sg_fail_image(img: sg_image);
}
extern "C" {
    pub fn sg_fail_sampler(smp: sg_sampler);
}
extern "C" {
    pub fn sg_fail_shader(shd: sg_shader);
}
extern "C" {
    pub fn sg_fail_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_fail_pass(pass: sg_pass);
}
extern "C" {
    pub fn sg_enable_frame_stats();
}
extern "C" {
    pub fn sg_disable_frame_stats();
}
extern "C" {
    pub fn sg_frame_stats_enabled() -> bool;
}
extern "C" {
    pub fn sg_query_frame_stats() -> sg_frame_stats;
}
extern "C" {
    pub fn sg_setup_context() -> sg_context;
}
extern "C" {
    pub fn sg_activate_context(ctx_id: sg_context);
}
extern "C" {
    pub fn sg_discard_context(ctx_id: sg_context);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_buffer_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_buffer_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_buffer_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_d3d11_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_buffer_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_buffer_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_buffer_info),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_image_info {
    pub tex2d: *const ::std::os::raw::c_void,
    pub tex3d: *const ::std::os::raw::c_void,
    pub res: *const ::std::os::raw::c_void,
    pub srv: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_image_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_image_info>(),
        32usize,
        concat!("Size of: ", stringify!(sg_d3d11_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex2d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_image_info),
            "::",
            stringify!(tex2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex3d) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_image_info),
            "::",
            stringify!(tex3d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_image_info),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_image_info),
            "::",
            stringify!(srv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_sampler_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_sampler_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_sampler_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_d3d11_sampler_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_sampler_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_sampler_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_sampler_info),
            "::",
            stringify!(smp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_shader_info {
    pub vs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub fs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub vs: *const ::std::os::raw::c_void,
    pub fs: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_shader_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_shader_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_shader_info>(),
        80usize,
        concat!("Size of: ", stringify!(sg_d3d11_shader_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_shader_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_shader_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_cbufs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_shader_info),
            "::",
            stringify!(vs_cbufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_cbufs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_shader_info),
            "::",
            stringify!(fs_cbufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_shader_info),
            "::",
            stringify!(vs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_shader_info),
            "::",
            stringify!(fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_pipeline_info {
    pub il: *const ::std::os::raw::c_void,
    pub rs: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
    pub bs: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_pipeline_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_pipeline_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_pipeline_info>(),
        32usize,
        concat!("Size of: ", stringify!(sg_d3d11_pipeline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_pipeline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_pipeline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).il) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pipeline_info),
            "::",
            stringify!(il)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pipeline_info),
            "::",
            stringify!(rs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pipeline_info),
            "::",
            stringify!(dss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pipeline_info),
            "::",
            stringify!(bs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_pass_info {
    pub color_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub dsv: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_d3d11_pass_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_d3d11_pass_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_d3d11_pass_info>(),
        72usize,
        concat!("Size of: ", stringify!(sg_d3d11_pass_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_d3d11_pass_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_d3d11_pass_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_rtv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pass_info),
            "::",
            stringify!(color_rtv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_rtv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pass_info),
            "::",
            stringify!(resolve_rtv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsv) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_d3d11_pass_info),
            "::",
            stringify!(dsv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_buffer_info {
    pub buf: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_mtl_buffer_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_mtl_buffer_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_mtl_buffer_info>(),
        24usize,
        concat!("Size of: ", stringify!(sg_mtl_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mtl_buffer_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mtl_buffer_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_buffer_info),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_buffer_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_image_info {
    pub tex: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_mtl_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_mtl_image_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_mtl_image_info>(),
        24usize,
        concat!("Size of: ", stringify!(sg_mtl_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mtl_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mtl_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_image_info),
            "::",
            stringify!(tex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_image_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_mtl_sampler_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_mtl_sampler_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_mtl_sampler_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_mtl_sampler_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mtl_sampler_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mtl_sampler_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_sampler_info),
            "::",
            stringify!(smp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_shader_info {
    pub vs_lib: *const ::std::os::raw::c_void,
    pub fs_lib: *const ::std::os::raw::c_void,
    pub vs_func: *const ::std::os::raw::c_void,
    pub fs_func: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_mtl_shader_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_mtl_shader_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_mtl_shader_info>(),
        32usize,
        concat!("Size of: ", stringify!(sg_mtl_shader_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mtl_shader_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mtl_shader_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_lib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_shader_info),
            "::",
            stringify!(vs_lib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_lib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_shader_info),
            "::",
            stringify!(fs_lib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_shader_info),
            "::",
            stringify!(vs_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_shader_info),
            "::",
            stringify!(fs_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_pipeline_info {
    pub rps: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_mtl_pipeline_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_mtl_pipeline_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_mtl_pipeline_info>(),
        16usize,
        concat!("Size of: ", stringify!(sg_mtl_pipeline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_mtl_pipeline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_mtl_pipeline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_pipeline_info),
            "::",
            stringify!(rps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dss) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_mtl_pipeline_info),
            "::",
            stringify!(dss)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_buffer_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_buffer_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_buffer_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_wgpu_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_buffer_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_buffer_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_buffer_info),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_image_info {
    pub tex: *const ::std::os::raw::c_void,
    pub view: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_image_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_image_info>(),
        16usize,
        concat!("Size of: ", stringify!(sg_wgpu_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_image_info),
            "::",
            stringify!(tex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_image_info),
            "::",
            stringify!(view)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_sampler_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_sampler_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_sampler_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_wgpu_sampler_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_sampler_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_sampler_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_sampler_info),
            "::",
            stringify!(smp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_shader_info {
    pub vs_mod: *const ::std::os::raw::c_void,
    pub fs_mod: *const ::std::os::raw::c_void,
    pub bgl: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_shader_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_shader_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_shader_info>(),
        24usize,
        concat!("Size of: ", stringify!(sg_wgpu_shader_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_shader_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_shader_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vs_mod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_shader_info),
            "::",
            stringify!(vs_mod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_mod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_shader_info),
            "::",
            stringify!(fs_mod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_shader_info),
            "::",
            stringify!(bgl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_pipeline_info {
    pub pip: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_pipeline_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_pipeline_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_pipeline_info>(),
        8usize,
        concat!("Size of: ", stringify!(sg_wgpu_pipeline_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_pipeline_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_pipeline_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_pipeline_info),
            "::",
            stringify!(pip)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_pass_info {
    pub color_view: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_view: [*const ::std::os::raw::c_void; 4usize],
    pub ds_view: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sg_wgpu_pass_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_wgpu_pass_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_wgpu_pass_info>(),
        72usize,
        concat!("Size of: ", stringify!(sg_wgpu_pass_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_wgpu_pass_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_wgpu_pass_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color_view) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_pass_info),
            "::",
            stringify!(color_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolve_view) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_pass_info),
            "::",
            stringify!(resolve_view)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds_view) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_wgpu_pass_info),
            "::",
            stringify!(ds_view)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_buffer_info {
    pub buf: [u32; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_gl_buffer_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_buffer_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_buffer_info>(),
        12usize,
        concat!("Size of: ", stringify!(sg_gl_buffer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_buffer_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_gl_buffer_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_buffer_info),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_buffer_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_image_info {
    pub tex: [u32; 2usize],
    pub tex_target: u32,
    pub msaa_render_buffer: u32,
    pub active_slot: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_gl_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_image_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_image_info>(),
        20usize,
        concat!("Size of: ", stringify!(sg_gl_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_image_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_gl_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_image_info),
            "::",
            stringify!(tex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex_target) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_image_info),
            "::",
            stringify!(tex_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msaa_render_buffer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_image_info),
            "::",
            stringify!(msaa_render_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_slot) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_image_info),
            "::",
            stringify!(active_slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_sampler_info {
    pub smp: u32,
}
#[test]
fn bindgen_test_layout_sg_gl_sampler_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_sampler_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_sampler_info>(),
        4usize,
        concat!("Size of: ", stringify!(sg_gl_sampler_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_sampler_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_gl_sampler_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_sampler_info),
            "::",
            stringify!(smp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_shader_info {
    pub prog: u32,
}
#[test]
fn bindgen_test_layout_sg_gl_shader_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_shader_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_shader_info>(),
        4usize,
        concat!("Size of: ", stringify!(sg_gl_shader_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_shader_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_gl_shader_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prog) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_shader_info),
            "::",
            stringify!(prog)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_pass_info {
    pub frame_buffer: u32,
    pub msaa_resolve_framebuffer: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_sg_gl_pass_info() {
    const UNINIT: ::std::mem::MaybeUninit<sg_gl_pass_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sg_gl_pass_info>(),
        20usize,
        concat!("Size of: ", stringify!(sg_gl_pass_info))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_gl_pass_info>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_gl_pass_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_pass_info),
            "::",
            stringify!(frame_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msaa_resolve_framebuffer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_gl_pass_info),
            "::",
            stringify!(msaa_resolve_framebuffer)
        )
    );
}
extern "C" {
    pub fn sg_d3d11_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_d3d11_device_context() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_d3d11_query_buffer_info(buf: sg_buffer) -> sg_d3d11_buffer_info;
}
extern "C" {
    pub fn sg_d3d11_query_image_info(img: sg_image) -> sg_d3d11_image_info;
}
extern "C" {
    pub fn sg_d3d11_query_sampler_info(smp: sg_sampler) -> sg_d3d11_sampler_info;
}
extern "C" {
    pub fn sg_d3d11_query_shader_info(shd: sg_shader) -> sg_d3d11_shader_info;
}
extern "C" {
    pub fn sg_d3d11_query_pipeline_info(pip: sg_pipeline) -> sg_d3d11_pipeline_info;
}
extern "C" {
    pub fn sg_d3d11_query_pass_info(pass: sg_pass) -> sg_d3d11_pass_info;
}
extern "C" {
    pub fn sg_mtl_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_mtl_render_command_encoder() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_mtl_query_buffer_info(buf: sg_buffer) -> sg_mtl_buffer_info;
}
extern "C" {
    pub fn sg_mtl_query_image_info(img: sg_image) -> sg_mtl_image_info;
}
extern "C" {
    pub fn sg_mtl_query_sampler_info(smp: sg_sampler) -> sg_mtl_sampler_info;
}
extern "C" {
    pub fn sg_mtl_query_shader_info(shd: sg_shader) -> sg_mtl_shader_info;
}
extern "C" {
    pub fn sg_mtl_query_pipeline_info(pip: sg_pipeline) -> sg_mtl_pipeline_info;
}
extern "C" {
    pub fn sg_wgpu_device() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_wgpu_queue() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_wgpu_command_encoder() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_wgpu_render_pass_encoder() -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sg_wgpu_query_buffer_info(buf: sg_buffer) -> sg_wgpu_buffer_info;
}
extern "C" {
    pub fn sg_wgpu_query_image_info(img: sg_image) -> sg_wgpu_image_info;
}
extern "C" {
    pub fn sg_wgpu_query_sampler_info(smp: sg_sampler) -> sg_wgpu_sampler_info;
}
extern "C" {
    pub fn sg_wgpu_query_shader_info(shd: sg_shader) -> sg_wgpu_shader_info;
}
extern "C" {
    pub fn sg_wgpu_query_pipeline_info(pip: sg_pipeline) -> sg_wgpu_pipeline_info;
}
extern "C" {
    pub fn sg_wgpu_query_pass_info(pass: sg_pass) -> sg_wgpu_pass_info;
}
extern "C" {
    pub fn sg_gl_query_buffer_info(buf: sg_buffer) -> sg_gl_buffer_info;
}
extern "C" {
    pub fn sg_gl_query_image_info(img: sg_image) -> sg_gl_image_info;
}
extern "C" {
    pub fn sg_gl_query_sampler_info(smp: sg_sampler) -> sg_gl_sampler_info;
}
extern "C" {
    pub fn sg_gl_query_shader_info(shd: sg_shader) -> sg_gl_shader_info;
}
extern "C" {
    pub fn sg_gl_query_pass_info(pass: sg_pass) -> sg_gl_pass_info;
}
extern "C" {
    pub fn sapp_sgcontext() -> sg_context_desc;
}
extern "C" {
    pub fn slog_func(
        tag: *const ::std::os::raw::c_char,
        log_level: u32,
        log_item: u32,
        message: *const ::std::os::raw::c_char,
        line_nr: u32,
        filename: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stm_setup();
}
extern "C" {
    pub fn stm_now() -> u64;
}
extern "C" {
    pub fn stm_diff(new_ticks: u64, old_ticks: u64) -> u64;
}
extern "C" {
    pub fn stm_since(start_ticks: u64) -> u64;
}
extern "C" {
    pub fn stm_laptime(last_time: *mut u64) -> u64;
}
extern "C" {
    pub fn stm_round_to_common_refresh_rate(frame_ticks: u64) -> u64;
}
extern "C" {
    pub fn stm_sec(ticks: u64) -> f64;
}
extern "C" {
    pub fn stm_ms(ticks: u64) -> f64;
}
extern "C" {
    pub fn stm_us(ticks: u64) -> f64;
}
extern "C" {
    pub fn stm_ns(ticks: u64) -> f64;
}
pub const sgp_error_SGP_NO_ERROR: sgp_error = 0;
pub const sgp_error_SGP_ERROR_SOKOL_INVALID: sgp_error = 1;
pub const sgp_error_SGP_ERROR_VERTICES_FULL: sgp_error = 2;
pub const sgp_error_SGP_ERROR_UNIFORMS_FULL: sgp_error = 3;
pub const sgp_error_SGP_ERROR_COMMANDS_FULL: sgp_error = 4;
pub const sgp_error_SGP_ERROR_VERTICES_OVERFLOW: sgp_error = 5;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_OVERFLOW: sgp_error = 6;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_UNDERFLOW: sgp_error = 7;
pub const sgp_error_SGP_ERROR_STATE_STACK_OVERFLOW: sgp_error = 8;
pub const sgp_error_SGP_ERROR_STATE_STACK_UNDERFLOW: sgp_error = 9;
pub const sgp_error_SGP_ERROR_ALLOC_FAILED: sgp_error = 10;
pub const sgp_error_SGP_ERROR_MAKE_VERTEX_BUFFER_FAILED: sgp_error = 11;
pub const sgp_error_SGP_ERROR_MAKE_WHITE_IMAGE_FAILED: sgp_error = 12;
pub const sgp_error_SGP_ERROR_MAKE_NEAREST_SAMPLER_FAILED: sgp_error = 13;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_SHADER_FAILED: sgp_error = 14;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_PIPELINE_FAILED: sgp_error = 15;
pub type sgp_error = ::std::os::raw::c_int;
pub const sgp_blend_mode_SGP_BLENDMODE_NONE: sgp_blend_mode = 0;
pub const sgp_blend_mode_SGP_BLENDMODE_BLEND: sgp_blend_mode = 1;
pub const sgp_blend_mode_SGP_BLENDMODE_ADD: sgp_blend_mode = 2;
pub const sgp_blend_mode_SGP_BLENDMODE_MOD: sgp_blend_mode = 3;
pub const sgp_blend_mode_SGP_BLENDMODE_MUL: sgp_blend_mode = 4;
pub const sgp_blend_mode__SGP_BLENDMODE_NUM: sgp_blend_mode = 5;
pub type sgp_blend_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_isize {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sgp_isize() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_isize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_isize>(),
        8usize,
        concat!("Size of: ", stringify!(sgp_isize))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_isize>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_isize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_isize),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_isize),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_irect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sgp_irect() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_irect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_irect>(),
        16usize,
        concat!("Size of: ", stringify!(sgp_irect))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_irect>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_irect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_irect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_irect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_irect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_irect),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_rect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[test]
fn bindgen_test_layout_sgp_rect() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_rect>(),
        16usize,
        concat!("Size of: ", stringify!(sgp_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_rect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_rect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_rect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_rect),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textured_rect {
    pub dst: sgp_rect,
    pub src: sgp_rect,
}
#[test]
fn bindgen_test_layout_sgp_textured_rect() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_textured_rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_textured_rect>(),
        32usize,
        concat!("Size of: ", stringify!(sgp_textured_rect))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_textured_rect>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_textured_rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_textured_rect),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_textured_rect),
            "::",
            stringify!(src)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_sgp_vec2() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_vec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_vec2>(),
        8usize,
        concat!("Size of: ", stringify!(sgp_vec2))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_vec2>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_vec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_vec2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_vec2),
            "::",
            stringify!(y)
        )
    );
}
pub type sgp_point = sgp_vec2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_line {
    pub a: sgp_point,
    pub b: sgp_point,
}
#[test]
fn bindgen_test_layout_sgp_line() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_line> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_line>(),
        16usize,
        concat!("Size of: ", stringify!(sgp_line))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_line>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_line),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_line),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_triangle {
    pub a: sgp_point,
    pub b: sgp_point,
    pub c: sgp_point,
}
#[test]
fn bindgen_test_layout_sgp_triangle() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_triangle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_triangle>(),
        24usize,
        concat!("Size of: ", stringify!(sgp_triangle))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_triangle>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_triangle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_triangle),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_triangle),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_triangle),
            "::",
            stringify!(c)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_mat2x3 {
    pub v: [[f32; 3usize]; 2usize],
}
#[test]
fn bindgen_test_layout_sgp_mat2x3() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_mat2x3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_mat2x3>(),
        24usize,
        concat!("Size of: ", stringify!(sgp_mat2x3))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_mat2x3>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_mat2x3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_mat2x3),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_sgp_color() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_color>(),
        16usize,
        concat!("Size of: ", stringify!(sgp_color))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_color>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_color),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_uniform {
    pub size: u32,
    pub content: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_sgp_uniform() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_uniform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_uniform>(),
        20usize,
        concat!("Size of: ", stringify!(sgp_uniform))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_uniform>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_uniform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_uniform),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_uniform),
            "::",
            stringify!(content)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textures_uniform {
    pub count: u32,
    pub images: [sg_image; 4usize],
    pub samplers: [sg_sampler; 4usize],
}
#[test]
fn bindgen_test_layout_sgp_textures_uniform() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_textures_uniform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_textures_uniform>(),
        36usize,
        concat!("Size of: ", stringify!(sgp_textures_uniform))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_textures_uniform>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_textures_uniform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_textures_uniform),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_textures_uniform),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_textures_uniform),
            "::",
            stringify!(samplers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_state {
    pub frame_size: sgp_isize,
    pub viewport: sgp_irect,
    pub scissor: sgp_irect,
    pub proj: sgp_mat2x3,
    pub transform: sgp_mat2x3,
    pub mvp: sgp_mat2x3,
    pub thickness: f32,
    pub color: sgp_color,
    pub textures: sgp_textures_uniform,
    pub uniform: sgp_uniform,
    pub blend_mode: sgp_blend_mode,
    pub pipeline: sg_pipeline,
    pub _base_vertex: u32,
    pub _base_uniform: u32,
    pub _base_command: u32,
}
#[test]
fn bindgen_test_layout_sgp_state() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_state>(),
        208usize,
        concat!("Size of: ", stringify!(sgp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_state>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(frame_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewport) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(viewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scissor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(scissor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proj) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(proj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mvp) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(mvp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thickness) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(thickness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textures) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(textures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniform) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(uniform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend_mode) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(blend_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base_vertex) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(_base_vertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base_uniform) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(_base_uniform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base_command) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_state),
            "::",
            stringify!(_base_command)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_desc {
    pub max_vertices: u32,
    pub max_commands: u32,
    pub pixel_format: sg_pixel_format,
}
#[test]
fn bindgen_test_layout_sgp_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_desc>(),
        12usize,
        concat!("Size of: ", stringify!(sgp_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(sgp_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_vertices) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_desc),
            "::",
            stringify!(max_vertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_commands) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_desc),
            "::",
            stringify!(max_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_desc),
            "::",
            stringify!(pixel_format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_pipeline_desc {
    pub shader: sg_shader_desc,
    pub primitive_type: sg_primitive_type,
    pub blend_mode: sgp_blend_mode,
    pub pixel_format: sg_pixel_format,
}
#[test]
fn bindgen_test_layout_sgp_pipeline_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sgp_pipeline_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgp_pipeline_desc>(),
        3672usize,
        concat!("Size of: ", stringify!(sgp_pipeline_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<sgp_pipeline_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sgp_pipeline_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shader) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_pipeline_desc),
            "::",
            stringify!(shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitive_type) as usize - ptr as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_pipeline_desc),
            "::",
            stringify!(primitive_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend_mode) as usize - ptr as usize },
        3660usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_pipeline_desc),
            "::",
            stringify!(blend_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_format) as usize - ptr as usize },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(sgp_pipeline_desc),
            "::",
            stringify!(pixel_format)
        )
    );
}
extern "C" {
    pub fn sgp_setup(desc: *const sgp_desc);
}
extern "C" {
    pub fn sgp_shutdown();
}
extern "C" {
    pub fn sgp_is_valid() -> bool;
}
extern "C" {
    pub fn sgp_get_last_error() -> sgp_error;
}
extern "C" {
    pub fn sgp_get_error_message(error: sgp_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sgp_make_pipeline(desc: *const sgp_pipeline_desc) -> sg_pipeline;
}
extern "C" {
    pub fn sgp_begin(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sgp_flush();
}
extern "C" {
    pub fn sgp_end();
}
extern "C" {
    pub fn sgp_project(left: f32, right: f32, top: f32, bottom: f32);
}
extern "C" {
    pub fn sgp_reset_project();
}
extern "C" {
    pub fn sgp_push_transform();
}
extern "C" {
    pub fn sgp_pop_transform();
}
extern "C" {
    pub fn sgp_reset_transform();
}
extern "C" {
    pub fn sgp_translate(x: f32, y: f32);
}
extern "C" {
    pub fn sgp_rotate(theta: f32);
}
extern "C" {
    pub fn sgp_rotate_at(theta: f32, x: f32, y: f32);
}
extern "C" {
    pub fn sgp_scale(sx: f32, sy: f32);
}
extern "C" {
    pub fn sgp_scale_at(sx: f32, sy: f32, x: f32, y: f32);
}
extern "C" {
    pub fn sgp_set_pipeline(pipeline: sg_pipeline);
}
extern "C" {
    pub fn sgp_reset_pipeline();
}
extern "C" {
    pub fn sgp_set_uniform(data: *const ::std::os::raw::c_void, size: u32);
}
extern "C" {
    pub fn sgp_reset_uniform();
}
extern "C" {
    pub fn sgp_set_blend_mode(blend_mode: sgp_blend_mode);
}
extern "C" {
    pub fn sgp_reset_blend_mode();
}
extern "C" {
    pub fn sgp_set_color(r: f32, g: f32, b: f32, a: f32);
}
extern "C" {
    pub fn sgp_reset_color();
}
extern "C" {
    pub fn sgp_set_image(channel: ::std::os::raw::c_int, image: sg_image);
}
extern "C" {
    pub fn sgp_unset_image(channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sgp_reset_image(channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sgp_set_sampler(channel: ::std::os::raw::c_int, sampler: sg_sampler);
}
extern "C" {
    pub fn sgp_reset_sampler(channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sgp_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sgp_reset_viewport();
}
extern "C" {
    pub fn sgp_scissor(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sgp_reset_scissor();
}
extern "C" {
    pub fn sgp_reset_state();
}
extern "C" {
    pub fn sgp_clear();
}
extern "C" {
    pub fn sgp_draw_points(points: *const sgp_point, count: u32);
}
extern "C" {
    pub fn sgp_draw_point(x: f32, y: f32);
}
extern "C" {
    pub fn sgp_draw_lines(lines: *const sgp_line, count: u32);
}
extern "C" {
    pub fn sgp_draw_line(ax: f32, ay: f32, bx: f32, by: f32);
}
extern "C" {
    pub fn sgp_draw_lines_strip(points: *const sgp_point, count: u32);
}
extern "C" {
    pub fn sgp_draw_filled_triangles(triangles: *const sgp_triangle, count: u32);
}
extern "C" {
    pub fn sgp_draw_filled_triangle(ax: f32, ay: f32, bx: f32, by: f32, cx: f32, cy: f32);
}
extern "C" {
    pub fn sgp_draw_filled_triangles_strip(points: *const sgp_point, count: u32);
}
extern "C" {
    pub fn sgp_draw_filled_rects(rects: *const sgp_rect, count: u32);
}
extern "C" {
    pub fn sgp_draw_filled_rect(x: f32, y: f32, w: f32, h: f32);
}
extern "C" {
    pub fn sgp_draw_textured_rects(
        channel: ::std::os::raw::c_int,
        rects: *const sgp_textured_rect,
        count: u32,
    );
}
extern "C" {
    pub fn sgp_draw_textured_rect(
        channel: ::std::os::raw::c_int,
        dest_rect: sgp_rect,
        src_rect: sgp_rect,
    );
}
extern "C" {
    pub fn sgp_query_state() -> *mut sgp_state;
}
extern "C" {
    pub fn sgp_query_desc() -> sgp_desc;
}
