/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const SOKOL_APP_INCLUDED: u32 = 1;
pub const NULL: u32 = 0;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SOKOL_LOG_INCLUDED: u32 = 1;
pub const SOKOL_TIME_INCLUDED: u32 = 1;
pub const SOKOL_GFX_INCLUDED: u32 = 1;
pub const SOKOL_FETCH_INCLUDED: u32 = 1;
pub const SOKOL_SPINE_INCLUDED: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 0;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 2] = b"_\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const IMGUI_HAS_DOCK: u32 = 1;
pub const SOKOL_IMGUI_INCLUDED: u32 = 1;
pub const SOKOL_GP_INCLUDED: u32 = 1;
pub const SGP_BATCH_OPTIMIZER_DEPTH: u32 = 8;
pub const SGP_UNIFORM_CONTENT_SLOTS: u32 = 4;
pub const SGP_TEXTURE_SLOTS: u32 = 4;
pub const STBI_VERSION: u32 = 1;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "fastcall" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure() -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const SAPP_MAX_TOUCHPOINTS: _bindgen_ty_1 = 8;
pub const SAPP_MAX_MOUSEBUTTONS: _bindgen_ty_1 = 3;
pub const SAPP_MAX_KEYCODES: _bindgen_ty_1 = 512;
pub const SAPP_MAX_ICONIMAGES: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const sapp_event_type_SAPP_EVENTTYPE_INVALID: sapp_event_type = 0;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_DOWN: sapp_event_type = 1;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_UP: sapp_event_type = 2;
pub const sapp_event_type_SAPP_EVENTTYPE_CHAR: sapp_event_type = 3;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_DOWN: sapp_event_type = 4;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_UP: sapp_event_type = 5;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_SCROLL: sapp_event_type = 6;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_MOVE: sapp_event_type = 7;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_ENTER: sapp_event_type = 8;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_LEAVE: sapp_event_type = 9;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_BEGAN: sapp_event_type = 10;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_MOVED: sapp_event_type = 11;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_ENDED: sapp_event_type = 12;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_CANCELLED: sapp_event_type = 13;
pub const sapp_event_type_SAPP_EVENTTYPE_RESIZED: sapp_event_type = 14;
pub const sapp_event_type_SAPP_EVENTTYPE_ICONIFIED: sapp_event_type = 15;
pub const sapp_event_type_SAPP_EVENTTYPE_RESTORED: sapp_event_type = 16;
pub const sapp_event_type_SAPP_EVENTTYPE_FOCUSED: sapp_event_type = 17;
pub const sapp_event_type_SAPP_EVENTTYPE_UNFOCUSED: sapp_event_type = 18;
pub const sapp_event_type_SAPP_EVENTTYPE_SUSPENDED: sapp_event_type = 19;
pub const sapp_event_type_SAPP_EVENTTYPE_RESUMED: sapp_event_type = 20;
pub const sapp_event_type_SAPP_EVENTTYPE_QUIT_REQUESTED: sapp_event_type = 21;
pub const sapp_event_type_SAPP_EVENTTYPE_CLIPBOARD_PASTED: sapp_event_type = 22;
pub const sapp_event_type_SAPP_EVENTTYPE_FILES_DROPPED: sapp_event_type = 23;
pub const sapp_event_type__SAPP_EVENTTYPE_NUM: sapp_event_type = 24;
pub const sapp_event_type__SAPP_EVENTTYPE_FORCE_U32: sapp_event_type = 2147483647;
pub type sapp_event_type = ::std::os::raw::c_int;
pub const sapp_keycode_SAPP_KEYCODE_INVALID: sapp_keycode = 0;
pub const sapp_keycode_SAPP_KEYCODE_SPACE: sapp_keycode = 32;
pub const sapp_keycode_SAPP_KEYCODE_APOSTROPHE: sapp_keycode = 39;
pub const sapp_keycode_SAPP_KEYCODE_COMMA: sapp_keycode = 44;
pub const sapp_keycode_SAPP_KEYCODE_MINUS: sapp_keycode = 45;
pub const sapp_keycode_SAPP_KEYCODE_PERIOD: sapp_keycode = 46;
pub const sapp_keycode_SAPP_KEYCODE_SLASH: sapp_keycode = 47;
pub const sapp_keycode_SAPP_KEYCODE_0: sapp_keycode = 48;
pub const sapp_keycode_SAPP_KEYCODE_1: sapp_keycode = 49;
pub const sapp_keycode_SAPP_KEYCODE_2: sapp_keycode = 50;
pub const sapp_keycode_SAPP_KEYCODE_3: sapp_keycode = 51;
pub const sapp_keycode_SAPP_KEYCODE_4: sapp_keycode = 52;
pub const sapp_keycode_SAPP_KEYCODE_5: sapp_keycode = 53;
pub const sapp_keycode_SAPP_KEYCODE_6: sapp_keycode = 54;
pub const sapp_keycode_SAPP_KEYCODE_7: sapp_keycode = 55;
pub const sapp_keycode_SAPP_KEYCODE_8: sapp_keycode = 56;
pub const sapp_keycode_SAPP_KEYCODE_9: sapp_keycode = 57;
pub const sapp_keycode_SAPP_KEYCODE_SEMICOLON: sapp_keycode = 59;
pub const sapp_keycode_SAPP_KEYCODE_EQUAL: sapp_keycode = 61;
pub const sapp_keycode_SAPP_KEYCODE_A: sapp_keycode = 65;
pub const sapp_keycode_SAPP_KEYCODE_B: sapp_keycode = 66;
pub const sapp_keycode_SAPP_KEYCODE_C: sapp_keycode = 67;
pub const sapp_keycode_SAPP_KEYCODE_D: sapp_keycode = 68;
pub const sapp_keycode_SAPP_KEYCODE_E: sapp_keycode = 69;
pub const sapp_keycode_SAPP_KEYCODE_F: sapp_keycode = 70;
pub const sapp_keycode_SAPP_KEYCODE_G: sapp_keycode = 71;
pub const sapp_keycode_SAPP_KEYCODE_H: sapp_keycode = 72;
pub const sapp_keycode_SAPP_KEYCODE_I: sapp_keycode = 73;
pub const sapp_keycode_SAPP_KEYCODE_J: sapp_keycode = 74;
pub const sapp_keycode_SAPP_KEYCODE_K: sapp_keycode = 75;
pub const sapp_keycode_SAPP_KEYCODE_L: sapp_keycode = 76;
pub const sapp_keycode_SAPP_KEYCODE_M: sapp_keycode = 77;
pub const sapp_keycode_SAPP_KEYCODE_N: sapp_keycode = 78;
pub const sapp_keycode_SAPP_KEYCODE_O: sapp_keycode = 79;
pub const sapp_keycode_SAPP_KEYCODE_P: sapp_keycode = 80;
pub const sapp_keycode_SAPP_KEYCODE_Q: sapp_keycode = 81;
pub const sapp_keycode_SAPP_KEYCODE_R: sapp_keycode = 82;
pub const sapp_keycode_SAPP_KEYCODE_S: sapp_keycode = 83;
pub const sapp_keycode_SAPP_KEYCODE_T: sapp_keycode = 84;
pub const sapp_keycode_SAPP_KEYCODE_U: sapp_keycode = 85;
pub const sapp_keycode_SAPP_KEYCODE_V: sapp_keycode = 86;
pub const sapp_keycode_SAPP_KEYCODE_W: sapp_keycode = 87;
pub const sapp_keycode_SAPP_KEYCODE_X: sapp_keycode = 88;
pub const sapp_keycode_SAPP_KEYCODE_Y: sapp_keycode = 89;
pub const sapp_keycode_SAPP_KEYCODE_Z: sapp_keycode = 90;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_BRACKET: sapp_keycode = 91;
pub const sapp_keycode_SAPP_KEYCODE_BACKSLASH: sapp_keycode = 92;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_BRACKET: sapp_keycode = 93;
pub const sapp_keycode_SAPP_KEYCODE_GRAVE_ACCENT: sapp_keycode = 96;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_1: sapp_keycode = 161;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_2: sapp_keycode = 162;
pub const sapp_keycode_SAPP_KEYCODE_ESCAPE: sapp_keycode = 256;
pub const sapp_keycode_SAPP_KEYCODE_ENTER: sapp_keycode = 257;
pub const sapp_keycode_SAPP_KEYCODE_TAB: sapp_keycode = 258;
pub const sapp_keycode_SAPP_KEYCODE_BACKSPACE: sapp_keycode = 259;
pub const sapp_keycode_SAPP_KEYCODE_INSERT: sapp_keycode = 260;
pub const sapp_keycode_SAPP_KEYCODE_DELETE: sapp_keycode = 261;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT: sapp_keycode = 262;
pub const sapp_keycode_SAPP_KEYCODE_LEFT: sapp_keycode = 263;
pub const sapp_keycode_SAPP_KEYCODE_DOWN: sapp_keycode = 264;
pub const sapp_keycode_SAPP_KEYCODE_UP: sapp_keycode = 265;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_UP: sapp_keycode = 266;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_DOWN: sapp_keycode = 267;
pub const sapp_keycode_SAPP_KEYCODE_HOME: sapp_keycode = 268;
pub const sapp_keycode_SAPP_KEYCODE_END: sapp_keycode = 269;
pub const sapp_keycode_SAPP_KEYCODE_CAPS_LOCK: sapp_keycode = 280;
pub const sapp_keycode_SAPP_KEYCODE_SCROLL_LOCK: sapp_keycode = 281;
pub const sapp_keycode_SAPP_KEYCODE_NUM_LOCK: sapp_keycode = 282;
pub const sapp_keycode_SAPP_KEYCODE_PRINT_SCREEN: sapp_keycode = 283;
pub const sapp_keycode_SAPP_KEYCODE_PAUSE: sapp_keycode = 284;
pub const sapp_keycode_SAPP_KEYCODE_F1: sapp_keycode = 290;
pub const sapp_keycode_SAPP_KEYCODE_F2: sapp_keycode = 291;
pub const sapp_keycode_SAPP_KEYCODE_F3: sapp_keycode = 292;
pub const sapp_keycode_SAPP_KEYCODE_F4: sapp_keycode = 293;
pub const sapp_keycode_SAPP_KEYCODE_F5: sapp_keycode = 294;
pub const sapp_keycode_SAPP_KEYCODE_F6: sapp_keycode = 295;
pub const sapp_keycode_SAPP_KEYCODE_F7: sapp_keycode = 296;
pub const sapp_keycode_SAPP_KEYCODE_F8: sapp_keycode = 297;
pub const sapp_keycode_SAPP_KEYCODE_F9: sapp_keycode = 298;
pub const sapp_keycode_SAPP_KEYCODE_F10: sapp_keycode = 299;
pub const sapp_keycode_SAPP_KEYCODE_F11: sapp_keycode = 300;
pub const sapp_keycode_SAPP_KEYCODE_F12: sapp_keycode = 301;
pub const sapp_keycode_SAPP_KEYCODE_F13: sapp_keycode = 302;
pub const sapp_keycode_SAPP_KEYCODE_F14: sapp_keycode = 303;
pub const sapp_keycode_SAPP_KEYCODE_F15: sapp_keycode = 304;
pub const sapp_keycode_SAPP_KEYCODE_F16: sapp_keycode = 305;
pub const sapp_keycode_SAPP_KEYCODE_F17: sapp_keycode = 306;
pub const sapp_keycode_SAPP_KEYCODE_F18: sapp_keycode = 307;
pub const sapp_keycode_SAPP_KEYCODE_F19: sapp_keycode = 308;
pub const sapp_keycode_SAPP_KEYCODE_F20: sapp_keycode = 309;
pub const sapp_keycode_SAPP_KEYCODE_F21: sapp_keycode = 310;
pub const sapp_keycode_SAPP_KEYCODE_F22: sapp_keycode = 311;
pub const sapp_keycode_SAPP_KEYCODE_F23: sapp_keycode = 312;
pub const sapp_keycode_SAPP_KEYCODE_F24: sapp_keycode = 313;
pub const sapp_keycode_SAPP_KEYCODE_F25: sapp_keycode = 314;
pub const sapp_keycode_SAPP_KEYCODE_KP_0: sapp_keycode = 320;
pub const sapp_keycode_SAPP_KEYCODE_KP_1: sapp_keycode = 321;
pub const sapp_keycode_SAPP_KEYCODE_KP_2: sapp_keycode = 322;
pub const sapp_keycode_SAPP_KEYCODE_KP_3: sapp_keycode = 323;
pub const sapp_keycode_SAPP_KEYCODE_KP_4: sapp_keycode = 324;
pub const sapp_keycode_SAPP_KEYCODE_KP_5: sapp_keycode = 325;
pub const sapp_keycode_SAPP_KEYCODE_KP_6: sapp_keycode = 326;
pub const sapp_keycode_SAPP_KEYCODE_KP_7: sapp_keycode = 327;
pub const sapp_keycode_SAPP_KEYCODE_KP_8: sapp_keycode = 328;
pub const sapp_keycode_SAPP_KEYCODE_KP_9: sapp_keycode = 329;
pub const sapp_keycode_SAPP_KEYCODE_KP_DECIMAL: sapp_keycode = 330;
pub const sapp_keycode_SAPP_KEYCODE_KP_DIVIDE: sapp_keycode = 331;
pub const sapp_keycode_SAPP_KEYCODE_KP_MULTIPLY: sapp_keycode = 332;
pub const sapp_keycode_SAPP_KEYCODE_KP_SUBTRACT: sapp_keycode = 333;
pub const sapp_keycode_SAPP_KEYCODE_KP_ADD: sapp_keycode = 334;
pub const sapp_keycode_SAPP_KEYCODE_KP_ENTER: sapp_keycode = 335;
pub const sapp_keycode_SAPP_KEYCODE_KP_EQUAL: sapp_keycode = 336;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SHIFT: sapp_keycode = 340;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_CONTROL: sapp_keycode = 341;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_ALT: sapp_keycode = 342;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SUPER: sapp_keycode = 343;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SHIFT: sapp_keycode = 344;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_CONTROL: sapp_keycode = 345;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_ALT: sapp_keycode = 346;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SUPER: sapp_keycode = 347;
pub const sapp_keycode_SAPP_KEYCODE_MENU: sapp_keycode = 348;
pub type sapp_keycode = ::std::os::raw::c_int;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_UNKNOWN: sapp_android_tooltype = 0;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_FINGER: sapp_android_tooltype = 1;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_STYLUS: sapp_android_tooltype = 2;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_MOUSE: sapp_android_tooltype = 3;
pub type sapp_android_tooltype = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_touchpoint {
    pub identifier: usize,
    pub pos_x: f32,
    pub pos_y: f32,
    pub android_tooltype: sapp_android_tooltype,
    pub changed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_touchpoint"][::std::mem::size_of::<sapp_touchpoint>() - 20usize];
    ["Alignment of sapp_touchpoint"][::std::mem::align_of::<sapp_touchpoint>() - 4usize];
    ["Offset of field: sapp_touchpoint::identifier"]
        [::std::mem::offset_of!(sapp_touchpoint, identifier) - 0usize];
    ["Offset of field: sapp_touchpoint::pos_x"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_x) - 4usize];
    ["Offset of field: sapp_touchpoint::pos_y"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_y) - 8usize];
    ["Offset of field: sapp_touchpoint::android_tooltype"]
        [::std::mem::offset_of!(sapp_touchpoint, android_tooltype) - 12usize];
    ["Offset of field: sapp_touchpoint::changed"]
        [::std::mem::offset_of!(sapp_touchpoint, changed) - 16usize];
};
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_LEFT: sapp_mousebutton = 0;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_RIGHT: sapp_mousebutton = 1;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_MIDDLE: sapp_mousebutton = 2;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_INVALID: sapp_mousebutton = 256;
pub type sapp_mousebutton = ::std::os::raw::c_int;
pub const SAPP_MODIFIER_SHIFT: _bindgen_ty_2 = 1;
pub const SAPP_MODIFIER_CTRL: _bindgen_ty_2 = 2;
pub const SAPP_MODIFIER_ALT: _bindgen_ty_2 = 4;
pub const SAPP_MODIFIER_SUPER: _bindgen_ty_2 = 8;
pub const SAPP_MODIFIER_LMB: _bindgen_ty_2 = 256;
pub const SAPP_MODIFIER_RMB: _bindgen_ty_2 = 512;
pub const SAPP_MODIFIER_MMB: _bindgen_ty_2 = 1024;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_event {
    pub frame_count: u64,
    pub type_: sapp_event_type,
    pub key_code: sapp_keycode,
    pub char_code: u32,
    pub key_repeat: bool,
    pub modifiers: u32,
    pub mouse_button: sapp_mousebutton,
    pub mouse_x: f32,
    pub mouse_y: f32,
    pub mouse_dx: f32,
    pub mouse_dy: f32,
    pub scroll_x: f32,
    pub scroll_y: f32,
    pub num_touches: ::std::os::raw::c_int,
    pub touches: [sapp_touchpoint; 8usize],
    pub window_width: ::std::os::raw::c_int,
    pub window_height: ::std::os::raw::c_int,
    pub framebuffer_width: ::std::os::raw::c_int,
    pub framebuffer_height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_event"][::std::mem::size_of::<sapp_event>() - 240usize];
    ["Alignment of sapp_event"][::std::mem::align_of::<sapp_event>() - 8usize];
    ["Offset of field: sapp_event::frame_count"]
        [::std::mem::offset_of!(sapp_event, frame_count) - 0usize];
    ["Offset of field: sapp_event::type_"][::std::mem::offset_of!(sapp_event, type_) - 8usize];
    ["Offset of field: sapp_event::key_code"]
        [::std::mem::offset_of!(sapp_event, key_code) - 12usize];
    ["Offset of field: sapp_event::char_code"]
        [::std::mem::offset_of!(sapp_event, char_code) - 16usize];
    ["Offset of field: sapp_event::key_repeat"]
        [::std::mem::offset_of!(sapp_event, key_repeat) - 20usize];
    ["Offset of field: sapp_event::modifiers"]
        [::std::mem::offset_of!(sapp_event, modifiers) - 24usize];
    ["Offset of field: sapp_event::mouse_button"]
        [::std::mem::offset_of!(sapp_event, mouse_button) - 28usize];
    ["Offset of field: sapp_event::mouse_x"][::std::mem::offset_of!(sapp_event, mouse_x) - 32usize];
    ["Offset of field: sapp_event::mouse_y"][::std::mem::offset_of!(sapp_event, mouse_y) - 36usize];
    ["Offset of field: sapp_event::mouse_dx"]
        [::std::mem::offset_of!(sapp_event, mouse_dx) - 40usize];
    ["Offset of field: sapp_event::mouse_dy"]
        [::std::mem::offset_of!(sapp_event, mouse_dy) - 44usize];
    ["Offset of field: sapp_event::scroll_x"]
        [::std::mem::offset_of!(sapp_event, scroll_x) - 48usize];
    ["Offset of field: sapp_event::scroll_y"]
        [::std::mem::offset_of!(sapp_event, scroll_y) - 52usize];
    ["Offset of field: sapp_event::num_touches"]
        [::std::mem::offset_of!(sapp_event, num_touches) - 56usize];
    ["Offset of field: sapp_event::touches"][::std::mem::offset_of!(sapp_event, touches) - 60usize];
    ["Offset of field: sapp_event::window_width"]
        [::std::mem::offset_of!(sapp_event, window_width) - 220usize];
    ["Offset of field: sapp_event::window_height"]
        [::std::mem::offset_of!(sapp_event, window_height) - 224usize];
    ["Offset of field: sapp_event::framebuffer_width"]
        [::std::mem::offset_of!(sapp_event, framebuffer_width) - 228usize];
    ["Offset of field: sapp_event::framebuffer_height"]
        [::std::mem::offset_of!(sapp_event, framebuffer_height) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_range"][::std::mem::size_of::<sapp_range>() - 8usize];
    ["Alignment of sapp_range"][::std::mem::align_of::<sapp_range>() - 4usize];
    ["Offset of field: sapp_range::ptr"][::std::mem::offset_of!(sapp_range, ptr) - 0usize];
    ["Offset of field: sapp_range::size"][::std::mem::offset_of!(sapp_range, size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_image_desc {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: sapp_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_image_desc"][::std::mem::size_of::<sapp_image_desc>() - 16usize];
    ["Alignment of sapp_image_desc"][::std::mem::align_of::<sapp_image_desc>() - 4usize];
    ["Offset of field: sapp_image_desc::width"]
        [::std::mem::offset_of!(sapp_image_desc, width) - 0usize];
    ["Offset of field: sapp_image_desc::height"]
        [::std::mem::offset_of!(sapp_image_desc, height) - 4usize];
    ["Offset of field: sapp_image_desc::pixels"]
        [::std::mem::offset_of!(sapp_image_desc, pixels) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_icon_desc {
    pub sokol_default: bool,
    pub images: [sapp_image_desc; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_icon_desc"][::std::mem::size_of::<sapp_icon_desc>() - 132usize];
    ["Alignment of sapp_icon_desc"][::std::mem::align_of::<sapp_icon_desc>() - 4usize];
    ["Offset of field: sapp_icon_desc::sokol_default"]
        [::std::mem::offset_of!(sapp_icon_desc, sokol_default) - 0usize];
    ["Offset of field: sapp_icon_desc::images"]
        [::std::mem::offset_of!(sapp_icon_desc, images) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_allocator"][::std::mem::size_of::<sapp_allocator>() - 12usize];
    ["Alignment of sapp_allocator"][::std::mem::align_of::<sapp_allocator>() - 4usize];
    ["Offset of field: sapp_allocator::alloc_fn"]
        [::std::mem::offset_of!(sapp_allocator, alloc_fn) - 0usize];
    ["Offset of field: sapp_allocator::free_fn"]
        [::std::mem::offset_of!(sapp_allocator, free_fn) - 4usize];
    ["Offset of field: sapp_allocator::user_data"]
        [::std::mem::offset_of!(sapp_allocator, user_data) - 8usize];
};
pub const sapp_log_item_SAPP_LOGITEM_OK: sapp_log_item = 0;
pub const sapp_log_item_SAPP_LOGITEM_MALLOC_FAILED: sapp_log_item = 1;
pub const sapp_log_item_SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE: sapp_log_item = 2;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED: sapp_log_item = 3;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED: sapp_log_item = 4;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED: sapp_log_item = 5;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED: sapp_log_item = 6;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED: sapp_log_item = 7;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED: sapp_log_item = 8;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED: sapp_log_item = 9;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED: sapp_log_item = 10;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED: sapp_log_item = 11;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED: sapp_log_item = 12;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED: sapp_log_item = 13;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED: sapp_log_item =
    14;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED: sapp_log_item = 15;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED: sapp_log_item = 16;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT: sapp_log_item = 17;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER: sapp_log_item =
    18;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED:
    sapp_log_item = 19;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED: sapp_log_item = 20;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED: sapp_log_item = 21;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED:
    sapp_log_item = 22;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK:
    sapp_log_item = 23;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK:
    sapp_log_item = 24;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED: sapp_log_item = 25;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED: sapp_log_item = 26;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED: sapp_log_item = 27;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND: sapp_log_item = 28;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED: sapp_log_item = 29;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW: sapp_log_item = 30;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS: sapp_log_item = 31;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG: sapp_log_item = 32;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED: sapp_log_item = 33;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING: sapp_log_item = 34;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED: sapp_log_item = 35;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED: sapp_log_item = 36;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED: sapp_log_item = 37;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED: sapp_log_item = 38;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED: sapp_log_item = 39;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED: sapp_log_item = 40;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED: sapp_log_item = 41;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS: sapp_log_item = 42;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL: sapp_log_item = 43;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED: sapp_log_item = 44;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED: sapp_log_item = 45;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED: sapp_log_item = 46;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED: sapp_log_item = 47;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED: sapp_log_item = 48;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED: sapp_log_item = 49;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME: sapp_log_item = 50;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB: sapp_log_item = 51;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB: sapp_log_item = 52;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_READ_MSG_FAILED: sapp_log_item = 53;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED: sapp_log_item = 54;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_CREATE: sapp_log_item = 55;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_RESUME: sapp_log_item = 56;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_PAUSE: sapp_log_item = 57;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_FOCUS: sapp_log_item = 58;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS: sapp_log_item = 59;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW: sapp_log_item = 60;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE: sapp_log_item = 61;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_DESTROY: sapp_log_item = 62;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNKNOWN_MSG: sapp_log_item = 63;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED: sapp_log_item = 64;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE: sapp_log_item = 65;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART: sapp_log_item = 66;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME: sapp_log_item = 67;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE: sapp_log_item =
    68;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED: sapp_log_item =
    69;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE: sapp_log_item = 70;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP: sapp_log_item = 71;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED: sapp_log_item =
    72;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED:
    sapp_log_item = 73;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED: sapp_log_item =
    74;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED: sapp_log_item =
    75;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED: sapp_log_item =
    76;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY: sapp_log_item = 77;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY: sapp_log_item = 78;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE: sapp_log_item = 79;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE: sapp_log_item = 80;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED: sapp_log_item = 81;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS: sapp_log_item = 82;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED: sapp_log_item = 83;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SWAPCHAIN_FAILED: sapp_log_item = 84;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED:
    sapp_log_item = 85;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED:
    sapp_log_item = 86;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED: sapp_log_item = 87;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED: sapp_log_item = 88;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_ERROR: sapp_log_item = 89;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_UNKNOWN: sapp_log_item = 90;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE: sapp_log_item = 91;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_ERROR: sapp_log_item = 92;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN: sapp_log_item = 93;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_CREATE_INSTANCE_FAILED: sapp_log_item = 94;
pub const sapp_log_item_SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH: sapp_log_item = 95;
pub const sapp_log_item_SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG: sapp_log_item = 96;
pub const sapp_log_item_SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG: sapp_log_item = 97;
pub type sapp_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_logger"][::std::mem::size_of::<sapp_logger>() - 8usize];
    ["Alignment of sapp_logger"][::std::mem::align_of::<sapp_logger>() - 4usize];
    ["Offset of field: sapp_logger::func"][::std::mem::offset_of!(sapp_logger, func) - 0usize];
    ["Offset of field: sapp_logger::user_data"]
        [::std::mem::offset_of!(sapp_logger, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_desc {
    pub init_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub frame_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub cleanup_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub event_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_event)>,
    pub user_data: *mut ::std::os::raw::c_void,
    pub init_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub frame_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub cleanup_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub event_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const sapp_event, arg2: *mut ::std::os::raw::c_void),
    >,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub swap_interval: ::std::os::raw::c_int,
    pub high_dpi: bool,
    pub fullscreen: bool,
    pub alpha: bool,
    pub window_title: *const ::std::os::raw::c_char,
    pub enable_clipboard: bool,
    pub clipboard_size: ::std::os::raw::c_int,
    pub enable_dragndrop: bool,
    pub max_dropped_files: ::std::os::raw::c_int,
    pub max_dropped_file_path_length: ::std::os::raw::c_int,
    pub icon: sapp_icon_desc,
    pub allocator: sapp_allocator,
    pub logger: sapp_logger,
    pub gl_major_version: ::std::os::raw::c_int,
    pub gl_minor_version: ::std::os::raw::c_int,
    pub win32_console_utf8: bool,
    pub win32_console_create: bool,
    pub win32_console_attach: bool,
    pub html5_canvas_name: *const ::std::os::raw::c_char,
    pub html5_canvas_resize: bool,
    pub html5_preserve_drawing_buffer: bool,
    pub html5_premultiplied_alpha: bool,
    pub html5_ask_leave_site: bool,
    pub html5_bubble_mouse_events: bool,
    pub html5_bubble_touch_events: bool,
    pub html5_bubble_wheel_events: bool,
    pub html5_bubble_key_events: bool,
    pub html5_bubble_char_events: bool,
    pub html5_use_emsc_set_main_loop: bool,
    pub html5_emsc_set_main_loop_simulate_infinite_loop: bool,
    pub ios_keyboard_resizes_canvas: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_desc"][::std::mem::size_of::<sapp_desc>() - 260usize];
    ["Alignment of sapp_desc"][::std::mem::align_of::<sapp_desc>() - 4usize];
    ["Offset of field: sapp_desc::init_cb"][::std::mem::offset_of!(sapp_desc, init_cb) - 0usize];
    ["Offset of field: sapp_desc::frame_cb"][::std::mem::offset_of!(sapp_desc, frame_cb) - 4usize];
    ["Offset of field: sapp_desc::cleanup_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_cb) - 8usize];
    ["Offset of field: sapp_desc::event_cb"][::std::mem::offset_of!(sapp_desc, event_cb) - 12usize];
    ["Offset of field: sapp_desc::user_data"]
        [::std::mem::offset_of!(sapp_desc, user_data) - 16usize];
    ["Offset of field: sapp_desc::init_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, init_userdata_cb) - 20usize];
    ["Offset of field: sapp_desc::frame_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, frame_userdata_cb) - 24usize];
    ["Offset of field: sapp_desc::cleanup_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_userdata_cb) - 28usize];
    ["Offset of field: sapp_desc::event_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, event_userdata_cb) - 32usize];
    ["Offset of field: sapp_desc::width"][::std::mem::offset_of!(sapp_desc, width) - 36usize];
    ["Offset of field: sapp_desc::height"][::std::mem::offset_of!(sapp_desc, height) - 40usize];
    ["Offset of field: sapp_desc::sample_count"]
        [::std::mem::offset_of!(sapp_desc, sample_count) - 44usize];
    ["Offset of field: sapp_desc::swap_interval"]
        [::std::mem::offset_of!(sapp_desc, swap_interval) - 48usize];
    ["Offset of field: sapp_desc::high_dpi"][::std::mem::offset_of!(sapp_desc, high_dpi) - 52usize];
    ["Offset of field: sapp_desc::fullscreen"]
        [::std::mem::offset_of!(sapp_desc, fullscreen) - 53usize];
    ["Offset of field: sapp_desc::alpha"][::std::mem::offset_of!(sapp_desc, alpha) - 54usize];
    ["Offset of field: sapp_desc::window_title"]
        [::std::mem::offset_of!(sapp_desc, window_title) - 56usize];
    ["Offset of field: sapp_desc::enable_clipboard"]
        [::std::mem::offset_of!(sapp_desc, enable_clipboard) - 60usize];
    ["Offset of field: sapp_desc::clipboard_size"]
        [::std::mem::offset_of!(sapp_desc, clipboard_size) - 64usize];
    ["Offset of field: sapp_desc::enable_dragndrop"]
        [::std::mem::offset_of!(sapp_desc, enable_dragndrop) - 68usize];
    ["Offset of field: sapp_desc::max_dropped_files"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_files) - 72usize];
    ["Offset of field: sapp_desc::max_dropped_file_path_length"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_file_path_length) - 76usize];
    ["Offset of field: sapp_desc::icon"][::std::mem::offset_of!(sapp_desc, icon) - 80usize];
    ["Offset of field: sapp_desc::allocator"]
        [::std::mem::offset_of!(sapp_desc, allocator) - 212usize];
    ["Offset of field: sapp_desc::logger"][::std::mem::offset_of!(sapp_desc, logger) - 224usize];
    ["Offset of field: sapp_desc::gl_major_version"]
        [::std::mem::offset_of!(sapp_desc, gl_major_version) - 232usize];
    ["Offset of field: sapp_desc::gl_minor_version"]
        [::std::mem::offset_of!(sapp_desc, gl_minor_version) - 236usize];
    ["Offset of field: sapp_desc::win32_console_utf8"]
        [::std::mem::offset_of!(sapp_desc, win32_console_utf8) - 240usize];
    ["Offset of field: sapp_desc::win32_console_create"]
        [::std::mem::offset_of!(sapp_desc, win32_console_create) - 241usize];
    ["Offset of field: sapp_desc::win32_console_attach"]
        [::std::mem::offset_of!(sapp_desc, win32_console_attach) - 242usize];
    ["Offset of field: sapp_desc::html5_canvas_name"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_name) - 244usize];
    ["Offset of field: sapp_desc::html5_canvas_resize"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_resize) - 248usize];
    ["Offset of field: sapp_desc::html5_preserve_drawing_buffer"]
        [::std::mem::offset_of!(sapp_desc, html5_preserve_drawing_buffer) - 249usize];
    ["Offset of field: sapp_desc::html5_premultiplied_alpha"]
        [::std::mem::offset_of!(sapp_desc, html5_premultiplied_alpha) - 250usize];
    ["Offset of field: sapp_desc::html5_ask_leave_site"]
        [::std::mem::offset_of!(sapp_desc, html5_ask_leave_site) - 251usize];
    ["Offset of field: sapp_desc::html5_bubble_mouse_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_mouse_events) - 252usize];
    ["Offset of field: sapp_desc::html5_bubble_touch_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_touch_events) - 253usize];
    ["Offset of field: sapp_desc::html5_bubble_wheel_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_wheel_events) - 254usize];
    ["Offset of field: sapp_desc::html5_bubble_key_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_key_events) - 255usize];
    ["Offset of field: sapp_desc::html5_bubble_char_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_char_events) - 256usize];
    ["Offset of field: sapp_desc::html5_use_emsc_set_main_loop"]
        [::std::mem::offset_of!(sapp_desc, html5_use_emsc_set_main_loop) - 257usize];
    ["Offset of field: sapp_desc::html5_emsc_set_main_loop_simulate_infinite_loop"][::std::mem::offset_of!(
        sapp_desc,
        html5_emsc_set_main_loop_simulate_infinite_loop
    ) - 258usize];
    ["Offset of field: sapp_desc::ios_keyboard_resizes_canvas"]
        [::std::mem::offset_of!(sapp_desc, ios_keyboard_resizes_canvas) - 259usize];
};
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_NO_ERROR: sapp_html5_fetch_error = 0;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL: sapp_html5_fetch_error =
    1;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_OTHER: sapp_html5_fetch_error = 2;
pub type sapp_html5_fetch_error = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_response {
    pub succeeded: bool,
    pub error_code: sapp_html5_fetch_error,
    pub file_index: ::std::os::raw::c_int,
    pub data: sapp_range,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_response"]
        [::std::mem::size_of::<sapp_html5_fetch_response>() - 32usize];
    ["Alignment of sapp_html5_fetch_response"]
        [::std::mem::align_of::<sapp_html5_fetch_response>() - 4usize];
    ["Offset of field: sapp_html5_fetch_response::succeeded"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, succeeded) - 0usize];
    ["Offset of field: sapp_html5_fetch_response::error_code"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, error_code) - 4usize];
    ["Offset of field: sapp_html5_fetch_response::file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, file_index) - 8usize];
    ["Offset of field: sapp_html5_fetch_response::data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, data) - 12usize];
    ["Offset of field: sapp_html5_fetch_response::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, buffer) - 20usize];
    ["Offset of field: sapp_html5_fetch_response::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, user_data) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_request {
    pub dropped_file_index: ::std::os::raw::c_int,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_html5_fetch_response)>,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_request"]
        [::std::mem::size_of::<sapp_html5_fetch_request>() - 20usize];
    ["Alignment of sapp_html5_fetch_request"]
        [::std::mem::align_of::<sapp_html5_fetch_request>() - 4usize];
    ["Offset of field: sapp_html5_fetch_request::dropped_file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, dropped_file_index) - 0usize];
    ["Offset of field: sapp_html5_fetch_request::callback"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, callback) - 4usize];
    ["Offset of field: sapp_html5_fetch_request::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, buffer) - 8usize];
    ["Offset of field: sapp_html5_fetch_request::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, user_data) - 16usize];
};
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_DEFAULT: sapp_mouse_cursor = 0;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_ARROW: sapp_mouse_cursor = 1;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_IBEAM: sapp_mouse_cursor = 2;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_CROSSHAIR: sapp_mouse_cursor = 3;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_POINTING_HAND: sapp_mouse_cursor = 4;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_EW: sapp_mouse_cursor = 5;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NS: sapp_mouse_cursor = 6;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NWSE: sapp_mouse_cursor = 7;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NESW: sapp_mouse_cursor = 8;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_ALL: sapp_mouse_cursor = 9;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_NOT_ALLOWED: sapp_mouse_cursor = 10;
pub const sapp_mouse_cursor__SAPP_MOUSECURSOR_NUM: sapp_mouse_cursor = 11;
pub type sapp_mouse_cursor = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn sokol_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sapp_width() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_widthf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_height() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_heightf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_color_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_depth_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_sample_count() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_high_dpi() -> bool;
}
unsafe extern "C" {
    pub fn sapp_dpi_scale() -> f32;
}
unsafe extern "C" {
    pub fn sapp_show_keyboard(show: bool);
}
unsafe extern "C" {
    pub fn sapp_keyboard_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_is_fullscreen() -> bool;
}
unsafe extern "C" {
    pub fn sapp_toggle_fullscreen();
}
unsafe extern "C" {
    pub fn sapp_show_mouse(show: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_lock_mouse(lock: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_locked() -> bool;
}
unsafe extern "C" {
    pub fn sapp_set_mouse_cursor(cursor: sapp_mouse_cursor);
}
unsafe extern "C" {
    pub fn sapp_get_mouse_cursor() -> sapp_mouse_cursor;
}
unsafe extern "C" {
    pub fn sapp_userdata() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_query_desc() -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_request_quit();
}
unsafe extern "C" {
    pub fn sapp_cancel_quit();
}
unsafe extern "C" {
    pub fn sapp_quit();
}
unsafe extern "C" {
    pub fn sapp_consume_event();
}
unsafe extern "C" {
    pub fn sapp_frame_count() -> u64;
}
unsafe extern "C" {
    pub fn sapp_frame_duration() -> f64;
}
unsafe extern "C" {
    pub fn sapp_set_clipboard_string(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_get_clipboard_string() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_set_window_title(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_set_icon(icon_desc: *const sapp_icon_desc);
}
unsafe extern "C" {
    pub fn sapp_get_num_dropped_files() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_get_dropped_file_path(
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_run(desc: *const sapp_desc);
}
unsafe extern "C" {
    pub fn sapp_egl_get_display() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_egl_get_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_html5_ask_leave_site(ask: bool);
}
unsafe extern "C" {
    pub fn sapp_html5_get_dropped_file_size(index: ::std::os::raw::c_int) -> u32;
}
unsafe extern "C" {
    pub fn sapp_html5_fetch_dropped_file(request: *const sapp_html5_fetch_request);
}
unsafe extern "C" {
    pub fn sapp_metal_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_current_drawable() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_depth_stencil_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_msaa_color_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_macos_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_ios_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_swap_chain() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_win32_get_hwnd() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_gl_get_framebuffer() -> u32;
}
unsafe extern "C" {
    pub fn sapp_android_get_native_activity() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slog_func(
        tag: *const ::std::os::raw::c_char,
        log_level: u32,
        log_item: u32,
        message: *const ::std::os::raw::c_char,
        line_nr: u32,
        filename: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn stm_setup();
}
unsafe extern "C" {
    pub fn stm_now() -> u64;
}
unsafe extern "C" {
    pub fn stm_diff(new_ticks: u64, old_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_since(start_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_laptime(last_time: *mut u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_round_to_common_refresh_rate(frame_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_sec(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ms(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_us(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ns(ticks: u64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer"][::std::mem::size_of::<sg_buffer>() - 4usize];
    ["Alignment of sg_buffer"][::std::mem::align_of::<sg_buffer>() - 4usize];
    ["Offset of field: sg_buffer::id"][::std::mem::offset_of!(sg_buffer, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image"][::std::mem::size_of::<sg_image>() - 4usize];
    ["Alignment of sg_image"][::std::mem::align_of::<sg_image>() - 4usize];
    ["Offset of field: sg_image::id"][::std::mem::offset_of!(sg_image, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler"][::std::mem::size_of::<sg_sampler>() - 4usize];
    ["Alignment of sg_sampler"][::std::mem::align_of::<sg_sampler>() - 4usize];
    ["Offset of field: sg_sampler::id"][::std::mem::offset_of!(sg_sampler, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader"][::std::mem::size_of::<sg_shader>() - 4usize];
    ["Alignment of sg_shader"][::std::mem::align_of::<sg_shader>() - 4usize];
    ["Offset of field: sg_shader::id"][::std::mem::offset_of!(sg_shader, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline"][::std::mem::size_of::<sg_pipeline>() - 4usize];
    ["Alignment of sg_pipeline"][::std::mem::align_of::<sg_pipeline>() - 4usize];
    ["Offset of field: sg_pipeline::id"][::std::mem::offset_of!(sg_pipeline, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments"][::std::mem::size_of::<sg_attachments>() - 4usize];
    ["Alignment of sg_attachments"][::std::mem::align_of::<sg_attachments>() - 4usize];
    ["Offset of field: sg_attachments::id"][::std::mem::offset_of!(sg_attachments, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_range"][::std::mem::size_of::<sg_range>() - 8usize];
    ["Alignment of sg_range"][::std::mem::align_of::<sg_range>() - 4usize];
    ["Offset of field: sg_range::ptr"][::std::mem::offset_of!(sg_range, ptr) - 0usize];
    ["Offset of field: sg_range::size"][::std::mem::offset_of!(sg_range, size) - 4usize];
};
pub const SG_INVALID_ID: _bindgen_ty_3 = 0;
pub const SG_NUM_SHADER_STAGES: _bindgen_ty_3 = 2;
pub const SG_NUM_INFLIGHT_FRAMES: _bindgen_ty_3 = 2;
pub const SG_MAX_COLOR_ATTACHMENTS: _bindgen_ty_3 = 4;
pub const SG_MAX_VERTEX_BUFFERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGES: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_SAMPLERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGESAMPLERPAIRS: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_UBS: _bindgen_ty_3 = 4;
pub const SG_MAX_UB_MEMBERS: _bindgen_ty_3 = 16;
pub const SG_MAX_VERTEX_ATTRIBUTES: _bindgen_ty_3 = 16;
pub const SG_MAX_MIPMAPS: _bindgen_ty_3 = 16;
pub const SG_MAX_TEXTUREARRAY_LAYERS: _bindgen_ty_3 = 128;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color"][::std::mem::size_of::<sg_color>() - 16usize];
    ["Alignment of sg_color"][::std::mem::align_of::<sg_color>() - 4usize];
    ["Offset of field: sg_color::r"][::std::mem::offset_of!(sg_color, r) - 0usize];
    ["Offset of field: sg_color::g"][::std::mem::offset_of!(sg_color, g) - 4usize];
    ["Offset of field: sg_color::b"][::std::mem::offset_of!(sg_color, b) - 8usize];
    ["Offset of field: sg_color::a"][::std::mem::offset_of!(sg_color, a) - 12usize];
};
pub const sg_backend_SG_BACKEND_GLCORE33: sg_backend = 0;
pub const sg_backend_SG_BACKEND_GLES3: sg_backend = 1;
pub const sg_backend_SG_BACKEND_D3D11: sg_backend = 2;
pub const sg_backend_SG_BACKEND_METAL_IOS: sg_backend = 3;
pub const sg_backend_SG_BACKEND_METAL_MACOS: sg_backend = 4;
pub const sg_backend_SG_BACKEND_METAL_SIMULATOR: sg_backend = 5;
pub const sg_backend_SG_BACKEND_WGPU: sg_backend = 6;
pub const sg_backend_SG_BACKEND_DUMMY: sg_backend = 7;
pub type sg_backend = ::std::os::raw::c_int;
pub const sg_pixel_format__SG_PIXELFORMAT_DEFAULT: sg_pixel_format = 0;
pub const sg_pixel_format_SG_PIXELFORMAT_NONE: sg_pixel_format = 1;
pub const sg_pixel_format_SG_PIXELFORMAT_R8: sg_pixel_format = 2;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SN: sg_pixel_format = 3;
pub const sg_pixel_format_SG_PIXELFORMAT_R8UI: sg_pixel_format = 4;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SI: sg_pixel_format = 5;
pub const sg_pixel_format_SG_PIXELFORMAT_R16: sg_pixel_format = 6;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SN: sg_pixel_format = 7;
pub const sg_pixel_format_SG_PIXELFORMAT_R16UI: sg_pixel_format = 8;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SI: sg_pixel_format = 9;
pub const sg_pixel_format_SG_PIXELFORMAT_R16F: sg_pixel_format = 10;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8: sg_pixel_format = 11;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SN: sg_pixel_format = 12;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8UI: sg_pixel_format = 13;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SI: sg_pixel_format = 14;
pub const sg_pixel_format_SG_PIXELFORMAT_R32UI: sg_pixel_format = 15;
pub const sg_pixel_format_SG_PIXELFORMAT_R32SI: sg_pixel_format = 16;
pub const sg_pixel_format_SG_PIXELFORMAT_R32F: sg_pixel_format = 17;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16: sg_pixel_format = 18;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SN: sg_pixel_format = 19;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16UI: sg_pixel_format = 20;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SI: sg_pixel_format = 21;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16F: sg_pixel_format = 22;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8: sg_pixel_format = 23;
pub const sg_pixel_format_SG_PIXELFORMAT_SRGB8A8: sg_pixel_format = 24;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SN: sg_pixel_format = 25;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8UI: sg_pixel_format = 26;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SI: sg_pixel_format = 27;
pub const sg_pixel_format_SG_PIXELFORMAT_BGRA8: sg_pixel_format = 28;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB10A2: sg_pixel_format = 29;
pub const sg_pixel_format_SG_PIXELFORMAT_RG11B10F: sg_pixel_format = 30;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB9E5: sg_pixel_format = 31;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32UI: sg_pixel_format = 32;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32SI: sg_pixel_format = 33;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32F: sg_pixel_format = 34;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16: sg_pixel_format = 35;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SN: sg_pixel_format = 36;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16UI: sg_pixel_format = 37;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SI: sg_pixel_format = 38;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16F: sg_pixel_format = 39;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32UI: sg_pixel_format = 40;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32SI: sg_pixel_format = 41;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32F: sg_pixel_format = 42;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH: sg_pixel_format = 43;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH_STENCIL: sg_pixel_format = 44;
pub const sg_pixel_format_SG_PIXELFORMAT_BC1_RGBA: sg_pixel_format = 45;
pub const sg_pixel_format_SG_PIXELFORMAT_BC2_RGBA: sg_pixel_format = 46;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_RGBA: sg_pixel_format = 47;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_SRGBA: sg_pixel_format = 48;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_R: sg_pixel_format = 49;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_RSN: sg_pixel_format = 50;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RG: sg_pixel_format = 51;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RGSN: sg_pixel_format = 52;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBF: sg_pixel_format = 53;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBUF: sg_pixel_format = 54;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_RGBA: sg_pixel_format = 55;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_SRGBA: sg_pixel_format = 56;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_2BPP: sg_pixel_format = 57;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_4BPP: sg_pixel_format = 58;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_2BPP: sg_pixel_format = 59;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_4BPP: sg_pixel_format = 60;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8: sg_pixel_format = 61;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8: sg_pixel_format = 62;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8A1: sg_pixel_format = 63;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGBA8: sg_pixel_format = 64;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8A8: sg_pixel_format = 65;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11: sg_pixel_format = 66;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11SN: sg_pixel_format = 67;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_RGBA: sg_pixel_format = 68;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_SRGBA: sg_pixel_format = 69;
pub const sg_pixel_format__SG_PIXELFORMAT_NUM: sg_pixel_format = 70;
pub const sg_pixel_format__SG_PIXELFORMAT_FORCE_U32: sg_pixel_format = 2147483647;
pub type sg_pixel_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pixelformat_info {
    pub sample: bool,
    pub filter: bool,
    pub render: bool,
    pub blend: bool,
    pub msaa: bool,
    pub depth: bool,
    pub compressed: bool,
    pub bytes_per_pixel: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pixelformat_info"][::std::mem::size_of::<sg_pixelformat_info>() - 12usize];
    ["Alignment of sg_pixelformat_info"][::std::mem::align_of::<sg_pixelformat_info>() - 4usize];
    ["Offset of field: sg_pixelformat_info::sample"]
        [::std::mem::offset_of!(sg_pixelformat_info, sample) - 0usize];
    ["Offset of field: sg_pixelformat_info::filter"]
        [::std::mem::offset_of!(sg_pixelformat_info, filter) - 1usize];
    ["Offset of field: sg_pixelformat_info::render"]
        [::std::mem::offset_of!(sg_pixelformat_info, render) - 2usize];
    ["Offset of field: sg_pixelformat_info::blend"]
        [::std::mem::offset_of!(sg_pixelformat_info, blend) - 3usize];
    ["Offset of field: sg_pixelformat_info::msaa"]
        [::std::mem::offset_of!(sg_pixelformat_info, msaa) - 4usize];
    ["Offset of field: sg_pixelformat_info::depth"]
        [::std::mem::offset_of!(sg_pixelformat_info, depth) - 5usize];
    ["Offset of field: sg_pixelformat_info::compressed"]
        [::std::mem::offset_of!(sg_pixelformat_info, compressed) - 6usize];
    ["Offset of field: sg_pixelformat_info::bytes_per_pixel"]
        [::std::mem::offset_of!(sg_pixelformat_info, bytes_per_pixel) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_features {
    pub origin_top_left: bool,
    pub image_clamp_to_border: bool,
    pub mrt_independent_blend_state: bool,
    pub mrt_independent_write_mask: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_features"][::std::mem::size_of::<sg_features>() - 4usize];
    ["Alignment of sg_features"][::std::mem::align_of::<sg_features>() - 1usize];
    ["Offset of field: sg_features::origin_top_left"]
        [::std::mem::offset_of!(sg_features, origin_top_left) - 0usize];
    ["Offset of field: sg_features::image_clamp_to_border"]
        [::std::mem::offset_of!(sg_features, image_clamp_to_border) - 1usize];
    ["Offset of field: sg_features::mrt_independent_blend_state"]
        [::std::mem::offset_of!(sg_features, mrt_independent_blend_state) - 2usize];
    ["Offset of field: sg_features::mrt_independent_write_mask"]
        [::std::mem::offset_of!(sg_features, mrt_independent_write_mask) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_limits {
    pub max_image_size_2d: ::std::os::raw::c_int,
    pub max_image_size_cube: ::std::os::raw::c_int,
    pub max_image_size_3d: ::std::os::raw::c_int,
    pub max_image_size_array: ::std::os::raw::c_int,
    pub max_image_array_layers: ::std::os::raw::c_int,
    pub max_vertex_attrs: ::std::os::raw::c_int,
    pub gl_max_vertex_uniform_components: ::std::os::raw::c_int,
    pub gl_max_combined_texture_image_units: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_limits"][::std::mem::size_of::<sg_limits>() - 32usize];
    ["Alignment of sg_limits"][::std::mem::align_of::<sg_limits>() - 4usize];
    ["Offset of field: sg_limits::max_image_size_2d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_2d) - 0usize];
    ["Offset of field: sg_limits::max_image_size_cube"]
        [::std::mem::offset_of!(sg_limits, max_image_size_cube) - 4usize];
    ["Offset of field: sg_limits::max_image_size_3d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_3d) - 8usize];
    ["Offset of field: sg_limits::max_image_size_array"]
        [::std::mem::offset_of!(sg_limits, max_image_size_array) - 12usize];
    ["Offset of field: sg_limits::max_image_array_layers"]
        [::std::mem::offset_of!(sg_limits, max_image_array_layers) - 16usize];
    ["Offset of field: sg_limits::max_vertex_attrs"]
        [::std::mem::offset_of!(sg_limits, max_vertex_attrs) - 20usize];
    ["Offset of field: sg_limits::gl_max_vertex_uniform_components"]
        [::std::mem::offset_of!(sg_limits, gl_max_vertex_uniform_components) - 24usize];
    ["Offset of field: sg_limits::gl_max_combined_texture_image_units"]
        [::std::mem::offset_of!(sg_limits, gl_max_combined_texture_image_units) - 28usize];
};
pub const sg_resource_state_SG_RESOURCESTATE_INITIAL: sg_resource_state = 0;
pub const sg_resource_state_SG_RESOURCESTATE_ALLOC: sg_resource_state = 1;
pub const sg_resource_state_SG_RESOURCESTATE_VALID: sg_resource_state = 2;
pub const sg_resource_state_SG_RESOURCESTATE_FAILED: sg_resource_state = 3;
pub const sg_resource_state_SG_RESOURCESTATE_INVALID: sg_resource_state = 4;
pub const sg_resource_state__SG_RESOURCESTATE_FORCE_U32: sg_resource_state = 2147483647;
pub type sg_resource_state = ::std::os::raw::c_int;
pub const sg_usage__SG_USAGE_DEFAULT: sg_usage = 0;
pub const sg_usage_SG_USAGE_IMMUTABLE: sg_usage = 1;
pub const sg_usage_SG_USAGE_DYNAMIC: sg_usage = 2;
pub const sg_usage_SG_USAGE_STREAM: sg_usage = 3;
pub const sg_usage__SG_USAGE_NUM: sg_usage = 4;
pub const sg_usage__SG_USAGE_FORCE_U32: sg_usage = 2147483647;
pub type sg_usage = ::std::os::raw::c_int;
pub const sg_buffer_type__SG_BUFFERTYPE_DEFAULT: sg_buffer_type = 0;
pub const sg_buffer_type_SG_BUFFERTYPE_VERTEXBUFFER: sg_buffer_type = 1;
pub const sg_buffer_type_SG_BUFFERTYPE_INDEXBUFFER: sg_buffer_type = 2;
pub const sg_buffer_type__SG_BUFFERTYPE_NUM: sg_buffer_type = 3;
pub const sg_buffer_type__SG_BUFFERTYPE_FORCE_U32: sg_buffer_type = 2147483647;
pub type sg_buffer_type = ::std::os::raw::c_int;
pub const sg_index_type__SG_INDEXTYPE_DEFAULT: sg_index_type = 0;
pub const sg_index_type_SG_INDEXTYPE_NONE: sg_index_type = 1;
pub const sg_index_type_SG_INDEXTYPE_UINT16: sg_index_type = 2;
pub const sg_index_type_SG_INDEXTYPE_UINT32: sg_index_type = 3;
pub const sg_index_type__SG_INDEXTYPE_NUM: sg_index_type = 4;
pub const sg_index_type__SG_INDEXTYPE_FORCE_U32: sg_index_type = 2147483647;
pub type sg_index_type = ::std::os::raw::c_int;
pub const sg_image_type__SG_IMAGETYPE_DEFAULT: sg_image_type = 0;
pub const sg_image_type_SG_IMAGETYPE_2D: sg_image_type = 1;
pub const sg_image_type_SG_IMAGETYPE_CUBE: sg_image_type = 2;
pub const sg_image_type_SG_IMAGETYPE_3D: sg_image_type = 3;
pub const sg_image_type_SG_IMAGETYPE_ARRAY: sg_image_type = 4;
pub const sg_image_type__SG_IMAGETYPE_NUM: sg_image_type = 5;
pub const sg_image_type__SG_IMAGETYPE_FORCE_U32: sg_image_type = 2147483647;
pub type sg_image_type = ::std::os::raw::c_int;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_DEFAULT: sg_image_sample_type = 0;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_FLOAT: sg_image_sample_type = 1;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_DEPTH: sg_image_sample_type = 2;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_SINT: sg_image_sample_type = 3;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UINT: sg_image_sample_type = 4;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT: sg_image_sample_type = 5;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_NUM: sg_image_sample_type = 6;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_FORCE_U32: sg_image_sample_type = 2147483647;
pub type sg_image_sample_type = ::std::os::raw::c_int;
pub const sg_sampler_type__SG_SAMPLERTYPE_DEFAULT: sg_sampler_type = 0;
pub const sg_sampler_type_SG_SAMPLERTYPE_FILTERING: sg_sampler_type = 1;
pub const sg_sampler_type_SG_SAMPLERTYPE_NONFILTERING: sg_sampler_type = 2;
pub const sg_sampler_type_SG_SAMPLERTYPE_COMPARISON: sg_sampler_type = 3;
pub const sg_sampler_type__SG_SAMPLERTYPE_NUM: sg_sampler_type = 4;
pub const sg_sampler_type__SG_SAMPLERTYPE_FORCE_U32: sg_sampler_type = 5;
pub type sg_sampler_type = ::std::os::raw::c_int;
pub const sg_cube_face_SG_CUBEFACE_POS_X: sg_cube_face = 0;
pub const sg_cube_face_SG_CUBEFACE_NEG_X: sg_cube_face = 1;
pub const sg_cube_face_SG_CUBEFACE_POS_Y: sg_cube_face = 2;
pub const sg_cube_face_SG_CUBEFACE_NEG_Y: sg_cube_face = 3;
pub const sg_cube_face_SG_CUBEFACE_POS_Z: sg_cube_face = 4;
pub const sg_cube_face_SG_CUBEFACE_NEG_Z: sg_cube_face = 5;
pub const sg_cube_face_SG_CUBEFACE_NUM: sg_cube_face = 6;
pub const sg_cube_face__SG_CUBEFACE_FORCE_U32: sg_cube_face = 2147483647;
pub type sg_cube_face = ::std::os::raw::c_int;
pub const sg_shader_stage_SG_SHADERSTAGE_VS: sg_shader_stage = 0;
pub const sg_shader_stage_SG_SHADERSTAGE_FS: sg_shader_stage = 1;
pub const sg_shader_stage__SG_SHADERSTAGE_FORCE_U32: sg_shader_stage = 2147483647;
pub type sg_shader_stage = ::std::os::raw::c_int;
pub const sg_primitive_type__SG_PRIMITIVETYPE_DEFAULT: sg_primitive_type = 0;
pub const sg_primitive_type_SG_PRIMITIVETYPE_POINTS: sg_primitive_type = 1;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINES: sg_primitive_type = 2;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINE_STRIP: sg_primitive_type = 3;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLES: sg_primitive_type = 4;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLE_STRIP: sg_primitive_type = 5;
pub const sg_primitive_type__SG_PRIMITIVETYPE_NUM: sg_primitive_type = 6;
pub const sg_primitive_type__SG_PRIMITIVETYPE_FORCE_U32: sg_primitive_type = 2147483647;
pub type sg_primitive_type = ::std::os::raw::c_int;
pub const sg_filter__SG_FILTER_DEFAULT: sg_filter = 0;
pub const sg_filter_SG_FILTER_NONE: sg_filter = 1;
pub const sg_filter_SG_FILTER_NEAREST: sg_filter = 2;
pub const sg_filter_SG_FILTER_LINEAR: sg_filter = 3;
pub const sg_filter__SG_FILTER_NUM: sg_filter = 4;
pub const sg_filter__SG_FILTER_FORCE_U32: sg_filter = 2147483647;
pub type sg_filter = ::std::os::raw::c_int;
pub const sg_wrap__SG_WRAP_DEFAULT: sg_wrap = 0;
pub const sg_wrap_SG_WRAP_REPEAT: sg_wrap = 1;
pub const sg_wrap_SG_WRAP_CLAMP_TO_EDGE: sg_wrap = 2;
pub const sg_wrap_SG_WRAP_CLAMP_TO_BORDER: sg_wrap = 3;
pub const sg_wrap_SG_WRAP_MIRRORED_REPEAT: sg_wrap = 4;
pub const sg_wrap__SG_WRAP_NUM: sg_wrap = 5;
pub const sg_wrap__SG_WRAP_FORCE_U32: sg_wrap = 2147483647;
pub type sg_wrap = ::std::os::raw::c_int;
pub const sg_border_color__SG_BORDERCOLOR_DEFAULT: sg_border_color = 0;
pub const sg_border_color_SG_BORDERCOLOR_TRANSPARENT_BLACK: sg_border_color = 1;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_BLACK: sg_border_color = 2;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_WHITE: sg_border_color = 3;
pub const sg_border_color__SG_BORDERCOLOR_NUM: sg_border_color = 4;
pub const sg_border_color__SG_BORDERCOLOR_FORCE_U32: sg_border_color = 2147483647;
pub type sg_border_color = ::std::os::raw::c_int;
pub const sg_vertex_format_SG_VERTEXFORMAT_INVALID: sg_vertex_format = 0;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT: sg_vertex_format = 1;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT2: sg_vertex_format = 2;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT3: sg_vertex_format = 3;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT4: sg_vertex_format = 4;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4: sg_vertex_format = 5;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4N: sg_vertex_format = 6;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4: sg_vertex_format = 7;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4N: sg_vertex_format = 8;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2: sg_vertex_format = 9;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2N: sg_vertex_format = 10;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT2N: sg_vertex_format = 11;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4: sg_vertex_format = 12;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4N: sg_vertex_format = 13;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT4N: sg_vertex_format = 14;
pub const sg_vertex_format_SG_VERTEXFORMAT_UINT10_N2: sg_vertex_format = 15;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF2: sg_vertex_format = 16;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF4: sg_vertex_format = 17;
pub const sg_vertex_format__SG_VERTEXFORMAT_NUM: sg_vertex_format = 18;
pub const sg_vertex_format__SG_VERTEXFORMAT_FORCE_U32: sg_vertex_format = 2147483647;
pub type sg_vertex_format = ::std::os::raw::c_int;
pub const sg_vertex_step__SG_VERTEXSTEP_DEFAULT: sg_vertex_step = 0;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_VERTEX: sg_vertex_step = 1;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_INSTANCE: sg_vertex_step = 2;
pub const sg_vertex_step__SG_VERTEXSTEP_NUM: sg_vertex_step = 3;
pub const sg_vertex_step__SG_VERTEXSTEP_FORCE_U32: sg_vertex_step = 2147483647;
pub type sg_vertex_step = ::std::os::raw::c_int;
pub const sg_uniform_type_SG_UNIFORMTYPE_INVALID: sg_uniform_type = 0;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT: sg_uniform_type = 1;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT2: sg_uniform_type = 2;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT3: sg_uniform_type = 3;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT4: sg_uniform_type = 4;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT: sg_uniform_type = 5;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT2: sg_uniform_type = 6;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT3: sg_uniform_type = 7;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT4: sg_uniform_type = 8;
pub const sg_uniform_type_SG_UNIFORMTYPE_MAT4: sg_uniform_type = 9;
pub const sg_uniform_type__SG_UNIFORMTYPE_NUM: sg_uniform_type = 10;
pub const sg_uniform_type__SG_UNIFORMTYPE_FORCE_U32: sg_uniform_type = 2147483647;
pub type sg_uniform_type = ::std::os::raw::c_int;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_DEFAULT: sg_uniform_layout = 0;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_NATIVE: sg_uniform_layout = 1;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_STD140: sg_uniform_layout = 2;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_NUM: sg_uniform_layout = 3;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_FORCE_U32: sg_uniform_layout = 2147483647;
pub type sg_uniform_layout = ::std::os::raw::c_int;
pub const sg_cull_mode__SG_CULLMODE_DEFAULT: sg_cull_mode = 0;
pub const sg_cull_mode_SG_CULLMODE_NONE: sg_cull_mode = 1;
pub const sg_cull_mode_SG_CULLMODE_FRONT: sg_cull_mode = 2;
pub const sg_cull_mode_SG_CULLMODE_BACK: sg_cull_mode = 3;
pub const sg_cull_mode__SG_CULLMODE_NUM: sg_cull_mode = 4;
pub const sg_cull_mode__SG_CULLMODE_FORCE_U32: sg_cull_mode = 2147483647;
pub type sg_cull_mode = ::std::os::raw::c_int;
pub const sg_face_winding__SG_FACEWINDING_DEFAULT: sg_face_winding = 0;
pub const sg_face_winding_SG_FACEWINDING_CCW: sg_face_winding = 1;
pub const sg_face_winding_SG_FACEWINDING_CW: sg_face_winding = 2;
pub const sg_face_winding__SG_FACEWINDING_NUM: sg_face_winding = 3;
pub const sg_face_winding__SG_FACEWINDING_FORCE_U32: sg_face_winding = 2147483647;
pub type sg_face_winding = ::std::os::raw::c_int;
pub const sg_compare_func__SG_COMPAREFUNC_DEFAULT: sg_compare_func = 0;
pub const sg_compare_func_SG_COMPAREFUNC_NEVER: sg_compare_func = 1;
pub const sg_compare_func_SG_COMPAREFUNC_LESS: sg_compare_func = 2;
pub const sg_compare_func_SG_COMPAREFUNC_EQUAL: sg_compare_func = 3;
pub const sg_compare_func_SG_COMPAREFUNC_LESS_EQUAL: sg_compare_func = 4;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER: sg_compare_func = 5;
pub const sg_compare_func_SG_COMPAREFUNC_NOT_EQUAL: sg_compare_func = 6;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER_EQUAL: sg_compare_func = 7;
pub const sg_compare_func_SG_COMPAREFUNC_ALWAYS: sg_compare_func = 8;
pub const sg_compare_func__SG_COMPAREFUNC_NUM: sg_compare_func = 9;
pub const sg_compare_func__SG_COMPAREFUNC_FORCE_U32: sg_compare_func = 2147483647;
pub type sg_compare_func = ::std::os::raw::c_int;
pub const sg_stencil_op__SG_STENCILOP_DEFAULT: sg_stencil_op = 0;
pub const sg_stencil_op_SG_STENCILOP_KEEP: sg_stencil_op = 1;
pub const sg_stencil_op_SG_STENCILOP_ZERO: sg_stencil_op = 2;
pub const sg_stencil_op_SG_STENCILOP_REPLACE: sg_stencil_op = 3;
pub const sg_stencil_op_SG_STENCILOP_INCR_CLAMP: sg_stencil_op = 4;
pub const sg_stencil_op_SG_STENCILOP_DECR_CLAMP: sg_stencil_op = 5;
pub const sg_stencil_op_SG_STENCILOP_INVERT: sg_stencil_op = 6;
pub const sg_stencil_op_SG_STENCILOP_INCR_WRAP: sg_stencil_op = 7;
pub const sg_stencil_op_SG_STENCILOP_DECR_WRAP: sg_stencil_op = 8;
pub const sg_stencil_op__SG_STENCILOP_NUM: sg_stencil_op = 9;
pub const sg_stencil_op__SG_STENCILOP_FORCE_U32: sg_stencil_op = 2147483647;
pub type sg_stencil_op = ::std::os::raw::c_int;
pub const sg_blend_factor__SG_BLENDFACTOR_DEFAULT: sg_blend_factor = 0;
pub const sg_blend_factor_SG_BLENDFACTOR_ZERO: sg_blend_factor = 1;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE: sg_blend_factor = 2;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_COLOR: sg_blend_factor = 3;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR: sg_blend_factor = 4;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA: sg_blend_factor = 5;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: sg_blend_factor = 6;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_COLOR: sg_blend_factor = 7;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_COLOR: sg_blend_factor = 8;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_ALPHA: sg_blend_factor = 9;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA: sg_blend_factor = 10;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA_SATURATED: sg_blend_factor = 11;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_COLOR: sg_blend_factor = 12;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR: sg_blend_factor = 13;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_ALPHA: sg_blend_factor = 14;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA: sg_blend_factor = 15;
pub const sg_blend_factor__SG_BLENDFACTOR_NUM: sg_blend_factor = 16;
pub const sg_blend_factor__SG_BLENDFACTOR_FORCE_U32: sg_blend_factor = 2147483647;
pub type sg_blend_factor = ::std::os::raw::c_int;
pub const sg_blend_op__SG_BLENDOP_DEFAULT: sg_blend_op = 0;
pub const sg_blend_op_SG_BLENDOP_ADD: sg_blend_op = 1;
pub const sg_blend_op_SG_BLENDOP_SUBTRACT: sg_blend_op = 2;
pub const sg_blend_op_SG_BLENDOP_REVERSE_SUBTRACT: sg_blend_op = 3;
pub const sg_blend_op__SG_BLENDOP_NUM: sg_blend_op = 4;
pub const sg_blend_op__SG_BLENDOP_FORCE_U32: sg_blend_op = 2147483647;
pub type sg_blend_op = ::std::os::raw::c_int;
pub const sg_color_mask__SG_COLORMASK_DEFAULT: sg_color_mask = 0;
pub const sg_color_mask_SG_COLORMASK_NONE: sg_color_mask = 16;
pub const sg_color_mask_SG_COLORMASK_R: sg_color_mask = 1;
pub const sg_color_mask_SG_COLORMASK_G: sg_color_mask = 2;
pub const sg_color_mask_SG_COLORMASK_RG: sg_color_mask = 3;
pub const sg_color_mask_SG_COLORMASK_B: sg_color_mask = 4;
pub const sg_color_mask_SG_COLORMASK_RB: sg_color_mask = 5;
pub const sg_color_mask_SG_COLORMASK_GB: sg_color_mask = 6;
pub const sg_color_mask_SG_COLORMASK_RGB: sg_color_mask = 7;
pub const sg_color_mask_SG_COLORMASK_A: sg_color_mask = 8;
pub const sg_color_mask_SG_COLORMASK_RA: sg_color_mask = 9;
pub const sg_color_mask_SG_COLORMASK_GA: sg_color_mask = 10;
pub const sg_color_mask_SG_COLORMASK_RGA: sg_color_mask = 11;
pub const sg_color_mask_SG_COLORMASK_BA: sg_color_mask = 12;
pub const sg_color_mask_SG_COLORMASK_RBA: sg_color_mask = 13;
pub const sg_color_mask_SG_COLORMASK_GBA: sg_color_mask = 14;
pub const sg_color_mask_SG_COLORMASK_RGBA: sg_color_mask = 15;
pub const sg_color_mask__SG_COLORMASK_FORCE_U32: sg_color_mask = 2147483647;
pub type sg_color_mask = ::std::os::raw::c_int;
pub const sg_load_action__SG_LOADACTION_DEFAULT: sg_load_action = 0;
pub const sg_load_action_SG_LOADACTION_CLEAR: sg_load_action = 1;
pub const sg_load_action_SG_LOADACTION_LOAD: sg_load_action = 2;
pub const sg_load_action_SG_LOADACTION_DONTCARE: sg_load_action = 3;
pub const sg_load_action__SG_LOADACTION_FORCE_U32: sg_load_action = 2147483647;
pub type sg_load_action = ::std::os::raw::c_int;
pub const sg_store_action__SG_STOREACTION_DEFAULT: sg_store_action = 0;
pub const sg_store_action_SG_STOREACTION_STORE: sg_store_action = 1;
pub const sg_store_action_SG_STOREACTION_DONTCARE: sg_store_action = 2;
pub const sg_store_action__SG_STOREACTION_FORCE_U32: sg_store_action = 2147483647;
pub type sg_store_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: sg_color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_attachment_action"]
        [::std::mem::size_of::<sg_color_attachment_action>() - 24usize];
    ["Alignment of sg_color_attachment_action"]
        [::std::mem::align_of::<sg_color_attachment_action>() - 4usize];
    ["Offset of field: sg_color_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_color_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_color_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_color_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_attachment_action"]
        [::std::mem::size_of::<sg_depth_attachment_action>() - 12usize];
    ["Alignment of sg_depth_attachment_action"]
        [::std::mem::align_of::<sg_depth_attachment_action>() - 4usize];
    ["Offset of field: sg_depth_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_depth_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_depth_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_depth_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_attachment_action"]
        [::std::mem::size_of::<sg_stencil_attachment_action>() - 12usize];
    ["Alignment of sg_stencil_attachment_action"]
        [::std::mem::align_of::<sg_stencil_attachment_action>() - 4usize];
    ["Offset of field: sg_stencil_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_stencil_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_stencil_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_action {
    pub colors: [sg_color_attachment_action; 4usize],
    pub depth: sg_depth_attachment_action,
    pub stencil: sg_stencil_attachment_action,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass_action"][::std::mem::size_of::<sg_pass_action>() - 120usize];
    ["Alignment of sg_pass_action"][::std::mem::align_of::<sg_pass_action>() - 4usize];
    ["Offset of field: sg_pass_action::colors"]
        [::std::mem::offset_of!(sg_pass_action, colors) - 0usize];
    ["Offset of field: sg_pass_action::depth"]
        [::std::mem::offset_of!(sg_pass_action, depth) - 96usize];
    ["Offset of field: sg_pass_action::stencil"]
        [::std::mem::offset_of!(sg_pass_action, stencil) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_swapchain {
    pub current_drawable: *const ::std::os::raw::c_void,
    pub depth_stencil_texture: *const ::std::os::raw::c_void,
    pub msaa_color_texture: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_swapchain"][::std::mem::size_of::<sg_metal_swapchain>() - 12usize];
    ["Alignment of sg_metal_swapchain"][::std::mem::align_of::<sg_metal_swapchain>() - 4usize];
    ["Offset of field: sg_metal_swapchain::current_drawable"]
        [::std::mem::offset_of!(sg_metal_swapchain, current_drawable) - 0usize];
    ["Offset of field: sg_metal_swapchain::depth_stencil_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, depth_stencil_texture) - 4usize];
    ["Offset of field: sg_metal_swapchain::msaa_color_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, msaa_color_texture) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_swapchain"][::std::mem::size_of::<sg_d3d11_swapchain>() - 12usize];
    ["Alignment of sg_d3d11_swapchain"][::std::mem::align_of::<sg_d3d11_swapchain>() - 4usize];
    ["Offset of field: sg_d3d11_swapchain::render_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, render_view) - 0usize];
    ["Offset of field: sg_d3d11_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, resolve_view) - 4usize];
    ["Offset of field: sg_d3d11_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, depth_stencil_view) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_swapchain"][::std::mem::size_of::<sg_wgpu_swapchain>() - 12usize];
    ["Alignment of sg_wgpu_swapchain"][::std::mem::align_of::<sg_wgpu_swapchain>() - 4usize];
    ["Offset of field: sg_wgpu_swapchain::render_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, render_view) - 0usize];
    ["Offset of field: sg_wgpu_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, resolve_view) - 4usize];
    ["Offset of field: sg_wgpu_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, depth_stencil_view) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_swapchain {
    pub framebuffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_swapchain"][::std::mem::size_of::<sg_gl_swapchain>() - 4usize];
    ["Alignment of sg_gl_swapchain"][::std::mem::align_of::<sg_gl_swapchain>() - 4usize];
    ["Offset of field: sg_gl_swapchain::framebuffer"]
        [::std::mem::offset_of!(sg_gl_swapchain, framebuffer) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_swapchain {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub metal: sg_metal_swapchain,
    pub d3d11: sg_d3d11_swapchain,
    pub wgpu: sg_wgpu_swapchain,
    pub gl: sg_gl_swapchain,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_swapchain"][::std::mem::size_of::<sg_swapchain>() - 60usize];
    ["Alignment of sg_swapchain"][::std::mem::align_of::<sg_swapchain>() - 4usize];
    ["Offset of field: sg_swapchain::width"][::std::mem::offset_of!(sg_swapchain, width) - 0usize];
    ["Offset of field: sg_swapchain::height"]
        [::std::mem::offset_of!(sg_swapchain, height) - 4usize];
    ["Offset of field: sg_swapchain::sample_count"]
        [::std::mem::offset_of!(sg_swapchain, sample_count) - 8usize];
    ["Offset of field: sg_swapchain::color_format"]
        [::std::mem::offset_of!(sg_swapchain, color_format) - 12usize];
    ["Offset of field: sg_swapchain::depth_format"]
        [::std::mem::offset_of!(sg_swapchain, depth_format) - 16usize];
    ["Offset of field: sg_swapchain::metal"][::std::mem::offset_of!(sg_swapchain, metal) - 20usize];
    ["Offset of field: sg_swapchain::d3d11"][::std::mem::offset_of!(sg_swapchain, d3d11) - 32usize];
    ["Offset of field: sg_swapchain::wgpu"][::std::mem::offset_of!(sg_swapchain, wgpu) - 44usize];
    ["Offset of field: sg_swapchain::gl"][::std::mem::offset_of!(sg_swapchain, gl) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass {
    pub _start_canary: u32,
    pub action: sg_pass_action,
    pub attachments: sg_attachments,
    pub swapchain: sg_swapchain,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass"][::std::mem::size_of::<sg_pass>() - 196usize];
    ["Alignment of sg_pass"][::std::mem::align_of::<sg_pass>() - 4usize];
    ["Offset of field: sg_pass::_start_canary"]
        [::std::mem::offset_of!(sg_pass, _start_canary) - 0usize];
    ["Offset of field: sg_pass::action"][::std::mem::offset_of!(sg_pass, action) - 4usize];
    ["Offset of field: sg_pass::attachments"]
        [::std::mem::offset_of!(sg_pass, attachments) - 124usize];
    ["Offset of field: sg_pass::swapchain"][::std::mem::offset_of!(sg_pass, swapchain) - 128usize];
    ["Offset of field: sg_pass::label"][::std::mem::offset_of!(sg_pass, label) - 188usize];
    ["Offset of field: sg_pass::_end_canary"]
        [::std::mem::offset_of!(sg_pass, _end_canary) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stage_bindings {
    pub images: [sg_image; 12usize],
    pub samplers: [sg_sampler; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stage_bindings"][::std::mem::size_of::<sg_stage_bindings>() - 80usize];
    ["Alignment of sg_stage_bindings"][::std::mem::align_of::<sg_stage_bindings>() - 4usize];
    ["Offset of field: sg_stage_bindings::images"]
        [::std::mem::offset_of!(sg_stage_bindings, images) - 0usize];
    ["Offset of field: sg_stage_bindings::samplers"]
        [::std::mem::offset_of!(sg_stage_bindings, samplers) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_bindings {
    pub _start_canary: u32,
    pub vertex_buffers: [sg_buffer; 8usize],
    pub vertex_buffer_offsets: [::std::os::raw::c_int; 8usize],
    pub index_buffer: sg_buffer,
    pub index_buffer_offset: ::std::os::raw::c_int,
    pub vs: sg_stage_bindings,
    pub fs: sg_stage_bindings,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_bindings"][::std::mem::size_of::<sg_bindings>() - 240usize];
    ["Alignment of sg_bindings"][::std::mem::align_of::<sg_bindings>() - 4usize];
    ["Offset of field: sg_bindings::_start_canary"]
        [::std::mem::offset_of!(sg_bindings, _start_canary) - 0usize];
    ["Offset of field: sg_bindings::vertex_buffers"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffers) - 4usize];
    ["Offset of field: sg_bindings::vertex_buffer_offsets"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffer_offsets) - 36usize];
    ["Offset of field: sg_bindings::index_buffer"]
        [::std::mem::offset_of!(sg_bindings, index_buffer) - 68usize];
    ["Offset of field: sg_bindings::index_buffer_offset"]
        [::std::mem::offset_of!(sg_bindings, index_buffer_offset) - 72usize];
    ["Offset of field: sg_bindings::vs"][::std::mem::offset_of!(sg_bindings, vs) - 76usize];
    ["Offset of field: sg_bindings::fs"][::std::mem::offset_of!(sg_bindings, fs) - 156usize];
    ["Offset of field: sg_bindings::_end_canary"]
        [::std::mem::offset_of!(sg_bindings, _end_canary) - 236usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_desc {
    pub _start_canary: u32,
    pub size: usize,
    pub type_: sg_buffer_type,
    pub usage: sg_usage,
    pub data: sg_range,
    pub label: *const ::std::os::raw::c_char,
    pub gl_buffers: [u32; 2usize],
    pub mtl_buffers: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_buffer: *const ::std::os::raw::c_void,
    pub wgpu_buffer: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_desc"][::std::mem::size_of::<sg_buffer_desc>() - 56usize];
    ["Alignment of sg_buffer_desc"][::std::mem::align_of::<sg_buffer_desc>() - 4usize];
    ["Offset of field: sg_buffer_desc::_start_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _start_canary) - 0usize];
    ["Offset of field: sg_buffer_desc::size"]
        [::std::mem::offset_of!(sg_buffer_desc, size) - 4usize];
    ["Offset of field: sg_buffer_desc::type_"]
        [::std::mem::offset_of!(sg_buffer_desc, type_) - 8usize];
    ["Offset of field: sg_buffer_desc::usage"]
        [::std::mem::offset_of!(sg_buffer_desc, usage) - 12usize];
    ["Offset of field: sg_buffer_desc::data"]
        [::std::mem::offset_of!(sg_buffer_desc, data) - 16usize];
    ["Offset of field: sg_buffer_desc::label"]
        [::std::mem::offset_of!(sg_buffer_desc, label) - 24usize];
    ["Offset of field: sg_buffer_desc::gl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, gl_buffers) - 28usize];
    ["Offset of field: sg_buffer_desc::mtl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, mtl_buffers) - 36usize];
    ["Offset of field: sg_buffer_desc::d3d11_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, d3d11_buffer) - 44usize];
    ["Offset of field: sg_buffer_desc::wgpu_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, wgpu_buffer) - 48usize];
    ["Offset of field: sg_buffer_desc::_end_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _end_canary) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_data {
    pub subimage: [[sg_range; 16usize]; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_data"][::std::mem::size_of::<sg_image_data>() - 768usize];
    ["Alignment of sg_image_data"][::std::mem::align_of::<sg_image_data>() - 4usize];
    ["Offset of field: sg_image_data::subimage"]
        [::std::mem::offset_of!(sg_image_data, subimage) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_desc {
    pub _start_canary: u32,
    pub type_: sg_image_type,
    pub render_target: bool,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub num_slices: ::std::os::raw::c_int,
    pub num_mipmaps: ::std::os::raw::c_int,
    pub usage: sg_usage,
    pub pixel_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub data: sg_image_data,
    pub label: *const ::std::os::raw::c_char,
    pub gl_textures: [u32; 2usize],
    pub gl_texture_target: u32,
    pub mtl_textures: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_texture: *const ::std::os::raw::c_void,
    pub d3d11_shader_resource_view: *const ::std::os::raw::c_void,
    pub wgpu_texture: *const ::std::os::raw::c_void,
    pub wgpu_texture_view: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_desc"][::std::mem::size_of::<sg_image_desc>() - 852usize];
    ["Alignment of sg_image_desc"][::std::mem::align_of::<sg_image_desc>() - 4usize];
    ["Offset of field: sg_image_desc::_start_canary"]
        [::std::mem::offset_of!(sg_image_desc, _start_canary) - 0usize];
    ["Offset of field: sg_image_desc::type_"]
        [::std::mem::offset_of!(sg_image_desc, type_) - 4usize];
    ["Offset of field: sg_image_desc::render_target"]
        [::std::mem::offset_of!(sg_image_desc, render_target) - 8usize];
    ["Offset of field: sg_image_desc::width"]
        [::std::mem::offset_of!(sg_image_desc, width) - 12usize];
    ["Offset of field: sg_image_desc::height"]
        [::std::mem::offset_of!(sg_image_desc, height) - 16usize];
    ["Offset of field: sg_image_desc::num_slices"]
        [::std::mem::offset_of!(sg_image_desc, num_slices) - 20usize];
    ["Offset of field: sg_image_desc::num_mipmaps"]
        [::std::mem::offset_of!(sg_image_desc, num_mipmaps) - 24usize];
    ["Offset of field: sg_image_desc::usage"]
        [::std::mem::offset_of!(sg_image_desc, usage) - 28usize];
    ["Offset of field: sg_image_desc::pixel_format"]
        [::std::mem::offset_of!(sg_image_desc, pixel_format) - 32usize];
    ["Offset of field: sg_image_desc::sample_count"]
        [::std::mem::offset_of!(sg_image_desc, sample_count) - 36usize];
    ["Offset of field: sg_image_desc::data"][::std::mem::offset_of!(sg_image_desc, data) - 40usize];
    ["Offset of field: sg_image_desc::label"]
        [::std::mem::offset_of!(sg_image_desc, label) - 808usize];
    ["Offset of field: sg_image_desc::gl_textures"]
        [::std::mem::offset_of!(sg_image_desc, gl_textures) - 812usize];
    ["Offset of field: sg_image_desc::gl_texture_target"]
        [::std::mem::offset_of!(sg_image_desc, gl_texture_target) - 820usize];
    ["Offset of field: sg_image_desc::mtl_textures"]
        [::std::mem::offset_of!(sg_image_desc, mtl_textures) - 824usize];
    ["Offset of field: sg_image_desc::d3d11_texture"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_texture) - 832usize];
    ["Offset of field: sg_image_desc::d3d11_shader_resource_view"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_shader_resource_view) - 836usize];
    ["Offset of field: sg_image_desc::wgpu_texture"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture) - 840usize];
    ["Offset of field: sg_image_desc::wgpu_texture_view"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture_view) - 844usize];
    ["Offset of field: sg_image_desc::_end_canary"]
        [::std::mem::offset_of!(sg_image_desc, _end_canary) - 848usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_desc {
    pub _start_canary: u32,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub wrap_w: sg_wrap,
    pub min_lod: f32,
    pub max_lod: f32,
    pub border_color: sg_border_color,
    pub compare: sg_compare_func,
    pub max_anisotropy: u32,
    pub label: *const ::std::os::raw::c_char,
    pub gl_sampler: u32,
    pub mtl_sampler: *const ::std::os::raw::c_void,
    pub d3d11_sampler: *const ::std::os::raw::c_void,
    pub wgpu_sampler: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_desc"][::std::mem::size_of::<sg_sampler_desc>() - 72usize];
    ["Alignment of sg_sampler_desc"][::std::mem::align_of::<sg_sampler_desc>() - 4usize];
    ["Offset of field: sg_sampler_desc::_start_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _start_canary) - 0usize];
    ["Offset of field: sg_sampler_desc::min_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, min_filter) - 4usize];
    ["Offset of field: sg_sampler_desc::mag_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mag_filter) - 8usize];
    ["Offset of field: sg_sampler_desc::mipmap_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mipmap_filter) - 12usize];
    ["Offset of field: sg_sampler_desc::wrap_u"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_u) - 16usize];
    ["Offset of field: sg_sampler_desc::wrap_v"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_v) - 20usize];
    ["Offset of field: sg_sampler_desc::wrap_w"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_w) - 24usize];
    ["Offset of field: sg_sampler_desc::min_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, min_lod) - 28usize];
    ["Offset of field: sg_sampler_desc::max_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, max_lod) - 32usize];
    ["Offset of field: sg_sampler_desc::border_color"]
        [::std::mem::offset_of!(sg_sampler_desc, border_color) - 36usize];
    ["Offset of field: sg_sampler_desc::compare"]
        [::std::mem::offset_of!(sg_sampler_desc, compare) - 40usize];
    ["Offset of field: sg_sampler_desc::max_anisotropy"]
        [::std::mem::offset_of!(sg_sampler_desc, max_anisotropy) - 44usize];
    ["Offset of field: sg_sampler_desc::label"]
        [::std::mem::offset_of!(sg_sampler_desc, label) - 48usize];
    ["Offset of field: sg_sampler_desc::gl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, gl_sampler) - 52usize];
    ["Offset of field: sg_sampler_desc::mtl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, mtl_sampler) - 56usize];
    ["Offset of field: sg_sampler_desc::d3d11_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, d3d11_sampler) - 60usize];
    ["Offset of field: sg_sampler_desc::wgpu_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, wgpu_sampler) - 64usize];
    ["Offset of field: sg_sampler_desc::_end_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _end_canary) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_attr_desc {
    pub name: *const ::std::os::raw::c_char,
    pub sem_name: *const ::std::os::raw::c_char,
    pub sem_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_attr_desc"][::std::mem::size_of::<sg_shader_attr_desc>() - 12usize];
    ["Alignment of sg_shader_attr_desc"][::std::mem::align_of::<sg_shader_attr_desc>() - 4usize];
    ["Offset of field: sg_shader_attr_desc::name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, name) - 0usize];
    ["Offset of field: sg_shader_attr_desc::sem_name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_name) - 4usize];
    ["Offset of field: sg_shader_attr_desc::sem_index"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_index) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_desc {
    pub name: *const ::std::os::raw::c_char,
    pub type_: sg_uniform_type,
    pub array_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_desc"][::std::mem::size_of::<sg_shader_uniform_desc>() - 12usize];
    ["Alignment of sg_shader_uniform_desc"]
        [::std::mem::align_of::<sg_shader_uniform_desc>() - 4usize];
    ["Offset of field: sg_shader_uniform_desc::name"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, name) - 0usize];
    ["Offset of field: sg_shader_uniform_desc::type_"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, type_) - 4usize];
    ["Offset of field: sg_shader_uniform_desc::array_count"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, array_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_block_desc {
    pub size: usize,
    pub layout: sg_uniform_layout,
    pub uniforms: [sg_shader_uniform_desc; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_block_desc"]
        [::std::mem::size_of::<sg_shader_uniform_block_desc>() - 200usize];
    ["Alignment of sg_shader_uniform_block_desc"]
        [::std::mem::align_of::<sg_shader_uniform_block_desc>() - 4usize];
    ["Offset of field: sg_shader_uniform_block_desc::size"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, size) - 0usize];
    ["Offset of field: sg_shader_uniform_block_desc::layout"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, layout) - 4usize];
    ["Offset of field: sg_shader_uniform_block_desc::uniforms"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, uniforms) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_desc {
    pub used: bool,
    pub multisampled: bool,
    pub image_type: sg_image_type,
    pub sample_type: sg_image_sample_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_desc"][::std::mem::size_of::<sg_shader_image_desc>() - 12usize];
    ["Alignment of sg_shader_image_desc"][::std::mem::align_of::<sg_shader_image_desc>() - 4usize];
    ["Offset of field: sg_shader_image_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_desc::multisampled"]
        [::std::mem::offset_of!(sg_shader_image_desc, multisampled) - 1usize];
    ["Offset of field: sg_shader_image_desc::image_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, image_type) - 4usize];
    ["Offset of field: sg_shader_image_desc::sample_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, sample_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_sampler_desc {
    pub used: bool,
    pub sampler_type: sg_sampler_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_sampler_desc"][::std::mem::size_of::<sg_shader_sampler_desc>() - 8usize];
    ["Alignment of sg_shader_sampler_desc"]
        [::std::mem::align_of::<sg_shader_sampler_desc>() - 4usize];
    ["Offset of field: sg_shader_sampler_desc::used"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, used) - 0usize];
    ["Offset of field: sg_shader_sampler_desc::sampler_type"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, sampler_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_sampler_pair_desc {
    pub used: bool,
    pub image_slot: ::std::os::raw::c_int,
    pub sampler_slot: ::std::os::raw::c_int,
    pub glsl_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_sampler_pair_desc"]
        [::std::mem::size_of::<sg_shader_image_sampler_pair_desc>() - 16usize];
    ["Alignment of sg_shader_image_sampler_pair_desc"]
        [::std::mem::align_of::<sg_shader_image_sampler_pair_desc>() - 4usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::image_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, image_slot) - 4usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::sampler_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, sampler_slot) - 8usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::glsl_name"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, glsl_name) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_stage_desc {
    pub source: *const ::std::os::raw::c_char,
    pub bytecode: sg_range,
    pub entry: *const ::std::os::raw::c_char,
    pub d3d11_target: *const ::std::os::raw::c_char,
    pub uniform_blocks: [sg_shader_uniform_block_desc; 4usize],
    pub images: [sg_shader_image_desc; 12usize],
    pub samplers: [sg_shader_sampler_desc; 8usize],
    pub image_sampler_pairs: [sg_shader_image_sampler_pair_desc; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_stage_desc"][::std::mem::size_of::<sg_shader_stage_desc>() - 1220usize];
    ["Alignment of sg_shader_stage_desc"][::std::mem::align_of::<sg_shader_stage_desc>() - 4usize];
    ["Offset of field: sg_shader_stage_desc::source"]
        [::std::mem::offset_of!(sg_shader_stage_desc, source) - 0usize];
    ["Offset of field: sg_shader_stage_desc::bytecode"]
        [::std::mem::offset_of!(sg_shader_stage_desc, bytecode) - 4usize];
    ["Offset of field: sg_shader_stage_desc::entry"]
        [::std::mem::offset_of!(sg_shader_stage_desc, entry) - 12usize];
    ["Offset of field: sg_shader_stage_desc::d3d11_target"]
        [::std::mem::offset_of!(sg_shader_stage_desc, d3d11_target) - 16usize];
    ["Offset of field: sg_shader_stage_desc::uniform_blocks"]
        [::std::mem::offset_of!(sg_shader_stage_desc, uniform_blocks) - 20usize];
    ["Offset of field: sg_shader_stage_desc::images"]
        [::std::mem::offset_of!(sg_shader_stage_desc, images) - 820usize];
    ["Offset of field: sg_shader_stage_desc::samplers"]
        [::std::mem::offset_of!(sg_shader_stage_desc, samplers) - 964usize];
    ["Offset of field: sg_shader_stage_desc::image_sampler_pairs"]
        [::std::mem::offset_of!(sg_shader_stage_desc, image_sampler_pairs) - 1028usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_desc {
    pub _start_canary: u32,
    pub attrs: [sg_shader_attr_desc; 16usize],
    pub vs: sg_shader_stage_desc,
    pub fs: sg_shader_stage_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_desc"][::std::mem::size_of::<sg_shader_desc>() - 2644usize];
    ["Alignment of sg_shader_desc"][::std::mem::align_of::<sg_shader_desc>() - 4usize];
    ["Offset of field: sg_shader_desc::_start_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _start_canary) - 0usize];
    ["Offset of field: sg_shader_desc::attrs"]
        [::std::mem::offset_of!(sg_shader_desc, attrs) - 4usize];
    ["Offset of field: sg_shader_desc::vs"][::std::mem::offset_of!(sg_shader_desc, vs) - 196usize];
    ["Offset of field: sg_shader_desc::fs"][::std::mem::offset_of!(sg_shader_desc, fs) - 1416usize];
    ["Offset of field: sg_shader_desc::label"]
        [::std::mem::offset_of!(sg_shader_desc, label) - 2636usize];
    ["Offset of field: sg_shader_desc::_end_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _end_canary) - 2640usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_buffer_layout_state {
    pub stride: ::std::os::raw::c_int,
    pub step_func: sg_vertex_step,
    pub step_rate: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_buffer_layout_state"]
        [::std::mem::size_of::<sg_vertex_buffer_layout_state>() - 12usize];
    ["Alignment of sg_vertex_buffer_layout_state"]
        [::std::mem::align_of::<sg_vertex_buffer_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::stride"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, stride) - 0usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_func"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_func) - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_rate"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_rate) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_attr_state {
    pub buffer_index: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub format: sg_vertex_format,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_attr_state"][::std::mem::size_of::<sg_vertex_attr_state>() - 12usize];
    ["Alignment of sg_vertex_attr_state"][::std::mem::align_of::<sg_vertex_attr_state>() - 4usize];
    ["Offset of field: sg_vertex_attr_state::buffer_index"]
        [::std::mem::offset_of!(sg_vertex_attr_state, buffer_index) - 0usize];
    ["Offset of field: sg_vertex_attr_state::offset"]
        [::std::mem::offset_of!(sg_vertex_attr_state, offset) - 4usize];
    ["Offset of field: sg_vertex_attr_state::format"]
        [::std::mem::offset_of!(sg_vertex_attr_state, format) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_layout_state {
    pub buffers: [sg_vertex_buffer_layout_state; 8usize],
    pub attrs: [sg_vertex_attr_state; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_layout_state"][::std::mem::size_of::<sg_vertex_layout_state>() - 288usize];
    ["Alignment of sg_vertex_layout_state"]
        [::std::mem::align_of::<sg_vertex_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_layout_state::buffers"]
        [::std::mem::offset_of!(sg_vertex_layout_state, buffers) - 0usize];
    ["Offset of field: sg_vertex_layout_state::attrs"]
        [::std::mem::offset_of!(sg_vertex_layout_state, attrs) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_face_state {
    pub compare: sg_compare_func,
    pub fail_op: sg_stencil_op,
    pub depth_fail_op: sg_stencil_op,
    pub pass_op: sg_stencil_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_face_state"][::std::mem::size_of::<sg_stencil_face_state>() - 16usize];
    ["Alignment of sg_stencil_face_state"]
        [::std::mem::align_of::<sg_stencil_face_state>() - 4usize];
    ["Offset of field: sg_stencil_face_state::compare"]
        [::std::mem::offset_of!(sg_stencil_face_state, compare) - 0usize];
    ["Offset of field: sg_stencil_face_state::fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, fail_op) - 4usize];
    ["Offset of field: sg_stencil_face_state::depth_fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, depth_fail_op) - 8usize];
    ["Offset of field: sg_stencil_face_state::pass_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, pass_op) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_state {
    pub enabled: bool,
    pub front: sg_stencil_face_state,
    pub back: sg_stencil_face_state,
    pub read_mask: u8,
    pub write_mask: u8,
    pub ref_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_state"][::std::mem::size_of::<sg_stencil_state>() - 40usize];
    ["Alignment of sg_stencil_state"][::std::mem::align_of::<sg_stencil_state>() - 4usize];
    ["Offset of field: sg_stencil_state::enabled"]
        [::std::mem::offset_of!(sg_stencil_state, enabled) - 0usize];
    ["Offset of field: sg_stencil_state::front"]
        [::std::mem::offset_of!(sg_stencil_state, front) - 4usize];
    ["Offset of field: sg_stencil_state::back"]
        [::std::mem::offset_of!(sg_stencil_state, back) - 20usize];
    ["Offset of field: sg_stencil_state::read_mask"]
        [::std::mem::offset_of!(sg_stencil_state, read_mask) - 36usize];
    ["Offset of field: sg_stencil_state::write_mask"]
        [::std::mem::offset_of!(sg_stencil_state, write_mask) - 37usize];
    ["Offset of field: sg_stencil_state::ref_"]
        [::std::mem::offset_of!(sg_stencil_state, ref_) - 38usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_state {
    pub pixel_format: sg_pixel_format,
    pub compare: sg_compare_func,
    pub write_enabled: bool,
    pub bias: f32,
    pub bias_slope_scale: f32,
    pub bias_clamp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_state"][::std::mem::size_of::<sg_depth_state>() - 24usize];
    ["Alignment of sg_depth_state"][::std::mem::align_of::<sg_depth_state>() - 4usize];
    ["Offset of field: sg_depth_state::pixel_format"]
        [::std::mem::offset_of!(sg_depth_state, pixel_format) - 0usize];
    ["Offset of field: sg_depth_state::compare"]
        [::std::mem::offset_of!(sg_depth_state, compare) - 4usize];
    ["Offset of field: sg_depth_state::write_enabled"]
        [::std::mem::offset_of!(sg_depth_state, write_enabled) - 8usize];
    ["Offset of field: sg_depth_state::bias"]
        [::std::mem::offset_of!(sg_depth_state, bias) - 12usize];
    ["Offset of field: sg_depth_state::bias_slope_scale"]
        [::std::mem::offset_of!(sg_depth_state, bias_slope_scale) - 16usize];
    ["Offset of field: sg_depth_state::bias_clamp"]
        [::std::mem::offset_of!(sg_depth_state, bias_clamp) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_blend_state {
    pub enabled: bool,
    pub src_factor_rgb: sg_blend_factor,
    pub dst_factor_rgb: sg_blend_factor,
    pub op_rgb: sg_blend_op,
    pub src_factor_alpha: sg_blend_factor,
    pub dst_factor_alpha: sg_blend_factor,
    pub op_alpha: sg_blend_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_blend_state"][::std::mem::size_of::<sg_blend_state>() - 28usize];
    ["Alignment of sg_blend_state"][::std::mem::align_of::<sg_blend_state>() - 4usize];
    ["Offset of field: sg_blend_state::enabled"]
        [::std::mem::offset_of!(sg_blend_state, enabled) - 0usize];
    ["Offset of field: sg_blend_state::src_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_rgb) - 4usize];
    ["Offset of field: sg_blend_state::dst_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_rgb) - 8usize];
    ["Offset of field: sg_blend_state::op_rgb"]
        [::std::mem::offset_of!(sg_blend_state, op_rgb) - 12usize];
    ["Offset of field: sg_blend_state::src_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_alpha) - 16usize];
    ["Offset of field: sg_blend_state::dst_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_alpha) - 20usize];
    ["Offset of field: sg_blend_state::op_alpha"]
        [::std::mem::offset_of!(sg_blend_state, op_alpha) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_target_state {
    pub pixel_format: sg_pixel_format,
    pub write_mask: sg_color_mask,
    pub blend: sg_blend_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_target_state"][::std::mem::size_of::<sg_color_target_state>() - 36usize];
    ["Alignment of sg_color_target_state"]
        [::std::mem::align_of::<sg_color_target_state>() - 4usize];
    ["Offset of field: sg_color_target_state::pixel_format"]
        [::std::mem::offset_of!(sg_color_target_state, pixel_format) - 0usize];
    ["Offset of field: sg_color_target_state::write_mask"]
        [::std::mem::offset_of!(sg_color_target_state, write_mask) - 4usize];
    ["Offset of field: sg_color_target_state::blend"]
        [::std::mem::offset_of!(sg_color_target_state, blend) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_desc {
    pub _start_canary: u32,
    pub shader: sg_shader,
    pub layout: sg_vertex_layout_state,
    pub depth: sg_depth_state,
    pub stencil: sg_stencil_state,
    pub color_count: ::std::os::raw::c_int,
    pub colors: [sg_color_target_state; 4usize],
    pub primitive_type: sg_primitive_type,
    pub index_type: sg_index_type,
    pub cull_mode: sg_cull_mode,
    pub face_winding: sg_face_winding,
    pub sample_count: ::std::os::raw::c_int,
    pub blend_color: sg_color,
    pub alpha_to_coverage_enabled: bool,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_desc"][::std::mem::size_of::<sg_pipeline_desc>() - 556usize];
    ["Alignment of sg_pipeline_desc"][::std::mem::align_of::<sg_pipeline_desc>() - 4usize];
    ["Offset of field: sg_pipeline_desc::_start_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _start_canary) - 0usize];
    ["Offset of field: sg_pipeline_desc::shader"]
        [::std::mem::offset_of!(sg_pipeline_desc, shader) - 4usize];
    ["Offset of field: sg_pipeline_desc::layout"]
        [::std::mem::offset_of!(sg_pipeline_desc, layout) - 8usize];
    ["Offset of field: sg_pipeline_desc::depth"]
        [::std::mem::offset_of!(sg_pipeline_desc, depth) - 296usize];
    ["Offset of field: sg_pipeline_desc::stencil"]
        [::std::mem::offset_of!(sg_pipeline_desc, stencil) - 320usize];
    ["Offset of field: sg_pipeline_desc::color_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, color_count) - 360usize];
    ["Offset of field: sg_pipeline_desc::colors"]
        [::std::mem::offset_of!(sg_pipeline_desc, colors) - 364usize];
    ["Offset of field: sg_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, primitive_type) - 508usize];
    ["Offset of field: sg_pipeline_desc::index_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, index_type) - 512usize];
    ["Offset of field: sg_pipeline_desc::cull_mode"]
        [::std::mem::offset_of!(sg_pipeline_desc, cull_mode) - 516usize];
    ["Offset of field: sg_pipeline_desc::face_winding"]
        [::std::mem::offset_of!(sg_pipeline_desc, face_winding) - 520usize];
    ["Offset of field: sg_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, sample_count) - 524usize];
    ["Offset of field: sg_pipeline_desc::blend_color"]
        [::std::mem::offset_of!(sg_pipeline_desc, blend_color) - 528usize];
    ["Offset of field: sg_pipeline_desc::alpha_to_coverage_enabled"]
        [::std::mem::offset_of!(sg_pipeline_desc, alpha_to_coverage_enabled) - 544usize];
    ["Offset of field: sg_pipeline_desc::label"]
        [::std::mem::offset_of!(sg_pipeline_desc, label) - 548usize];
    ["Offset of field: sg_pipeline_desc::_end_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _end_canary) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachment_desc {
    pub image: sg_image,
    pub mip_level: ::std::os::raw::c_int,
    pub slice: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachment_desc"][::std::mem::size_of::<sg_attachment_desc>() - 12usize];
    ["Alignment of sg_attachment_desc"][::std::mem::align_of::<sg_attachment_desc>() - 4usize];
    ["Offset of field: sg_attachment_desc::image"]
        [::std::mem::offset_of!(sg_attachment_desc, image) - 0usize];
    ["Offset of field: sg_attachment_desc::mip_level"]
        [::std::mem::offset_of!(sg_attachment_desc, mip_level) - 4usize];
    ["Offset of field: sg_attachment_desc::slice"]
        [::std::mem::offset_of!(sg_attachment_desc, slice) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_desc {
    pub _start_canary: u32,
    pub colors: [sg_attachment_desc; 4usize],
    pub resolves: [sg_attachment_desc; 4usize],
    pub depth_stencil: sg_attachment_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_desc"][::std::mem::size_of::<sg_attachments_desc>() - 120usize];
    ["Alignment of sg_attachments_desc"][::std::mem::align_of::<sg_attachments_desc>() - 4usize];
    ["Offset of field: sg_attachments_desc::_start_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _start_canary) - 0usize];
    ["Offset of field: sg_attachments_desc::colors"]
        [::std::mem::offset_of!(sg_attachments_desc, colors) - 4usize];
    ["Offset of field: sg_attachments_desc::resolves"]
        [::std::mem::offset_of!(sg_attachments_desc, resolves) - 52usize];
    ["Offset of field: sg_attachments_desc::depth_stencil"]
        [::std::mem::offset_of!(sg_attachments_desc, depth_stencil) - 100usize];
    ["Offset of field: sg_attachments_desc::label"]
        [::std::mem::offset_of!(sg_attachments_desc, label) - 112usize];
    ["Offset of field: sg_attachments_desc::_end_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _end_canary) - 116usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_trace_hooks {
    pub user_data: *mut ::std::os::raw::c_void,
    pub reset_state_cache:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub make_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_buffer_desc,
            result: sg_buffer,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_image: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_image_desc,
            result: sg_image,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_sampler_desc,
            result: sg_sampler,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_shader: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_shader_desc,
            result: sg_shader,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pipeline_desc,
            result: sg_pipeline,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_attachments_desc,
            result: sg_attachments,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub destroy_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_image: ::std::option::Option<
        unsafe extern "C" fn(img: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_shader: ::std::option::Option<
        unsafe extern "C" fn(shd: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub update_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub update_image: ::std::option::Option<
        unsafe extern "C" fn(
            img: sg_image,
            data: *const sg_image_data,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub append_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            result: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub begin_pass: ::std::option::Option<
        unsafe extern "C" fn(pass: *const sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_viewport: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_scissor_rect: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_bindings: ::std::option::Option<
        unsafe extern "C" fn(bindings: *const sg_bindings, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_uniforms: ::std::option::Option<
        unsafe extern "C" fn(
            stage: sg_shader_stage,
            ub_index: ::std::os::raw::c_int,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub draw: ::std::option::Option<
        unsafe extern "C" fn(
            base_element: ::std::os::raw::c_int,
            num_elements: ::std::os::raw::c_int,
            num_instances: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub end_pass:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub commit: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub alloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(result: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_image: ::std::option::Option<
        unsafe extern "C" fn(result: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(result: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_shader: ::std::option::Option<
        unsafe extern "C" fn(result: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(result: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(result: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub init_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf_id: sg_buffer,
            desc: *const sg_buffer_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_image: ::std::option::Option<
        unsafe extern "C" fn(
            img_id: sg_image,
            desc: *const sg_image_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            smp_id: sg_sampler,
            desc: *const sg_sampler_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_shader: ::std::option::Option<
        unsafe extern "C" fn(
            shd_id: sg_shader,
            desc: *const sg_shader_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            pip_id: sg_pipeline,
            desc: *const sg_pipeline_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            atts_id: sg_attachments,
            desc: *const sg_attachments_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub uninit_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub push_debug_group: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub pop_debug_group:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_trace_hooks"][::std::mem::size_of::<sg_trace_hooks>() - 232usize];
    ["Alignment of sg_trace_hooks"][::std::mem::align_of::<sg_trace_hooks>() - 4usize];
    ["Offset of field: sg_trace_hooks::user_data"]
        [::std::mem::offset_of!(sg_trace_hooks, user_data) - 0usize];
    ["Offset of field: sg_trace_hooks::reset_state_cache"]
        [::std::mem::offset_of!(sg_trace_hooks, reset_state_cache) - 4usize];
    ["Offset of field: sg_trace_hooks::make_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, make_buffer) - 8usize];
    ["Offset of field: sg_trace_hooks::make_image"]
        [::std::mem::offset_of!(sg_trace_hooks, make_image) - 12usize];
    ["Offset of field: sg_trace_hooks::make_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, make_sampler) - 16usize];
    ["Offset of field: sg_trace_hooks::make_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, make_shader) - 20usize];
    ["Offset of field: sg_trace_hooks::make_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, make_pipeline) - 24usize];
    ["Offset of field: sg_trace_hooks::make_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, make_attachments) - 28usize];
    ["Offset of field: sg_trace_hooks::destroy_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_buffer) - 32usize];
    ["Offset of field: sg_trace_hooks::destroy_image"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_image) - 36usize];
    ["Offset of field: sg_trace_hooks::destroy_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_sampler) - 40usize];
    ["Offset of field: sg_trace_hooks::destroy_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_shader) - 44usize];
    ["Offset of field: sg_trace_hooks::destroy_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_pipeline) - 48usize];
    ["Offset of field: sg_trace_hooks::destroy_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_attachments) - 52usize];
    ["Offset of field: sg_trace_hooks::update_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, update_buffer) - 56usize];
    ["Offset of field: sg_trace_hooks::update_image"]
        [::std::mem::offset_of!(sg_trace_hooks, update_image) - 60usize];
    ["Offset of field: sg_trace_hooks::append_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, append_buffer) - 64usize];
    ["Offset of field: sg_trace_hooks::begin_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, begin_pass) - 68usize];
    ["Offset of field: sg_trace_hooks::apply_viewport"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_viewport) - 72usize];
    ["Offset of field: sg_trace_hooks::apply_scissor_rect"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_scissor_rect) - 76usize];
    ["Offset of field: sg_trace_hooks::apply_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_pipeline) - 80usize];
    ["Offset of field: sg_trace_hooks::apply_bindings"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_bindings) - 84usize];
    ["Offset of field: sg_trace_hooks::apply_uniforms"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_uniforms) - 88usize];
    ["Offset of field: sg_trace_hooks::draw"]
        [::std::mem::offset_of!(sg_trace_hooks, draw) - 92usize];
    ["Offset of field: sg_trace_hooks::end_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, end_pass) - 96usize];
    ["Offset of field: sg_trace_hooks::commit"]
        [::std::mem::offset_of!(sg_trace_hooks, commit) - 100usize];
    ["Offset of field: sg_trace_hooks::alloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_buffer) - 104usize];
    ["Offset of field: sg_trace_hooks::alloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_image) - 108usize];
    ["Offset of field: sg_trace_hooks::alloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_sampler) - 112usize];
    ["Offset of field: sg_trace_hooks::alloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_shader) - 116usize];
    ["Offset of field: sg_trace_hooks::alloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_pipeline) - 120usize];
    ["Offset of field: sg_trace_hooks::alloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_attachments) - 124usize];
    ["Offset of field: sg_trace_hooks::dealloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_buffer) - 128usize];
    ["Offset of field: sg_trace_hooks::dealloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_image) - 132usize];
    ["Offset of field: sg_trace_hooks::dealloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_sampler) - 136usize];
    ["Offset of field: sg_trace_hooks::dealloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_shader) - 140usize];
    ["Offset of field: sg_trace_hooks::dealloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_pipeline) - 144usize];
    ["Offset of field: sg_trace_hooks::dealloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_attachments) - 148usize];
    ["Offset of field: sg_trace_hooks::init_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, init_buffer) - 152usize];
    ["Offset of field: sg_trace_hooks::init_image"]
        [::std::mem::offset_of!(sg_trace_hooks, init_image) - 156usize];
    ["Offset of field: sg_trace_hooks::init_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, init_sampler) - 160usize];
    ["Offset of field: sg_trace_hooks::init_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, init_shader) - 164usize];
    ["Offset of field: sg_trace_hooks::init_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, init_pipeline) - 168usize];
    ["Offset of field: sg_trace_hooks::init_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, init_attachments) - 172usize];
    ["Offset of field: sg_trace_hooks::uninit_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_buffer) - 176usize];
    ["Offset of field: sg_trace_hooks::uninit_image"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_image) - 180usize];
    ["Offset of field: sg_trace_hooks::uninit_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_sampler) - 184usize];
    ["Offset of field: sg_trace_hooks::uninit_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_shader) - 188usize];
    ["Offset of field: sg_trace_hooks::uninit_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_pipeline) - 192usize];
    ["Offset of field: sg_trace_hooks::uninit_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_attachments) - 196usize];
    ["Offset of field: sg_trace_hooks::fail_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_buffer) - 200usize];
    ["Offset of field: sg_trace_hooks::fail_image"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_image) - 204usize];
    ["Offset of field: sg_trace_hooks::fail_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_sampler) - 208usize];
    ["Offset of field: sg_trace_hooks::fail_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_shader) - 212usize];
    ["Offset of field: sg_trace_hooks::fail_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_pipeline) - 216usize];
    ["Offset of field: sg_trace_hooks::fail_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_attachments) - 220usize];
    ["Offset of field: sg_trace_hooks::push_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, push_debug_group) - 224usize];
    ["Offset of field: sg_trace_hooks::pop_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, pop_debug_group) - 228usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_slot_info {
    pub state: sg_resource_state,
    pub res_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_slot_info"][::std::mem::size_of::<sg_slot_info>() - 8usize];
    ["Alignment of sg_slot_info"][::std::mem::align_of::<sg_slot_info>() - 4usize];
    ["Offset of field: sg_slot_info::state"][::std::mem::offset_of!(sg_slot_info, state) - 0usize];
    ["Offset of field: sg_slot_info::res_id"]
        [::std::mem::offset_of!(sg_slot_info, res_id) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_info {
    pub slot: sg_slot_info,
    pub update_frame_index: u32,
    pub append_frame_index: u32,
    pub append_pos: ::std::os::raw::c_int,
    pub append_overflow: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_info"][::std::mem::size_of::<sg_buffer_info>() - 32usize];
    ["Alignment of sg_buffer_info"][::std::mem::align_of::<sg_buffer_info>() - 4usize];
    ["Offset of field: sg_buffer_info::slot"]
        [::std::mem::offset_of!(sg_buffer_info, slot) - 0usize];
    ["Offset of field: sg_buffer_info::update_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, update_frame_index) - 8usize];
    ["Offset of field: sg_buffer_info::append_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, append_frame_index) - 12usize];
    ["Offset of field: sg_buffer_info::append_pos"]
        [::std::mem::offset_of!(sg_buffer_info, append_pos) - 16usize];
    ["Offset of field: sg_buffer_info::append_overflow"]
        [::std::mem::offset_of!(sg_buffer_info, append_overflow) - 20usize];
    ["Offset of field: sg_buffer_info::num_slots"]
        [::std::mem::offset_of!(sg_buffer_info, num_slots) - 24usize];
    ["Offset of field: sg_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_buffer_info, active_slot) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_info {
    pub slot: sg_slot_info,
    pub upd_frame_index: u32,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_info"][::std::mem::size_of::<sg_image_info>() - 20usize];
    ["Alignment of sg_image_info"][::std::mem::align_of::<sg_image_info>() - 4usize];
    ["Offset of field: sg_image_info::slot"][::std::mem::offset_of!(sg_image_info, slot) - 0usize];
    ["Offset of field: sg_image_info::upd_frame_index"]
        [::std::mem::offset_of!(sg_image_info, upd_frame_index) - 8usize];
    ["Offset of field: sg_image_info::num_slots"]
        [::std::mem::offset_of!(sg_image_info, num_slots) - 12usize];
    ["Offset of field: sg_image_info::active_slot"]
        [::std::mem::offset_of!(sg_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_info"][::std::mem::size_of::<sg_sampler_info>() - 8usize];
    ["Alignment of sg_sampler_info"][::std::mem::align_of::<sg_sampler_info>() - 4usize];
    ["Offset of field: sg_sampler_info::slot"]
        [::std::mem::offset_of!(sg_sampler_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_info"][::std::mem::size_of::<sg_shader_info>() - 8usize];
    ["Alignment of sg_shader_info"][::std::mem::align_of::<sg_shader_info>() - 4usize];
    ["Offset of field: sg_shader_info::slot"]
        [::std::mem::offset_of!(sg_shader_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_info"][::std::mem::size_of::<sg_pipeline_info>() - 8usize];
    ["Alignment of sg_pipeline_info"][::std::mem::align_of::<sg_pipeline_info>() - 4usize];
    ["Offset of field: sg_pipeline_info::slot"]
        [::std::mem::offset_of!(sg_pipeline_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_info"][::std::mem::size_of::<sg_attachments_info>() - 8usize];
    ["Alignment of sg_attachments_info"][::std::mem::align_of::<sg_attachments_info>() - 4usize];
    ["Offset of field: sg_attachments_info::slot"]
        [::std::mem::offset_of!(sg_attachments_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_gl {
    pub num_bind_buffer: u32,
    pub num_active_texture: u32,
    pub num_bind_texture: u32,
    pub num_bind_sampler: u32,
    pub num_use_program: u32,
    pub num_render_state: u32,
    pub num_vertex_attrib_pointer: u32,
    pub num_vertex_attrib_divisor: u32,
    pub num_enable_vertex_attrib_array: u32,
    pub num_disable_vertex_attrib_array: u32,
    pub num_uniform: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_gl"][::std::mem::size_of::<sg_frame_stats_gl>() - 44usize];
    ["Alignment of sg_frame_stats_gl"][::std::mem::align_of::<sg_frame_stats_gl>() - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_gl::num_active_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_active_texture) - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_texture) - 8usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_sampler"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_sampler) - 12usize];
    ["Offset of field: sg_frame_stats_gl::num_use_program"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_use_program) - 16usize];
    ["Offset of field: sg_frame_stats_gl::num_render_state"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_render_state) - 20usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_pointer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_pointer) - 24usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_divisor"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_divisor) - 28usize];
    ["Offset of field: sg_frame_stats_gl::num_enable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_enable_vertex_attrib_array) - 32usize];
    ["Offset of field: sg_frame_stats_gl::num_disable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_disable_vertex_attrib_array) - 36usize];
    ["Offset of field: sg_frame_stats_gl::num_uniform"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_uniform) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pass {
    pub num_om_set_render_targets: u32,
    pub num_clear_render_target_view: u32,
    pub num_clear_depth_stencil_view: u32,
    pub num_resolve_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pass"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pass>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_pass"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pass>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_om_set_render_targets"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_om_set_render_targets) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_render_target_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_render_target_view) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_depth_stencil_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_depth_stencil_view) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_resolve_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_resolve_subresource) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pipeline {
    pub num_rs_set_state: u32,
    pub num_om_set_depth_stencil_state: u32,
    pub num_om_set_blend_state: u32,
    pub num_ia_set_primitive_topology: u32,
    pub num_ia_set_input_layout: u32,
    pub num_vs_set_shader: u32,
    pub num_vs_set_constant_buffers: u32,
    pub num_ps_set_shader: u32,
    pub num_ps_set_constant_buffers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pipeline>() - 36usize];
    ["Alignment of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_rs_set_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_rs_set_state) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_om_set_depth_stencil_state
    ) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_blend_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_om_set_blend_state) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_primitive_topology"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ia_set_primitive_topology
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_input_layout"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ia_set_input_layout) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_vs_set_shader) - 20usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_vs_set_constant_buffers
    ) - 24usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ps_set_shader) - 28usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ps_set_constant_buffers
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_bindings {
    pub num_ia_set_vertex_buffers: u32,
    pub num_ia_set_index_buffer: u32,
    pub num_vs_set_shader_resources: u32,
    pub num_ps_set_shader_resources: u32,
    pub num_vs_set_samplers: u32,
    pub num_ps_set_samplers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_bindings"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_bindings>() - 24usize];
    ["Alignment of sg_frame_stats_d3d11_bindings"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_vertex_buffers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_vertex_buffers) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_index_buffer) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_vs_set_shader_resources
    ) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_ps_set_shader_resources
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_vs_set_samplers) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ps_set_samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_uniforms {
    pub num_update_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Alignment of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_uniforms::num_update_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_uniforms, num_update_subresource) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_draw {
    pub num_draw_indexed_instanced: u32,
    pub num_draw_indexed: u32,
    pub num_draw_instanced: u32,
    pub num_draw: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_draw"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_draw>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_draw"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_draw>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed_instanced) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_instanced) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11 {
    pub pass: sg_frame_stats_d3d11_pass,
    pub pipeline: sg_frame_stats_d3d11_pipeline,
    pub bindings: sg_frame_stats_d3d11_bindings,
    pub uniforms: sg_frame_stats_d3d11_uniforms,
    pub draw: sg_frame_stats_d3d11_draw,
    pub num_map: u32,
    pub num_unmap: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11"][::std::mem::size_of::<sg_frame_stats_d3d11>() - 104usize];
    ["Alignment of sg_frame_stats_d3d11"][::std::mem::align_of::<sg_frame_stats_d3d11>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11::pass"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pass) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pipeline) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, bindings) - 52usize];
    ["Offset of field: sg_frame_stats_d3d11::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, uniforms) - 76usize];
    ["Offset of field: sg_frame_stats_d3d11::draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, draw) - 80usize];
    ["Offset of field: sg_frame_stats_d3d11::num_map"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_map) - 96usize];
    ["Offset of field: sg_frame_stats_d3d11::num_unmap"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_unmap) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_idpool {
    pub num_added: u32,
    pub num_released: u32,
    pub num_garbage_collected: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_idpool"]
        [::std::mem::size_of::<sg_frame_stats_metal_idpool>() - 12usize];
    ["Alignment of sg_frame_stats_metal_idpool"]
        [::std::mem::align_of::<sg_frame_stats_metal_idpool>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_added"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_added) - 0usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_released"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_released) - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_garbage_collected"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_garbage_collected) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_pipeline {
    pub num_set_blend_color: u32,
    pub num_set_cull_mode: u32,
    pub num_set_front_facing_winding: u32,
    pub num_set_stencil_reference_value: u32,
    pub num_set_depth_bias: u32,
    pub num_set_render_pipeline_state: u32,
    pub num_set_depth_stencil_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_metal_pipeline>() - 28usize];
    ["Alignment of sg_frame_stats_metal_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_metal_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_blend_color"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_blend_color) - 0usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_cull_mode"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_cull_mode) - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_front_facing_winding"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_front_facing_winding
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_stencil_reference_value"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_stencil_reference_value
    )
        - 12usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_bias"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_depth_bias) - 16usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_render_pipeline_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_render_pipeline_state
    ) - 20usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_depth_stencil_state
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_set_vertex_texture: u32,
    pub num_set_vertex_sampler_state: u32,
    pub num_set_fragment_texture: u32,
    pub num_set_fragment_sampler_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_bindings"]
        [::std::mem::size_of::<sg_frame_stats_metal_bindings>() - 20usize];
    ["Alignment of sg_frame_stats_metal_bindings"]
        [::std::mem::align_of::<sg_frame_stats_metal_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_texture) - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_vertex_sampler_state
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_fragment_texture) - 12usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_fragment_sampler_state
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_uniforms {
    pub num_set_vertex_buffer_offset: u32,
    pub num_set_fragment_buffer_offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_metal_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_metal_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_metal_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_vertex_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_vertex_buffer_offset
    ) - 0usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_fragment_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_fragment_buffer_offset
    ) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal {
    pub idpool: sg_frame_stats_metal_idpool,
    pub pipeline: sg_frame_stats_metal_pipeline,
    pub bindings: sg_frame_stats_metal_bindings,
    pub uniforms: sg_frame_stats_metal_uniforms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal"][::std::mem::size_of::<sg_frame_stats_metal>() - 68usize];
    ["Alignment of sg_frame_stats_metal"][::std::mem::align_of::<sg_frame_stats_metal>() - 4usize];
    ["Offset of field: sg_frame_stats_metal::idpool"]
        [::std::mem::offset_of!(sg_frame_stats_metal, idpool) - 0usize];
    ["Offset of field: sg_frame_stats_metal::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_metal, pipeline) - 12usize];
    ["Offset of field: sg_frame_stats_metal::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_metal, bindings) - 40usize];
    ["Offset of field: sg_frame_stats_metal::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_metal, uniforms) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_uniforms {
    pub num_set_bindgroup: u32,
    pub size_write_buffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, num_set_bindgroup) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::size_write_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, size_write_buffer) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_skip_redundant_vertex_buffer: u32,
    pub num_set_index_buffer: u32,
    pub num_skip_redundant_index_buffer: u32,
    pub num_create_bindgroup: u32,
    pub num_discard_bindgroup: u32,
    pub num_set_bindgroup: u32,
    pub num_skip_redundant_bindgroup: u32,
    pub num_bindgroup_cache_hits: u32,
    pub num_bindgroup_cache_misses: u32,
    pub num_bindgroup_cache_collisions: u32,
    pub num_bindgroup_cache_hash_vs_key_mismatch: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_bindings"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_bindings>() - 48usize];
    ["Alignment of sg_frame_stats_wgpu_bindings"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_vertex_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_vertex_buffer
    ) - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_index_buffer) - 8usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_index_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_index_buffer
    ) - 12usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_create_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_create_bindgroup) - 16usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_discard_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_discard_bindgroup) - 20usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_bindgroup) - 24usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_bindgroup"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_bindgroup
    ) - 28usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hits"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_bindgroup_cache_hits) - 32usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_misses"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_misses
    ) - 36usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_collisions"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_collisions
    ) - 40usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hash_vs_key_mismatch"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_hash_vs_key_mismatch
    )
        - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu {
    pub uniforms: sg_frame_stats_wgpu_uniforms,
    pub bindings: sg_frame_stats_wgpu_bindings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu"][::std::mem::size_of::<sg_frame_stats_wgpu>() - 56usize];
    ["Alignment of sg_frame_stats_wgpu"][::std::mem::align_of::<sg_frame_stats_wgpu>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, uniforms) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, bindings) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats {
    pub frame_index: u32,
    pub num_passes: u32,
    pub num_apply_viewport: u32,
    pub num_apply_scissor_rect: u32,
    pub num_apply_pipeline: u32,
    pub num_apply_bindings: u32,
    pub num_apply_uniforms: u32,
    pub num_draw: u32,
    pub num_update_buffer: u32,
    pub num_append_buffer: u32,
    pub num_update_image: u32,
    pub size_apply_uniforms: u32,
    pub size_update_buffer: u32,
    pub size_append_buffer: u32,
    pub size_update_image: u32,
    pub gl: sg_frame_stats_gl,
    pub d3d11: sg_frame_stats_d3d11,
    pub metal: sg_frame_stats_metal,
    pub wgpu: sg_frame_stats_wgpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats"][::std::mem::size_of::<sg_frame_stats>() - 332usize];
    ["Alignment of sg_frame_stats"][::std::mem::align_of::<sg_frame_stats>() - 4usize];
    ["Offset of field: sg_frame_stats::frame_index"]
        [::std::mem::offset_of!(sg_frame_stats, frame_index) - 0usize];
    ["Offset of field: sg_frame_stats::num_passes"]
        [::std::mem::offset_of!(sg_frame_stats, num_passes) - 4usize];
    ["Offset of field: sg_frame_stats::num_apply_viewport"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_viewport) - 8usize];
    ["Offset of field: sg_frame_stats::num_apply_scissor_rect"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_scissor_rect) - 12usize];
    ["Offset of field: sg_frame_stats::num_apply_pipeline"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_pipeline) - 16usize];
    ["Offset of field: sg_frame_stats::num_apply_bindings"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_bindings) - 20usize];
    ["Offset of field: sg_frame_stats::num_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_uniforms) - 24usize];
    ["Offset of field: sg_frame_stats::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats, num_draw) - 28usize];
    ["Offset of field: sg_frame_stats::num_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_buffer) - 32usize];
    ["Offset of field: sg_frame_stats::num_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_append_buffer) - 36usize];
    ["Offset of field: sg_frame_stats::num_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_image) - 40usize];
    ["Offset of field: sg_frame_stats::size_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, size_apply_uniforms) - 44usize];
    ["Offset of field: sg_frame_stats::size_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_buffer) - 48usize];
    ["Offset of field: sg_frame_stats::size_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_append_buffer) - 52usize];
    ["Offset of field: sg_frame_stats::size_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_image) - 56usize];
    ["Offset of field: sg_frame_stats::gl"][::std::mem::offset_of!(sg_frame_stats, gl) - 60usize];
    ["Offset of field: sg_frame_stats::d3d11"]
        [::std::mem::offset_of!(sg_frame_stats, d3d11) - 104usize];
    ["Offset of field: sg_frame_stats::metal"]
        [::std::mem::offset_of!(sg_frame_stats, metal) - 208usize];
    ["Offset of field: sg_frame_stats::wgpu"]
        [::std::mem::offset_of!(sg_frame_stats, wgpu) - 276usize];
};
pub const sg_log_item_SG_LOGITEM_OK: sg_log_item = 0;
pub const sg_log_item_SG_LOGITEM_MALLOC_FAILED: sg_log_item = 1;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 2;
pub const sg_log_item_SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED: sg_log_item = 3;
pub const sg_log_item_SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED: sg_log_item = 4;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_COMPILATION_FAILED: sg_log_item = 5;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_LINKING_FAILED: sg_log_item = 6;
pub const sg_log_item_SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER: sg_log_item = 7;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER: sg_log_item = 8;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNDEFINED: sg_log_item = 9;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT: sg_log_item = 10;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT: sg_log_item =
    11;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNSUPPORTED: sg_log_item = 12;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE: sg_log_item = 13;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNKNOWN: sg_log_item = 14;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED: sg_log_item = 15;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item =
    16;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED: sg_log_item = 17;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 18;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED: sg_log_item = 19;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED: sg_log_item = 20;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 21;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED: sg_log_item = 22;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED: sg_log_item = 23;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED: sg_log_item = 24;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED: sg_log_item = 25;
pub const sg_log_item_SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED: sg_log_item = 26;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED: sg_log_item = 27;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT: sg_log_item = 28;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED: sg_log_item = 29;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED: sg_log_item = 30;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED: sg_log_item = 31;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED: sg_log_item = 32;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED: sg_log_item = 33;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RTV_FAILED: sg_log_item = 34;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DSV_FAILED: sg_log_item = 35;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED: sg_log_item = 36;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED: sg_log_item = 37;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED: sg_log_item = 38;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_BUFFER_FAILED: sg_log_item = 39;
pub const sg_log_item_SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 40;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_TEXTURE_FAILED: sg_log_item = 41;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_SAMPLER_FAILED: sg_log_item = 42;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED: sg_log_item = 43;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_CREATION_FAILED: sg_log_item = 44;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT: sg_log_item = 45;
pub const sg_log_item_SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND: sg_log_item = 46;
pub const sg_log_item_SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND: sg_log_item = 47;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_FAILED: sg_log_item = 48;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_OUTPUT: sg_log_item = 49;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_DSS_FAILED: sg_log_item = 50;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPS_POOL_EXHAUSTED: sg_log_item = 51;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE: sg_log_item = 52;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_POW2: sg_log_item = 53;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATEBINDGROUP_FAILED: sg_log_item = 54;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_BUFFER_FAILED: sg_log_item = 55;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_FAILED: sg_log_item = 56;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 57;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SAMPLER_FAILED: sg_log_item = 58;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SHADER_MODULE_FAILED: sg_log_item = 59;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_IMAGES: sg_log_item = 60;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_SAMPLERS: sg_log_item = 61;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED: sg_log_item = 62;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_PIPELINE_LAYOUT_FAILED: sg_log_item = 63;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_RENDER_PIPELINE_FAILED: sg_log_item = 64;
pub const sg_log_item_SG_LOGITEM_WGPU_ATTACHMENTS_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 65;
pub const sg_log_item_SG_LOGITEM_IDENTICAL_COMMIT_LISTENER: sg_log_item = 66;
pub const sg_log_item_SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL: sg_log_item = 67;
pub const sg_log_item_SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED: sg_log_item = 68;
pub const sg_log_item_SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE: sg_log_item = 69;
pub const sg_log_item_SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE: sg_log_item = 70;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SAMPLER_INVALID_STATE: sg_log_item = 71;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE: sg_log_item = 72;
pub const sg_log_item_SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE: sg_log_item = 73;
pub const sg_log_item_SG_LOGITEM_DEALLOC_ATTACHMENTS_INVALID_STATE: sg_log_item = 74;
pub const sg_log_item_SG_LOGITEM_INIT_BUFFER_INVALID_STATE: sg_log_item = 75;
pub const sg_log_item_SG_LOGITEM_INIT_IMAGE_INVALID_STATE: sg_log_item = 76;
pub const sg_log_item_SG_LOGITEM_INIT_SAMPLER_INVALID_STATE: sg_log_item = 77;
pub const sg_log_item_SG_LOGITEM_INIT_SHADER_INVALID_STATE: sg_log_item = 78;
pub const sg_log_item_SG_LOGITEM_INIT_PIPELINE_INVALID_STATE: sg_log_item = 79;
pub const sg_log_item_SG_LOGITEM_INIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 80;
pub const sg_log_item_SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE: sg_log_item = 81;
pub const sg_log_item_SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE: sg_log_item = 82;
pub const sg_log_item_SG_LOGITEM_UNINIT_SAMPLER_INVALID_STATE: sg_log_item = 83;
pub const sg_log_item_SG_LOGITEM_UNINIT_SHADER_INVALID_STATE: sg_log_item = 84;
pub const sg_log_item_SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE: sg_log_item = 85;
pub const sg_log_item_SG_LOGITEM_UNINIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 86;
pub const sg_log_item_SG_LOGITEM_FAIL_BUFFER_INVALID_STATE: sg_log_item = 87;
pub const sg_log_item_SG_LOGITEM_FAIL_IMAGE_INVALID_STATE: sg_log_item = 88;
pub const sg_log_item_SG_LOGITEM_FAIL_SAMPLER_INVALID_STATE: sg_log_item = 89;
pub const sg_log_item_SG_LOGITEM_FAIL_SHADER_INVALID_STATE: sg_log_item = 90;
pub const sg_log_item_SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE: sg_log_item = 91;
pub const sg_log_item_SG_LOGITEM_FAIL_ATTACHMENTS_INVALID_STATE: sg_log_item = 92;
pub const sg_log_item_SG_LOGITEM_BUFFER_POOL_EXHAUSTED: sg_log_item = 93;
pub const sg_log_item_SG_LOGITEM_IMAGE_POOL_EXHAUSTED: sg_log_item = 94;
pub const sg_log_item_SG_LOGITEM_SAMPLER_POOL_EXHAUSTED: sg_log_item = 95;
pub const sg_log_item_SG_LOGITEM_SHADER_POOL_EXHAUSTED: sg_log_item = 96;
pub const sg_log_item_SG_LOGITEM_PIPELINE_POOL_EXHAUSTED: sg_log_item = 97;
pub const sg_log_item_SG_LOGITEM_PASS_POOL_EXHAUSTED: sg_log_item = 98;
pub const sg_log_item_SG_LOGITEM_BEGINPASS_ATTACHMENT_INVALID: sg_log_item = 99;
pub const sg_log_item_SG_LOGITEM_DRAW_WITHOUT_BINDINGS: sg_log_item = 100;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY: sg_log_item = 101;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE: sg_log_item = 102;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA: sg_log_item = 103;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE: sg_log_item = 104;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA: sg_log_item = 105;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA: sg_log_item = 106;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE: sg_log_item = 107;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY: sg_log_item = 108;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH: sg_log_item = 109;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT: sg_log_item = 110;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT: sg_log_item = 111;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT: sg_log_item = 112;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT: sg_log_item = 113;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT: sg_log_item = 114;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS: sg_log_item = 115;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_3D_IMAGE: sg_log_item = 116;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE: sg_log_item = 117;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE: sg_log_item = 118;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA: sg_log_item = 119;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA: sg_log_item = 120;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA: sg_log_item = 121;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE: sg_log_item = 122;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_CANARY: sg_log_item = 123;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MINFILTER_NONE: sg_log_item = 124;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MAGFILTER_NONE: sg_log_item = 125;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING:
    sg_log_item = 126;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_CANARY: sg_log_item = 127;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE: sg_log_item = 128;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE: sg_log_item = 129;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE: sg_log_item = 130;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE: sg_log_item = 131;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS: sg_log_item = 132;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS: sg_log_item = 133;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS: sg_log_item = 134;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME: sg_log_item = 135;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH: sg_log_item = 136;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT: sg_log_item = 137;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE: sg_log_item = 138;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGES: sg_log_item = 139;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_SAMPLERS: sg_log_item = 140;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_IMAGE_SLOT_OUT_OF_RANGE:
    sg_log_item = 141;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE : sg_log_item = 142 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_NAME_REQUIRED_FOR_GL:
    sg_log_item = 143;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_NAME_BUT_NOT_USED:
    sg_log_item = 144;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_IMAGE_BUT_NOT_USED:
    sg_log_item = 145;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_SAMPLER_BUT_NOT_USED:
    sg_log_item = 146;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED: sg_log_item =
    147;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED: sg_log_item = 148;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS:
    sg_log_item = 149;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS : sg_log_item = 150 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGE_SAMPLER_PAIRS: sg_log_item = 151;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS: sg_log_item = 152;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG: sg_log_item = 153;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY: sg_log_item = 154;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER: sg_log_item = 155;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS: sg_log_item = 156;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4: sg_log_item = 157;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS: sg_log_item = 158;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_CANARY: sg_log_item = 159;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_ATTACHMENTS: sg_log_item = 160;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_CONT_COLOR_ATTS: sg_log_item = 161;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE: sg_log_item = 162;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_MIPLEVEL: sg_log_item = 163;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_FACE: sg_log_item = 164;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_LAYER: sg_log_item = 165;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_SLICE: sg_log_item = 166;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_NO_RT: sg_log_item = 167;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_COLOR_INV_PIXELFORMAT: sg_log_item = 168;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_INV_PIXELFORMAT: sg_log_item = 169;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SIZES: sg_log_item = 170;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SAMPLE_COUNTS: sg_log_item = 171;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_COLOR_IMAGE_MSAA: sg_log_item =
    172;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE: sg_log_item = 173;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SAMPLE_COUNT: sg_log_item = 174;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_MIPLEVEL: sg_log_item = 175;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_FACE: sg_log_item = 176;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_LAYER: sg_log_item = 177;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SLICE: sg_log_item = 178;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_NO_RT: sg_log_item = 179;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_SIZES: sg_log_item = 180;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_FORMAT: sg_log_item = 181;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE: sg_log_item = 182;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_MIPLEVEL: sg_log_item = 183;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_FACE: sg_log_item = 184;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_LAYER: sg_log_item = 185;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_SLICE: sg_log_item = 186;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_NO_RT: sg_log_item = 187;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SIZES: sg_log_item = 188;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SAMPLE_COUNT: sg_log_item =
    189;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_CANARY: sg_log_item = 190;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_EXISTS: sg_log_item = 191;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_VALID: sg_log_item = 192;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE: sg_log_item = 193;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE: sg_log_item = 194;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE: sg_log_item =
    195;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH: sg_log_item = 196;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH_NOTSET: sg_log_item =
    197;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT: sg_log_item = 198;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT_NOTSET: sg_log_item =
    199;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT: sg_log_item = 200;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT_NOTSET:
    sg_log_item = 201;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT: sg_log_item = 202;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT_NOTSET:
    sg_log_item = 203;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_DEPTHFORMAT_NOTSET:
    sg_log_item = 204;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE:
    sg_log_item = 205;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE_NOTSET : sg_log_item = 206 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE:
    sg_log_item = 207;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE_NOTSET : sg_log_item = 208 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE:
    sg_log_item = 209;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE_NOTSET : sg_log_item = 210 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW: sg_log_item =
    211;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 212;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW:
    sg_log_item = 213;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 214;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 215;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 216 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW: sg_log_item =
    217;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 218;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW: sg_log_item =
    219;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 220;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 221;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 222 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_GL_EXPECT_FRAMEBUFFER_NOTSET:
    sg_log_item = 223;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID: sg_log_item = 224;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS: sg_log_item = 225;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID: sg_log_item = 226;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS: sg_log_item = 227;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_VALID: sg_log_item = 228;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_EXISTS: sg_log_item = 229;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_VALID: sg_log_item = 230;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_ATT_COUNT: sg_log_item = 231;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT: sg_log_item = 232;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT: sg_log_item = 233;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT: sg_log_item = 234;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE: sg_log_item = 235;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS: sg_log_item = 236;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID: sg_log_item = 237;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VBS: sg_log_item = 238;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_EXISTS: sg_log_item = 239;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_TYPE: sg_log_item = 240;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW: sg_log_item = 241;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_NO_IB: sg_log_item = 242;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB: sg_log_item = 243;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_EXISTS: sg_log_item = 244;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_TYPE: sg_log_item = 245;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW: sg_log_item = 246;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_IMAGE_BINDING: sg_log_item = 247;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS: sg_log_item = 248;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_TYPE_MISMATCH: sg_log_item = 249;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_MSAA: sg_log_item = 250;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 251;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_DEPTH_IMAGE: sg_log_item = 252;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 253;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_BINDING: sg_log_item = 254;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    255;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 256;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 257;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 258;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_SMP_EXISTS: sg_log_item = 259;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_IMAGE_BINDING: sg_log_item = 260;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS: sg_log_item = 261;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_TYPE_MISMATCH: sg_log_item = 262;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_MSAA: sg_log_item = 263;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 264;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_DEPTH_IMAGE: sg_log_item = 265;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 266;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_BINDING: sg_log_item = 267;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    268;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 269;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 270;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 271;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_SMP_EXISTS: sg_log_item = 272;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE: sg_log_item = 273;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT: sg_log_item = 274;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_SIZE: sg_log_item = 275;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE: sg_log_item = 276;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE: sg_log_item = 277;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE: sg_log_item = 278;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND: sg_log_item = 279;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_USAGE: sg_log_item = 280;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_SIZE: sg_log_item = 281;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE: sg_log_item = 282;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_USAGE: sg_log_item = 283;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_ONCE: sg_log_item = 284;
pub const sg_log_item_SG_LOGITEM_VALIDATION_FAILED: sg_log_item = 285;
pub type sg_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment_defaults {
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment_defaults"][::std::mem::size_of::<sg_environment_defaults>() - 12usize];
    ["Alignment of sg_environment_defaults"]
        [::std::mem::align_of::<sg_environment_defaults>() - 4usize];
    ["Offset of field: sg_environment_defaults::color_format"]
        [::std::mem::offset_of!(sg_environment_defaults, color_format) - 0usize];
    ["Offset of field: sg_environment_defaults::depth_format"]
        [::std::mem::offset_of!(sg_environment_defaults, depth_format) - 4usize];
    ["Offset of field: sg_environment_defaults::sample_count"]
        [::std::mem::offset_of!(sg_environment_defaults, sample_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_environment"][::std::mem::size_of::<sg_metal_environment>() - 4usize];
    ["Alignment of sg_metal_environment"][::std::mem::align_of::<sg_metal_environment>() - 4usize];
    ["Offset of field: sg_metal_environment::device"]
        [::std::mem::offset_of!(sg_metal_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_environment {
    pub device: *const ::std::os::raw::c_void,
    pub device_context: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_environment"][::std::mem::size_of::<sg_d3d11_environment>() - 8usize];
    ["Alignment of sg_d3d11_environment"][::std::mem::align_of::<sg_d3d11_environment>() - 4usize];
    ["Offset of field: sg_d3d11_environment::device"]
        [::std::mem::offset_of!(sg_d3d11_environment, device) - 0usize];
    ["Offset of field: sg_d3d11_environment::device_context"]
        [::std::mem::offset_of!(sg_d3d11_environment, device_context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_environment"][::std::mem::size_of::<sg_wgpu_environment>() - 4usize];
    ["Alignment of sg_wgpu_environment"][::std::mem::align_of::<sg_wgpu_environment>() - 4usize];
    ["Offset of field: sg_wgpu_environment::device"]
        [::std::mem::offset_of!(sg_wgpu_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment {
    pub defaults: sg_environment_defaults,
    pub metal: sg_metal_environment,
    pub d3d11: sg_d3d11_environment,
    pub wgpu: sg_wgpu_environment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment"][::std::mem::size_of::<sg_environment>() - 28usize];
    ["Alignment of sg_environment"][::std::mem::align_of::<sg_environment>() - 4usize];
    ["Offset of field: sg_environment::defaults"]
        [::std::mem::offset_of!(sg_environment, defaults) - 0usize];
    ["Offset of field: sg_environment::metal"]
        [::std::mem::offset_of!(sg_environment, metal) - 12usize];
    ["Offset of field: sg_environment::d3d11"]
        [::std::mem::offset_of!(sg_environment, d3d11) - 16usize];
    ["Offset of field: sg_environment::wgpu"]
        [::std::mem::offset_of!(sg_environment, wgpu) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_commit_listener {
    pub func: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_commit_listener"][::std::mem::size_of::<sg_commit_listener>() - 8usize];
    ["Alignment of sg_commit_listener"][::std::mem::align_of::<sg_commit_listener>() - 4usize];
    ["Offset of field: sg_commit_listener::func"]
        [::std::mem::offset_of!(sg_commit_listener, func) - 0usize];
    ["Offset of field: sg_commit_listener::user_data"]
        [::std::mem::offset_of!(sg_commit_listener, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_allocator"][::std::mem::size_of::<sg_allocator>() - 12usize];
    ["Alignment of sg_allocator"][::std::mem::align_of::<sg_allocator>() - 4usize];
    ["Offset of field: sg_allocator::alloc_fn"]
        [::std::mem::offset_of!(sg_allocator, alloc_fn) - 0usize];
    ["Offset of field: sg_allocator::free_fn"]
        [::std::mem::offset_of!(sg_allocator, free_fn) - 4usize];
    ["Offset of field: sg_allocator::user_data"]
        [::std::mem::offset_of!(sg_allocator, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_logger"][::std::mem::size_of::<sg_logger>() - 8usize];
    ["Alignment of sg_logger"][::std::mem::align_of::<sg_logger>() - 4usize];
    ["Offset of field: sg_logger::func"][::std::mem::offset_of!(sg_logger, func) - 0usize];
    ["Offset of field: sg_logger::user_data"]
        [::std::mem::offset_of!(sg_logger, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_desc {
    pub _start_canary: u32,
    pub buffer_pool_size: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub sampler_pool_size: ::std::os::raw::c_int,
    pub shader_pool_size: ::std::os::raw::c_int,
    pub pipeline_pool_size: ::std::os::raw::c_int,
    pub attachments_pool_size: ::std::os::raw::c_int,
    pub uniform_buffer_size: ::std::os::raw::c_int,
    pub max_commit_listeners: ::std::os::raw::c_int,
    pub disable_validation: bool,
    pub mtl_force_managed_storage_mode: bool,
    pub mtl_use_command_buffer_with_retained_references: bool,
    pub wgpu_disable_bindgroups_cache: bool,
    pub wgpu_bindgroups_cache_size: ::std::os::raw::c_int,
    pub allocator: sg_allocator,
    pub logger: sg_logger,
    pub environment: sg_environment,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_desc"][::std::mem::size_of::<sg_desc>() - 96usize];
    ["Alignment of sg_desc"][::std::mem::align_of::<sg_desc>() - 4usize];
    ["Offset of field: sg_desc::_start_canary"]
        [::std::mem::offset_of!(sg_desc, _start_canary) - 0usize];
    ["Offset of field: sg_desc::buffer_pool_size"]
        [::std::mem::offset_of!(sg_desc, buffer_pool_size) - 4usize];
    ["Offset of field: sg_desc::image_pool_size"]
        [::std::mem::offset_of!(sg_desc, image_pool_size) - 8usize];
    ["Offset of field: sg_desc::sampler_pool_size"]
        [::std::mem::offset_of!(sg_desc, sampler_pool_size) - 12usize];
    ["Offset of field: sg_desc::shader_pool_size"]
        [::std::mem::offset_of!(sg_desc, shader_pool_size) - 16usize];
    ["Offset of field: sg_desc::pipeline_pool_size"]
        [::std::mem::offset_of!(sg_desc, pipeline_pool_size) - 20usize];
    ["Offset of field: sg_desc::attachments_pool_size"]
        [::std::mem::offset_of!(sg_desc, attachments_pool_size) - 24usize];
    ["Offset of field: sg_desc::uniform_buffer_size"]
        [::std::mem::offset_of!(sg_desc, uniform_buffer_size) - 28usize];
    ["Offset of field: sg_desc::max_commit_listeners"]
        [::std::mem::offset_of!(sg_desc, max_commit_listeners) - 32usize];
    ["Offset of field: sg_desc::disable_validation"]
        [::std::mem::offset_of!(sg_desc, disable_validation) - 36usize];
    ["Offset of field: sg_desc::mtl_force_managed_storage_mode"]
        [::std::mem::offset_of!(sg_desc, mtl_force_managed_storage_mode) - 37usize];
    ["Offset of field: sg_desc::mtl_use_command_buffer_with_retained_references"][::std::mem::offset_of!(
        sg_desc,
        mtl_use_command_buffer_with_retained_references
    ) - 38usize];
    ["Offset of field: sg_desc::wgpu_disable_bindgroups_cache"]
        [::std::mem::offset_of!(sg_desc, wgpu_disable_bindgroups_cache) - 39usize];
    ["Offset of field: sg_desc::wgpu_bindgroups_cache_size"]
        [::std::mem::offset_of!(sg_desc, wgpu_bindgroups_cache_size) - 40usize];
    ["Offset of field: sg_desc::allocator"][::std::mem::offset_of!(sg_desc, allocator) - 44usize];
    ["Offset of field: sg_desc::logger"][::std::mem::offset_of!(sg_desc, logger) - 56usize];
    ["Offset of field: sg_desc::environment"]
        [::std::mem::offset_of!(sg_desc, environment) - 64usize];
    ["Offset of field: sg_desc::_end_canary"]
        [::std::mem::offset_of!(sg_desc, _end_canary) - 92usize];
};
unsafe extern "C" {
    pub fn sg_setup(desc: *const sg_desc);
}
unsafe extern "C" {
    pub fn sg_shutdown();
}
unsafe extern "C" {
    pub fn sg_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sg_reset_state_cache();
}
unsafe extern "C" {
    pub fn sg_install_trace_hooks(trace_hooks: *const sg_trace_hooks) -> sg_trace_hooks;
}
unsafe extern "C" {
    pub fn sg_push_debug_group(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sg_pop_debug_group();
}
unsafe extern "C" {
    pub fn sg_add_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_remove_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_make_buffer(desc: *const sg_buffer_desc) -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_make_image(desc: *const sg_image_desc) -> sg_image;
}
unsafe extern "C" {
    pub fn sg_make_sampler(desc: *const sg_sampler_desc) -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_make_shader(desc: *const sg_shader_desc) -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_make_pipeline(desc: *const sg_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_make_attachments(desc: *const sg_attachments_desc) -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_destroy_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_destroy_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_destroy_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_destroy_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_destroy_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_destroy_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_update_buffer(buf: sg_buffer, data: *const sg_range);
}
unsafe extern "C" {
    pub fn sg_update_image(img: sg_image, data: *const sg_image_data);
}
unsafe extern "C" {
    pub fn sg_append_buffer(buf: sg_buffer, data: *const sg_range) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_overflow(buf: sg_buffer) -> bool;
}
unsafe extern "C" {
    pub fn sg_query_buffer_will_overflow(buf: sg_buffer, size: usize) -> bool;
}
unsafe extern "C" {
    pub fn sg_begin_pass(pass: *const sg_pass);
}
unsafe extern "C" {
    pub fn sg_apply_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_apply_bindings(bindings: *const sg_bindings);
}
unsafe extern "C" {
    pub fn sg_apply_uniforms(
        stage: sg_shader_stage,
        ub_index: ::std::os::raw::c_int,
        data: *const sg_range,
    );
}
unsafe extern "C" {
    pub fn sg_draw(
        base_element: ::std::os::raw::c_int,
        num_elements: ::std::os::raw::c_int,
        num_instances: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sg_end_pass();
}
unsafe extern "C" {
    pub fn sg_commit();
}
unsafe extern "C" {
    pub fn sg_query_desc() -> sg_desc;
}
unsafe extern "C" {
    pub fn sg_query_backend() -> sg_backend;
}
unsafe extern "C" {
    pub fn sg_query_features() -> sg_features;
}
unsafe extern "C" {
    pub fn sg_query_limits() -> sg_limits;
}
unsafe extern "C" {
    pub fn sg_query_pixelformat(fmt: sg_pixel_format) -> sg_pixelformat_info;
}
unsafe extern "C" {
    pub fn sg_query_row_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_surface_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_state(buf: sg_buffer) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_image_state(img: sg_image) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_sampler_state(smp: sg_sampler) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_shader_state(shd: sg_shader) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_state(pip: sg_pipeline) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_attachments_state(atts: sg_attachments) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_buffer_info(buf: sg_buffer) -> sg_buffer_info;
}
unsafe extern "C" {
    pub fn sg_query_image_info(img: sg_image) -> sg_image_info;
}
unsafe extern "C" {
    pub fn sg_query_sampler_info(smp: sg_sampler) -> sg_sampler_info;
}
unsafe extern "C" {
    pub fn sg_query_shader_info(shd: sg_shader) -> sg_shader_info;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_info(pip: sg_pipeline) -> sg_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_query_attachments_info(atts: sg_attachments) -> sg_attachments_info;
}
unsafe extern "C" {
    pub fn sg_query_buffer_desc(buf: sg_buffer) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_desc(img: sg_image) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_desc(smp: sg_sampler) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_desc(shd: sg_shader) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_desc(pip: sg_pipeline) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_desc(atts: sg_attachments) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_query_buffer_defaults(desc: *const sg_buffer_desc) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_defaults(desc: *const sg_image_desc) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_defaults(desc: *const sg_sampler_desc) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_defaults(desc: *const sg_shader_desc) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_defaults(desc: *const sg_pipeline_desc) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_defaults(desc: *const sg_attachments_desc) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_alloc_buffer() -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_alloc_image() -> sg_image;
}
unsafe extern "C" {
    pub fn sg_alloc_sampler() -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_alloc_shader() -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_alloc_pipeline() -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_alloc_attachments() -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_dealloc_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_dealloc_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_dealloc_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_dealloc_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_dealloc_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_dealloc_attachments(attachments: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_init_buffer(buf: sg_buffer, desc: *const sg_buffer_desc);
}
unsafe extern "C" {
    pub fn sg_init_image(img: sg_image, desc: *const sg_image_desc);
}
unsafe extern "C" {
    pub fn sg_init_sampler(smg: sg_sampler, desc: *const sg_sampler_desc);
}
unsafe extern "C" {
    pub fn sg_init_shader(shd: sg_shader, desc: *const sg_shader_desc);
}
unsafe extern "C" {
    pub fn sg_init_pipeline(pip: sg_pipeline, desc: *const sg_pipeline_desc);
}
unsafe extern "C" {
    pub fn sg_init_attachments(attachments: sg_attachments, desc: *const sg_attachments_desc);
}
unsafe extern "C" {
    pub fn sg_uninit_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_uninit_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_uninit_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_uninit_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_uninit_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_uninit_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_fail_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_fail_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_fail_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_fail_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_fail_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_fail_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_enable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_disable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_frame_stats_enabled() -> bool;
}
unsafe extern "C" {
    pub fn sg_query_frame_stats() -> sg_frame_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_buffer_info"][::std::mem::size_of::<sg_d3d11_buffer_info>() - 4usize];
    ["Alignment of sg_d3d11_buffer_info"][::std::mem::align_of::<sg_d3d11_buffer_info>() - 4usize];
    ["Offset of field: sg_d3d11_buffer_info::buf"]
        [::std::mem::offset_of!(sg_d3d11_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_image_info {
    pub tex2d: *const ::std::os::raw::c_void,
    pub tex3d: *const ::std::os::raw::c_void,
    pub res: *const ::std::os::raw::c_void,
    pub srv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_image_info"][::std::mem::size_of::<sg_d3d11_image_info>() - 16usize];
    ["Alignment of sg_d3d11_image_info"][::std::mem::align_of::<sg_d3d11_image_info>() - 4usize];
    ["Offset of field: sg_d3d11_image_info::tex2d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex2d) - 0usize];
    ["Offset of field: sg_d3d11_image_info::tex3d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex3d) - 4usize];
    ["Offset of field: sg_d3d11_image_info::res"]
        [::std::mem::offset_of!(sg_d3d11_image_info, res) - 8usize];
    ["Offset of field: sg_d3d11_image_info::srv"]
        [::std::mem::offset_of!(sg_d3d11_image_info, srv) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_sampler_info"][::std::mem::size_of::<sg_d3d11_sampler_info>() - 4usize];
    ["Alignment of sg_d3d11_sampler_info"]
        [::std::mem::align_of::<sg_d3d11_sampler_info>() - 4usize];
    ["Offset of field: sg_d3d11_sampler_info::smp"]
        [::std::mem::offset_of!(sg_d3d11_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_shader_info {
    pub vs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub fs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub vs: *const ::std::os::raw::c_void,
    pub fs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_shader_info"][::std::mem::size_of::<sg_d3d11_shader_info>() - 40usize];
    ["Alignment of sg_d3d11_shader_info"][::std::mem::align_of::<sg_d3d11_shader_info>() - 4usize];
    ["Offset of field: sg_d3d11_shader_info::vs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs_cbufs) - 0usize];
    ["Offset of field: sg_d3d11_shader_info::fs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs_cbufs) - 16usize];
    ["Offset of field: sg_d3d11_shader_info::vs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs) - 32usize];
    ["Offset of field: sg_d3d11_shader_info::fs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_pipeline_info {
    pub il: *const ::std::os::raw::c_void,
    pub rs: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
    pub bs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_pipeline_info"][::std::mem::size_of::<sg_d3d11_pipeline_info>() - 16usize];
    ["Alignment of sg_d3d11_pipeline_info"]
        [::std::mem::align_of::<sg_d3d11_pipeline_info>() - 4usize];
    ["Offset of field: sg_d3d11_pipeline_info::il"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, il) - 0usize];
    ["Offset of field: sg_d3d11_pipeline_info::rs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, rs) - 4usize];
    ["Offset of field: sg_d3d11_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, dss) - 8usize];
    ["Offset of field: sg_d3d11_pipeline_info::bs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, bs) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_attachments_info {
    pub color_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub dsv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_attachments_info"]
        [::std::mem::size_of::<sg_d3d11_attachments_info>() - 36usize];
    ["Alignment of sg_d3d11_attachments_info"]
        [::std::mem::align_of::<sg_d3d11_attachments_info>() - 4usize];
    ["Offset of field: sg_d3d11_attachments_info::color_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, color_rtv) - 0usize];
    ["Offset of field: sg_d3d11_attachments_info::resolve_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, resolve_rtv) - 16usize];
    ["Offset of field: sg_d3d11_attachments_info::dsv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, dsv) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_buffer_info {
    pub buf: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_buffer_info"][::std::mem::size_of::<sg_mtl_buffer_info>() - 12usize];
    ["Alignment of sg_mtl_buffer_info"][::std::mem::align_of::<sg_mtl_buffer_info>() - 4usize];
    ["Offset of field: sg_mtl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_mtl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_image_info {
    pub tex: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_image_info"][::std::mem::size_of::<sg_mtl_image_info>() - 12usize];
    ["Alignment of sg_mtl_image_info"][::std::mem::align_of::<sg_mtl_image_info>() - 4usize];
    ["Offset of field: sg_mtl_image_info::tex"]
        [::std::mem::offset_of!(sg_mtl_image_info, tex) - 0usize];
    ["Offset of field: sg_mtl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_image_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_sampler_info"][::std::mem::size_of::<sg_mtl_sampler_info>() - 4usize];
    ["Alignment of sg_mtl_sampler_info"][::std::mem::align_of::<sg_mtl_sampler_info>() - 4usize];
    ["Offset of field: sg_mtl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_mtl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_shader_info {
    pub vs_lib: *const ::std::os::raw::c_void,
    pub fs_lib: *const ::std::os::raw::c_void,
    pub vs_func: *const ::std::os::raw::c_void,
    pub fs_func: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_shader_info"][::std::mem::size_of::<sg_mtl_shader_info>() - 16usize];
    ["Alignment of sg_mtl_shader_info"][::std::mem::align_of::<sg_mtl_shader_info>() - 4usize];
    ["Offset of field: sg_mtl_shader_info::vs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_lib) - 0usize];
    ["Offset of field: sg_mtl_shader_info::fs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_lib) - 4usize];
    ["Offset of field: sg_mtl_shader_info::vs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_func) - 8usize];
    ["Offset of field: sg_mtl_shader_info::fs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_func) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_pipeline_info {
    pub rps: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_pipeline_info"][::std::mem::size_of::<sg_mtl_pipeline_info>() - 8usize];
    ["Alignment of sg_mtl_pipeline_info"][::std::mem::align_of::<sg_mtl_pipeline_info>() - 4usize];
    ["Offset of field: sg_mtl_pipeline_info::rps"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, rps) - 0usize];
    ["Offset of field: sg_mtl_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, dss) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_buffer_info"][::std::mem::size_of::<sg_wgpu_buffer_info>() - 4usize];
    ["Alignment of sg_wgpu_buffer_info"][::std::mem::align_of::<sg_wgpu_buffer_info>() - 4usize];
    ["Offset of field: sg_wgpu_buffer_info::buf"]
        [::std::mem::offset_of!(sg_wgpu_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_image_info {
    pub tex: *const ::std::os::raw::c_void,
    pub view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_image_info"][::std::mem::size_of::<sg_wgpu_image_info>() - 8usize];
    ["Alignment of sg_wgpu_image_info"][::std::mem::align_of::<sg_wgpu_image_info>() - 4usize];
    ["Offset of field: sg_wgpu_image_info::tex"]
        [::std::mem::offset_of!(sg_wgpu_image_info, tex) - 0usize];
    ["Offset of field: sg_wgpu_image_info::view"]
        [::std::mem::offset_of!(sg_wgpu_image_info, view) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_sampler_info"][::std::mem::size_of::<sg_wgpu_sampler_info>() - 4usize];
    ["Alignment of sg_wgpu_sampler_info"][::std::mem::align_of::<sg_wgpu_sampler_info>() - 4usize];
    ["Offset of field: sg_wgpu_sampler_info::smp"]
        [::std::mem::offset_of!(sg_wgpu_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_shader_info {
    pub vs_mod: *const ::std::os::raw::c_void,
    pub fs_mod: *const ::std::os::raw::c_void,
    pub bgl: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_shader_info"][::std::mem::size_of::<sg_wgpu_shader_info>() - 12usize];
    ["Alignment of sg_wgpu_shader_info"][::std::mem::align_of::<sg_wgpu_shader_info>() - 4usize];
    ["Offset of field: sg_wgpu_shader_info::vs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, vs_mod) - 0usize];
    ["Offset of field: sg_wgpu_shader_info::fs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, fs_mod) - 4usize];
    ["Offset of field: sg_wgpu_shader_info::bgl"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, bgl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_pipeline_info {
    pub pip: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_pipeline_info"][::std::mem::size_of::<sg_wgpu_pipeline_info>() - 4usize];
    ["Alignment of sg_wgpu_pipeline_info"]
        [::std::mem::align_of::<sg_wgpu_pipeline_info>() - 4usize];
    ["Offset of field: sg_wgpu_pipeline_info::pip"]
        [::std::mem::offset_of!(sg_wgpu_pipeline_info, pip) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_attachments_info {
    pub color_view: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_view: [*const ::std::os::raw::c_void; 4usize],
    pub ds_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_attachments_info"]
        [::std::mem::size_of::<sg_wgpu_attachments_info>() - 36usize];
    ["Alignment of sg_wgpu_attachments_info"]
        [::std::mem::align_of::<sg_wgpu_attachments_info>() - 4usize];
    ["Offset of field: sg_wgpu_attachments_info::color_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, color_view) - 0usize];
    ["Offset of field: sg_wgpu_attachments_info::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, resolve_view) - 16usize];
    ["Offset of field: sg_wgpu_attachments_info::ds_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, ds_view) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_buffer_info {
    pub buf: [u32; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_buffer_info"][::std::mem::size_of::<sg_gl_buffer_info>() - 12usize];
    ["Alignment of sg_gl_buffer_info"][::std::mem::align_of::<sg_gl_buffer_info>() - 4usize];
    ["Offset of field: sg_gl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_gl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_gl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_buffer_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_image_info {
    pub tex: [u32; 2usize],
    pub tex_target: u32,
    pub msaa_render_buffer: u32,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_image_info"][::std::mem::size_of::<sg_gl_image_info>() - 20usize];
    ["Alignment of sg_gl_image_info"][::std::mem::align_of::<sg_gl_image_info>() - 4usize];
    ["Offset of field: sg_gl_image_info::tex"]
        [::std::mem::offset_of!(sg_gl_image_info, tex) - 0usize];
    ["Offset of field: sg_gl_image_info::tex_target"]
        [::std::mem::offset_of!(sg_gl_image_info, tex_target) - 8usize];
    ["Offset of field: sg_gl_image_info::msaa_render_buffer"]
        [::std::mem::offset_of!(sg_gl_image_info, msaa_render_buffer) - 12usize];
    ["Offset of field: sg_gl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_sampler_info {
    pub smp: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_sampler_info"][::std::mem::size_of::<sg_gl_sampler_info>() - 4usize];
    ["Alignment of sg_gl_sampler_info"][::std::mem::align_of::<sg_gl_sampler_info>() - 4usize];
    ["Offset of field: sg_gl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_gl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_shader_info {
    pub prog: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_shader_info"][::std::mem::size_of::<sg_gl_shader_info>() - 4usize];
    ["Alignment of sg_gl_shader_info"][::std::mem::align_of::<sg_gl_shader_info>() - 4usize];
    ["Offset of field: sg_gl_shader_info::prog"]
        [::std::mem::offset_of!(sg_gl_shader_info, prog) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_attachments_info {
    pub framebuffer: u32,
    pub msaa_resolve_framebuffer: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_attachments_info"][::std::mem::size_of::<sg_gl_attachments_info>() - 20usize];
    ["Alignment of sg_gl_attachments_info"]
        [::std::mem::align_of::<sg_gl_attachments_info>() - 4usize];
    ["Offset of field: sg_gl_attachments_info::framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, framebuffer) - 0usize];
    ["Offset of field: sg_gl_attachments_info::msaa_resolve_framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, msaa_resolve_framebuffer) - 4usize];
};
unsafe extern "C" {
    pub fn sg_d3d11_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_buffer_info(buf: sg_buffer) -> sg_d3d11_buffer_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_image_info(img: sg_image) -> sg_d3d11_image_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_sampler_info(smp: sg_sampler) -> sg_d3d11_sampler_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_shader_info(shd: sg_shader) -> sg_d3d11_shader_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_pipeline_info(pip: sg_pipeline) -> sg_d3d11_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_attachments_info(atts: sg_attachments) -> sg_d3d11_attachments_info;
}
unsafe extern "C" {
    pub fn sg_mtl_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_render_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_query_buffer_info(buf: sg_buffer) -> sg_mtl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_image_info(img: sg_image) -> sg_mtl_image_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_sampler_info(smp: sg_sampler) -> sg_mtl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_shader_info(shd: sg_shader) -> sg_mtl_shader_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_pipeline_info(pip: sg_pipeline) -> sg_mtl_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_queue() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_render_pass_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_buffer_info(buf: sg_buffer) -> sg_wgpu_buffer_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_image_info(img: sg_image) -> sg_wgpu_image_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_sampler_info(smp: sg_sampler) -> sg_wgpu_sampler_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_shader_info(shd: sg_shader) -> sg_wgpu_shader_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_pipeline_info(pip: sg_pipeline) -> sg_wgpu_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_attachments_info(atts: sg_attachments) -> sg_wgpu_attachments_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_buffer_info(buf: sg_buffer) -> sg_gl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_image_info(img: sg_image) -> sg_gl_image_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_sampler_info(smp: sg_sampler) -> sg_gl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_shader_info(shd: sg_shader) -> sg_gl_shader_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_attachments_info(atts: sg_attachments) -> sg_gl_attachments_info;
}
unsafe extern "C" {
    pub fn sglue_environment() -> sg_environment;
}
unsafe extern "C" {
    pub fn sglue_swapchain() -> sg_swapchain;
}
pub const sfetch_log_item_t_SFETCH_LOGITEM_OK: sfetch_log_item_t = 0;
pub const sfetch_log_item_t_SFETCH_LOGITEM_MALLOC_FAILED: sfetch_log_item_t = 1;
pub const sfetch_log_item_t_SFETCH_LOGITEM_FILE_PATH_UTF8_DECODING_FAILED: sfetch_log_item_t = 2;
pub const sfetch_log_item_t_SFETCH_LOGITEM_SEND_QUEUE_FULL: sfetch_log_item_t = 3;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_CHANNEL_INDEX_TOO_BIG: sfetch_log_item_t = 4;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_PATH_IS_NULL: sfetch_log_item_t = 5;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_PATH_TOO_LONG: sfetch_log_item_t = 6;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_CALLBACK_MISSING: sfetch_log_item_t = 7;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_CHUNK_SIZE_GREATER_BUFFER_SIZE:
    sfetch_log_item_t = 8;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_USERDATA_PTR_IS_SET_BUT_USERDATA_SIZE_IS_NULL:
    sfetch_log_item_t = 9;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_USERDATA_PTR_IS_NULL_BUT_USERDATA_SIZE_IS_NOT:
    sfetch_log_item_t = 10;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_USERDATA_SIZE_TOO_BIG: sfetch_log_item_t = 11;
pub const sfetch_log_item_t_SFETCH_LOGITEM_CLAMPING_NUM_CHANNELS_TO_MAX_CHANNELS:
    sfetch_log_item_t = 12;
pub const sfetch_log_item_t_SFETCH_LOGITEM_REQUEST_POOL_EXHAUSTED: sfetch_log_item_t = 13;
pub type sfetch_log_item_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_logger_t {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_logger_t"][::std::mem::size_of::<sfetch_logger_t>() - 8usize];
    ["Alignment of sfetch_logger_t"][::std::mem::align_of::<sfetch_logger_t>() - 4usize];
    ["Offset of field: sfetch_logger_t::func"]
        [::std::mem::offset_of!(sfetch_logger_t, func) - 0usize];
    ["Offset of field: sfetch_logger_t::user_data"]
        [::std::mem::offset_of!(sfetch_logger_t, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_range_t {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_range_t"][::std::mem::size_of::<sfetch_range_t>() - 8usize];
    ["Alignment of sfetch_range_t"][::std::mem::align_of::<sfetch_range_t>() - 4usize];
    ["Offset of field: sfetch_range_t::ptr"][::std::mem::offset_of!(sfetch_range_t, ptr) - 0usize];
    ["Offset of field: sfetch_range_t::size"]
        [::std::mem::offset_of!(sfetch_range_t, size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_allocator_t {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_allocator_t"][::std::mem::size_of::<sfetch_allocator_t>() - 12usize];
    ["Alignment of sfetch_allocator_t"][::std::mem::align_of::<sfetch_allocator_t>() - 4usize];
    ["Offset of field: sfetch_allocator_t::alloc_fn"]
        [::std::mem::offset_of!(sfetch_allocator_t, alloc_fn) - 0usize];
    ["Offset of field: sfetch_allocator_t::free_fn"]
        [::std::mem::offset_of!(sfetch_allocator_t, free_fn) - 4usize];
    ["Offset of field: sfetch_allocator_t::user_data"]
        [::std::mem::offset_of!(sfetch_allocator_t, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_desc_t {
    pub max_requests: u32,
    pub num_channels: u32,
    pub num_lanes: u32,
    pub allocator: sfetch_allocator_t,
    pub logger: sfetch_logger_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_desc_t"][::std::mem::size_of::<sfetch_desc_t>() - 32usize];
    ["Alignment of sfetch_desc_t"][::std::mem::align_of::<sfetch_desc_t>() - 4usize];
    ["Offset of field: sfetch_desc_t::max_requests"]
        [::std::mem::offset_of!(sfetch_desc_t, max_requests) - 0usize];
    ["Offset of field: sfetch_desc_t::num_channels"]
        [::std::mem::offset_of!(sfetch_desc_t, num_channels) - 4usize];
    ["Offset of field: sfetch_desc_t::num_lanes"]
        [::std::mem::offset_of!(sfetch_desc_t, num_lanes) - 8usize];
    ["Offset of field: sfetch_desc_t::allocator"]
        [::std::mem::offset_of!(sfetch_desc_t, allocator) - 12usize];
    ["Offset of field: sfetch_desc_t::logger"]
        [::std::mem::offset_of!(sfetch_desc_t, logger) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_handle_t {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_handle_t"][::std::mem::size_of::<sfetch_handle_t>() - 4usize];
    ["Alignment of sfetch_handle_t"][::std::mem::align_of::<sfetch_handle_t>() - 4usize];
    ["Offset of field: sfetch_handle_t::id"][::std::mem::offset_of!(sfetch_handle_t, id) - 0usize];
};
pub const sfetch_error_t_SFETCH_ERROR_NO_ERROR: sfetch_error_t = 0;
pub const sfetch_error_t_SFETCH_ERROR_FILE_NOT_FOUND: sfetch_error_t = 1;
pub const sfetch_error_t_SFETCH_ERROR_NO_BUFFER: sfetch_error_t = 2;
pub const sfetch_error_t_SFETCH_ERROR_BUFFER_TOO_SMALL: sfetch_error_t = 3;
pub const sfetch_error_t_SFETCH_ERROR_UNEXPECTED_EOF: sfetch_error_t = 4;
pub const sfetch_error_t_SFETCH_ERROR_INVALID_HTTP_STATUS: sfetch_error_t = 5;
pub const sfetch_error_t_SFETCH_ERROR_CANCELLED: sfetch_error_t = 6;
pub type sfetch_error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_response_t {
    pub handle: sfetch_handle_t,
    pub dispatched: bool,
    pub fetched: bool,
    pub paused: bool,
    pub finished: bool,
    pub failed: bool,
    pub cancelled: bool,
    pub error_code: sfetch_error_t,
    pub channel: u32,
    pub lane: u32,
    pub path: *const ::std::os::raw::c_char,
    pub user_data: *mut ::std::os::raw::c_void,
    pub data_offset: u32,
    pub data: sfetch_range_t,
    pub buffer: sfetch_range_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_response_t"][::std::mem::size_of::<sfetch_response_t>() - 52usize];
    ["Alignment of sfetch_response_t"][::std::mem::align_of::<sfetch_response_t>() - 4usize];
    ["Offset of field: sfetch_response_t::handle"]
        [::std::mem::offset_of!(sfetch_response_t, handle) - 0usize];
    ["Offset of field: sfetch_response_t::dispatched"]
        [::std::mem::offset_of!(sfetch_response_t, dispatched) - 4usize];
    ["Offset of field: sfetch_response_t::fetched"]
        [::std::mem::offset_of!(sfetch_response_t, fetched) - 5usize];
    ["Offset of field: sfetch_response_t::paused"]
        [::std::mem::offset_of!(sfetch_response_t, paused) - 6usize];
    ["Offset of field: sfetch_response_t::finished"]
        [::std::mem::offset_of!(sfetch_response_t, finished) - 7usize];
    ["Offset of field: sfetch_response_t::failed"]
        [::std::mem::offset_of!(sfetch_response_t, failed) - 8usize];
    ["Offset of field: sfetch_response_t::cancelled"]
        [::std::mem::offset_of!(sfetch_response_t, cancelled) - 9usize];
    ["Offset of field: sfetch_response_t::error_code"]
        [::std::mem::offset_of!(sfetch_response_t, error_code) - 12usize];
    ["Offset of field: sfetch_response_t::channel"]
        [::std::mem::offset_of!(sfetch_response_t, channel) - 16usize];
    ["Offset of field: sfetch_response_t::lane"]
        [::std::mem::offset_of!(sfetch_response_t, lane) - 20usize];
    ["Offset of field: sfetch_response_t::path"]
        [::std::mem::offset_of!(sfetch_response_t, path) - 24usize];
    ["Offset of field: sfetch_response_t::user_data"]
        [::std::mem::offset_of!(sfetch_response_t, user_data) - 28usize];
    ["Offset of field: sfetch_response_t::data_offset"]
        [::std::mem::offset_of!(sfetch_response_t, data_offset) - 32usize];
    ["Offset of field: sfetch_response_t::data"]
        [::std::mem::offset_of!(sfetch_response_t, data) - 36usize];
    ["Offset of field: sfetch_response_t::buffer"]
        [::std::mem::offset_of!(sfetch_response_t, buffer) - 44usize];
};
pub type sfetch_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const sfetch_response_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfetch_request_t {
    pub channel: u32,
    pub path: *const ::std::os::raw::c_char,
    pub callback: sfetch_callback_t,
    pub chunk_size: u32,
    pub buffer: sfetch_range_t,
    pub user_data: sfetch_range_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfetch_request_t"][::std::mem::size_of::<sfetch_request_t>() - 32usize];
    ["Alignment of sfetch_request_t"][::std::mem::align_of::<sfetch_request_t>() - 4usize];
    ["Offset of field: sfetch_request_t::channel"]
        [::std::mem::offset_of!(sfetch_request_t, channel) - 0usize];
    ["Offset of field: sfetch_request_t::path"]
        [::std::mem::offset_of!(sfetch_request_t, path) - 4usize];
    ["Offset of field: sfetch_request_t::callback"]
        [::std::mem::offset_of!(sfetch_request_t, callback) - 8usize];
    ["Offset of field: sfetch_request_t::chunk_size"]
        [::std::mem::offset_of!(sfetch_request_t, chunk_size) - 12usize];
    ["Offset of field: sfetch_request_t::buffer"]
        [::std::mem::offset_of!(sfetch_request_t, buffer) - 16usize];
    ["Offset of field: sfetch_request_t::user_data"]
        [::std::mem::offset_of!(sfetch_request_t, user_data) - 24usize];
};
unsafe extern "C" {
    pub fn sfetch_setup(desc: *const sfetch_desc_t);
}
unsafe extern "C" {
    pub fn sfetch_shutdown();
}
unsafe extern "C" {
    pub fn sfetch_valid() -> bool;
}
unsafe extern "C" {
    pub fn sfetch_desc() -> sfetch_desc_t;
}
unsafe extern "C" {
    pub fn sfetch_max_userdata_bytes() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfetch_max_path() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfetch_send(request: *const sfetch_request_t) -> sfetch_handle_t;
}
unsafe extern "C" {
    pub fn sfetch_handle_valid(h: sfetch_handle_t) -> bool;
}
unsafe extern "C" {
    pub fn sfetch_dowork();
}
unsafe extern "C" {
    pub fn sfetch_bind_buffer(h: sfetch_handle_t, buffer: sfetch_range_t);
}
unsafe extern "C" {
    pub fn sfetch_unbind_buffer(h: sfetch_handle_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sfetch_cancel(h: sfetch_handle_t);
}
unsafe extern "C" {
    pub fn sfetch_pause(h: sfetch_handle_t);
}
unsafe extern "C" {
    pub fn sfetch_continue(h: sfetch_handle_t);
}
pub const SSPINE_INVALID_ID: _bindgen_ty_4 = 0;
pub const SSPINE_MAX_SKINSET_SKINS: _bindgen_ty_4 = 32;
pub const SSPINE_MAX_STRING_SIZE: _bindgen_ty_4 = 61;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_context {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_context"][::std::mem::size_of::<sspine_context>() - 4usize];
    ["Alignment of sspine_context"][::std::mem::align_of::<sspine_context>() - 4usize];
    ["Offset of field: sspine_context::id"][::std::mem::offset_of!(sspine_context, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_atlas {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_atlas"][::std::mem::size_of::<sspine_atlas>() - 4usize];
    ["Alignment of sspine_atlas"][::std::mem::align_of::<sspine_atlas>() - 4usize];
    ["Offset of field: sspine_atlas::id"][::std::mem::offset_of!(sspine_atlas, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skeleton {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skeleton"][::std::mem::size_of::<sspine_skeleton>() - 4usize];
    ["Alignment of sspine_skeleton"][::std::mem::align_of::<sspine_skeleton>() - 4usize];
    ["Offset of field: sspine_skeleton::id"][::std::mem::offset_of!(sspine_skeleton, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_instance {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_instance"][::std::mem::size_of::<sspine_instance>() - 4usize];
    ["Alignment of sspine_instance"][::std::mem::align_of::<sspine_instance>() - 4usize];
    ["Offset of field: sspine_instance::id"][::std::mem::offset_of!(sspine_instance, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skinset {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skinset"][::std::mem::size_of::<sspine_skinset>() - 4usize];
    ["Alignment of sspine_skinset"][::std::mem::align_of::<sspine_skinset>() - 4usize];
    ["Offset of field: sspine_skinset::id"][::std::mem::offset_of!(sspine_skinset, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_image {
    pub atlas_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_image"][::std::mem::size_of::<sspine_image>() - 8usize];
    ["Alignment of sspine_image"][::std::mem::align_of::<sspine_image>() - 4usize];
    ["Offset of field: sspine_image::atlas_id"]
        [::std::mem::offset_of!(sspine_image, atlas_id) - 0usize];
    ["Offset of field: sspine_image::index"][::std::mem::offset_of!(sspine_image, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_atlas_page {
    pub atlas_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_atlas_page"][::std::mem::size_of::<sspine_atlas_page>() - 8usize];
    ["Alignment of sspine_atlas_page"][::std::mem::align_of::<sspine_atlas_page>() - 4usize];
    ["Offset of field: sspine_atlas_page::atlas_id"]
        [::std::mem::offset_of!(sspine_atlas_page, atlas_id) - 0usize];
    ["Offset of field: sspine_atlas_page::index"]
        [::std::mem::offset_of!(sspine_atlas_page, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_anim {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_anim"][::std::mem::size_of::<sspine_anim>() - 8usize];
    ["Alignment of sspine_anim"][::std::mem::align_of::<sspine_anim>() - 4usize];
    ["Offset of field: sspine_anim::skeleton_id"]
        [::std::mem::offset_of!(sspine_anim, skeleton_id) - 0usize];
    ["Offset of field: sspine_anim::index"][::std::mem::offset_of!(sspine_anim, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_bone {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_bone"][::std::mem::size_of::<sspine_bone>() - 8usize];
    ["Alignment of sspine_bone"][::std::mem::align_of::<sspine_bone>() - 4usize];
    ["Offset of field: sspine_bone::skeleton_id"]
        [::std::mem::offset_of!(sspine_bone, skeleton_id) - 0usize];
    ["Offset of field: sspine_bone::index"][::std::mem::offset_of!(sspine_bone, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_slot {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_slot"][::std::mem::size_of::<sspine_slot>() - 8usize];
    ["Alignment of sspine_slot"][::std::mem::align_of::<sspine_slot>() - 4usize];
    ["Offset of field: sspine_slot::skeleton_id"]
        [::std::mem::offset_of!(sspine_slot, skeleton_id) - 0usize];
    ["Offset of field: sspine_slot::index"][::std::mem::offset_of!(sspine_slot, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_event {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_event"][::std::mem::size_of::<sspine_event>() - 8usize];
    ["Alignment of sspine_event"][::std::mem::align_of::<sspine_event>() - 4usize];
    ["Offset of field: sspine_event::skeleton_id"]
        [::std::mem::offset_of!(sspine_event, skeleton_id) - 0usize];
    ["Offset of field: sspine_event::index"][::std::mem::offset_of!(sspine_event, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_iktarget {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_iktarget"][::std::mem::size_of::<sspine_iktarget>() - 8usize];
    ["Alignment of sspine_iktarget"][::std::mem::align_of::<sspine_iktarget>() - 4usize];
    ["Offset of field: sspine_iktarget::skeleton_id"]
        [::std::mem::offset_of!(sspine_iktarget, skeleton_id) - 0usize];
    ["Offset of field: sspine_iktarget::index"]
        [::std::mem::offset_of!(sspine_iktarget, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skin {
    pub skeleton_id: u32,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skin"][::std::mem::size_of::<sspine_skin>() - 8usize];
    ["Alignment of sspine_skin"][::std::mem::align_of::<sspine_skin>() - 4usize];
    ["Offset of field: sspine_skin::skeleton_id"]
        [::std::mem::offset_of!(sspine_skin, skeleton_id) - 0usize];
    ["Offset of field: sspine_skin::index"][::std::mem::offset_of!(sspine_skin, index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_range"][::std::mem::size_of::<sspine_range>() - 8usize];
    ["Alignment of sspine_range"][::std::mem::align_of::<sspine_range>() - 4usize];
    ["Offset of field: sspine_range::ptr"][::std::mem::offset_of!(sspine_range, ptr) - 0usize];
    ["Offset of field: sspine_range::size"][::std::mem::offset_of!(sspine_range, size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_vec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_vec2"][::std::mem::size_of::<sspine_vec2>() - 8usize];
    ["Alignment of sspine_vec2"][::std::mem::align_of::<sspine_vec2>() - 4usize];
    ["Offset of field: sspine_vec2::x"][::std::mem::offset_of!(sspine_vec2, x) - 0usize];
    ["Offset of field: sspine_vec2::y"][::std::mem::offset_of!(sspine_vec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_mat4 {
    pub m: [f32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_mat4"][::std::mem::size_of::<sspine_mat4>() - 64usize];
    ["Alignment of sspine_mat4"][::std::mem::align_of::<sspine_mat4>() - 4usize];
    ["Offset of field: sspine_mat4::m"][::std::mem::offset_of!(sspine_mat4, m) - 0usize];
};
pub type sspine_color = sg_color;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_string {
    pub valid: bool,
    pub truncated: bool,
    pub len: u8,
    pub cstr: [::std::os::raw::c_char; 61usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_string"][::std::mem::size_of::<sspine_string>() - 64usize];
    ["Alignment of sspine_string"][::std::mem::align_of::<sspine_string>() - 1usize];
    ["Offset of field: sspine_string::valid"]
        [::std::mem::offset_of!(sspine_string, valid) - 0usize];
    ["Offset of field: sspine_string::truncated"]
        [::std::mem::offset_of!(sspine_string, truncated) - 1usize];
    ["Offset of field: sspine_string::len"][::std::mem::offset_of!(sspine_string, len) - 2usize];
    ["Offset of field: sspine_string::cstr"][::std::mem::offset_of!(sspine_string, cstr) - 3usize];
};
pub const sspine_resource_state_SSPINE_RESOURCESTATE_INITIAL: sspine_resource_state = 0;
pub const sspine_resource_state_SSPINE_RESOURCESTATE_ALLOC: sspine_resource_state = 1;
pub const sspine_resource_state_SSPINE_RESOURCESTATE_VALID: sspine_resource_state = 2;
pub const sspine_resource_state_SSPINE_RESOURCESTATE_FAILED: sspine_resource_state = 3;
pub const sspine_resource_state_SSPINE_RESOURCESTATE_INVALID: sspine_resource_state = 4;
pub const sspine_resource_state__SSPINE_RESOURCESTATE_FORCE_U32: sspine_resource_state = 2147483647;
pub type sspine_resource_state = ::std::os::raw::c_int;
pub const sspine_log_item_SSPINE_LOGITEM_OK: sspine_log_item = 0;
pub const sspine_log_item_SSPINE_LOGITEM_MALLOC_FAILED: sspine_log_item = 1;
pub const sspine_log_item_SSPINE_LOGITEM_CONTEXT_POOL_EXHAUSTED: sspine_log_item = 2;
pub const sspine_log_item_SSPINE_LOGITEM_ATLAS_POOL_EXHAUSTED: sspine_log_item = 3;
pub const sspine_log_item_SSPINE_LOGITEM_SKELETON_POOL_EXHAUSTED: sspine_log_item = 4;
pub const sspine_log_item_SSPINE_LOGITEM_SKINSET_POOL_EXHAUSTED: sspine_log_item = 5;
pub const sspine_log_item_SSPINE_LOGITEM_INSTANCE_POOL_EXHAUSTED: sspine_log_item = 6;
pub const sspine_log_item_SSPINE_LOGITEM_CANNOT_DESTROY_DEFAULT_CONTEXT: sspine_log_item = 7;
pub const sspine_log_item_SSPINE_LOGITEM_ATLAS_DESC_NO_DATA: sspine_log_item = 8;
pub const sspine_log_item_SSPINE_LOGITEM_SPINE_ATLAS_CREATION_FAILED: sspine_log_item = 9;
pub const sspine_log_item_SSPINE_LOGITEM_SG_ALLOC_IMAGE_FAILED: sspine_log_item = 10;
pub const sspine_log_item_SSPINE_LOGITEM_SG_ALLOC_SAMPLER_FAILED: sspine_log_item = 11;
pub const sspine_log_item_SSPINE_LOGITEM_SKELETON_DESC_NO_DATA: sspine_log_item = 12;
pub const sspine_log_item_SSPINE_LOGITEM_SKELETON_DESC_NO_ATLAS: sspine_log_item = 13;
pub const sspine_log_item_SSPINE_LOGITEM_SKELETON_ATLAS_NOT_VALID: sspine_log_item = 14;
pub const sspine_log_item_SSPINE_LOGITEM_CREATE_SKELETON_DATA_FROM_JSON_FAILED: sspine_log_item =
    15;
pub const sspine_log_item_SSPINE_LOGITEM_CREATE_SKELETON_DATA_FROM_BINARY_FAILED: sspine_log_item =
    16;
pub const sspine_log_item_SSPINE_LOGITEM_SKINSET_DESC_NO_SKELETON: sspine_log_item = 17;
pub const sspine_log_item_SSPINE_LOGITEM_SKINSET_SKELETON_NOT_VALID: sspine_log_item = 18;
pub const sspine_log_item_SSPINE_LOGITEM_SKINSET_INVALID_SKIN_HANDLE: sspine_log_item = 19;
pub const sspine_log_item_SSPINE_LOGITEM_INSTANCE_DESC_NO_SKELETON: sspine_log_item = 20;
pub const sspine_log_item_SSPINE_LOGITEM_INSTANCE_SKELETON_NOT_VALID: sspine_log_item = 21;
pub const sspine_log_item_SSPINE_LOGITEM_INSTANCE_ATLAS_NOT_VALID: sspine_log_item = 22;
pub const sspine_log_item_SSPINE_LOGITEM_SPINE_SKELETON_CREATION_FAILED: sspine_log_item = 23;
pub const sspine_log_item_SSPINE_LOGITEM_SPINE_ANIMATIONSTATE_CREATION_FAILED: sspine_log_item = 24;
pub const sspine_log_item_SSPINE_LOGITEM_SPINE_SKELETONCLIPPING_CREATION_FAILED: sspine_log_item =
    25;
pub const sspine_log_item_SSPINE_LOGITEM_COMMAND_BUFFER_FULL: sspine_log_item = 26;
pub const sspine_log_item_SSPINE_LOGITEM_VERTEX_BUFFER_FULL: sspine_log_item = 27;
pub const sspine_log_item_SSPINE_LOGITEM_INDEX_BUFFER_FULL: sspine_log_item = 28;
pub const sspine_log_item_SSPINE_LOGITEM_STRING_TRUNCATED: sspine_log_item = 29;
pub const sspine_log_item_SSPINE_LOGITEM_ADD_COMMIT_LISTENER_FAILED: sspine_log_item = 30;
pub type sspine_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_layer_transform {
    pub size: sspine_vec2,
    pub origin: sspine_vec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_layer_transform"][::std::mem::size_of::<sspine_layer_transform>() - 16usize];
    ["Alignment of sspine_layer_transform"]
        [::std::mem::align_of::<sspine_layer_transform>() - 4usize];
    ["Offset of field: sspine_layer_transform::size"]
        [::std::mem::offset_of!(sspine_layer_transform, size) - 0usize];
    ["Offset of field: sspine_layer_transform::origin"]
        [::std::mem::offset_of!(sspine_layer_transform, origin) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_bone_transform {
    pub position: sspine_vec2,
    pub rotation: f32,
    pub scale: sspine_vec2,
    pub shear: sspine_vec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_bone_transform"][::std::mem::size_of::<sspine_bone_transform>() - 28usize];
    ["Alignment of sspine_bone_transform"]
        [::std::mem::align_of::<sspine_bone_transform>() - 4usize];
    ["Offset of field: sspine_bone_transform::position"]
        [::std::mem::offset_of!(sspine_bone_transform, position) - 0usize];
    ["Offset of field: sspine_bone_transform::rotation"]
        [::std::mem::offset_of!(sspine_bone_transform, rotation) - 8usize];
    ["Offset of field: sspine_bone_transform::scale"]
        [::std::mem::offset_of!(sspine_bone_transform, scale) - 12usize];
    ["Offset of field: sspine_bone_transform::shear"]
        [::std::mem::offset_of!(sspine_bone_transform, shear) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_context_desc {
    pub max_vertices: ::std::os::raw::c_int,
    pub max_commands: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub color_write_mask: sg_color_mask,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_context_desc"][::std::mem::size_of::<sspine_context_desc>() - 24usize];
    ["Alignment of sspine_context_desc"][::std::mem::align_of::<sspine_context_desc>() - 4usize];
    ["Offset of field: sspine_context_desc::max_vertices"]
        [::std::mem::offset_of!(sspine_context_desc, max_vertices) - 0usize];
    ["Offset of field: sspine_context_desc::max_commands"]
        [::std::mem::offset_of!(sspine_context_desc, max_commands) - 4usize];
    ["Offset of field: sspine_context_desc::color_format"]
        [::std::mem::offset_of!(sspine_context_desc, color_format) - 8usize];
    ["Offset of field: sspine_context_desc::depth_format"]
        [::std::mem::offset_of!(sspine_context_desc, depth_format) - 12usize];
    ["Offset of field: sspine_context_desc::sample_count"]
        [::std::mem::offset_of!(sspine_context_desc, sample_count) - 16usize];
    ["Offset of field: sspine_context_desc::color_write_mask"]
        [::std::mem::offset_of!(sspine_context_desc, color_write_mask) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_context_info {
    pub num_vertices: ::std::os::raw::c_int,
    pub num_indices: ::std::os::raw::c_int,
    pub num_commands: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_context_info"][::std::mem::size_of::<sspine_context_info>() - 12usize];
    ["Alignment of sspine_context_info"][::std::mem::align_of::<sspine_context_info>() - 4usize];
    ["Offset of field: sspine_context_info::num_vertices"]
        [::std::mem::offset_of!(sspine_context_info, num_vertices) - 0usize];
    ["Offset of field: sspine_context_info::num_indices"]
        [::std::mem::offset_of!(sspine_context_info, num_indices) - 4usize];
    ["Offset of field: sspine_context_info::num_commands"]
        [::std::mem::offset_of!(sspine_context_info, num_commands) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_image_info {
    pub valid: bool,
    pub sgimage: sg_image,
    pub sgsampler: sg_sampler,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub premul_alpha: bool,
    pub filename: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_image_info"][::std::mem::size_of::<sspine_image_info>() - 108usize];
    ["Alignment of sspine_image_info"][::std::mem::align_of::<sspine_image_info>() - 4usize];
    ["Offset of field: sspine_image_info::valid"]
        [::std::mem::offset_of!(sspine_image_info, valid) - 0usize];
    ["Offset of field: sspine_image_info::sgimage"]
        [::std::mem::offset_of!(sspine_image_info, sgimage) - 4usize];
    ["Offset of field: sspine_image_info::sgsampler"]
        [::std::mem::offset_of!(sspine_image_info, sgsampler) - 8usize];
    ["Offset of field: sspine_image_info::min_filter"]
        [::std::mem::offset_of!(sspine_image_info, min_filter) - 12usize];
    ["Offset of field: sspine_image_info::mag_filter"]
        [::std::mem::offset_of!(sspine_image_info, mag_filter) - 16usize];
    ["Offset of field: sspine_image_info::mipmap_filter"]
        [::std::mem::offset_of!(sspine_image_info, mipmap_filter) - 20usize];
    ["Offset of field: sspine_image_info::wrap_u"]
        [::std::mem::offset_of!(sspine_image_info, wrap_u) - 24usize];
    ["Offset of field: sspine_image_info::wrap_v"]
        [::std::mem::offset_of!(sspine_image_info, wrap_v) - 28usize];
    ["Offset of field: sspine_image_info::width"]
        [::std::mem::offset_of!(sspine_image_info, width) - 32usize];
    ["Offset of field: sspine_image_info::height"]
        [::std::mem::offset_of!(sspine_image_info, height) - 36usize];
    ["Offset of field: sspine_image_info::premul_alpha"]
        [::std::mem::offset_of!(sspine_image_info, premul_alpha) - 40usize];
    ["Offset of field: sspine_image_info::filename"]
        [::std::mem::offset_of!(sspine_image_info, filename) - 41usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_atlas_overrides {
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub premul_alpha_enabled: bool,
    pub premul_alpha_disabled: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_atlas_overrides"][::std::mem::size_of::<sspine_atlas_overrides>() - 24usize];
    ["Alignment of sspine_atlas_overrides"]
        [::std::mem::align_of::<sspine_atlas_overrides>() - 4usize];
    ["Offset of field: sspine_atlas_overrides::min_filter"]
        [::std::mem::offset_of!(sspine_atlas_overrides, min_filter) - 0usize];
    ["Offset of field: sspine_atlas_overrides::mag_filter"]
        [::std::mem::offset_of!(sspine_atlas_overrides, mag_filter) - 4usize];
    ["Offset of field: sspine_atlas_overrides::mipmap_filter"]
        [::std::mem::offset_of!(sspine_atlas_overrides, mipmap_filter) - 8usize];
    ["Offset of field: sspine_atlas_overrides::wrap_u"]
        [::std::mem::offset_of!(sspine_atlas_overrides, wrap_u) - 12usize];
    ["Offset of field: sspine_atlas_overrides::wrap_v"]
        [::std::mem::offset_of!(sspine_atlas_overrides, wrap_v) - 16usize];
    ["Offset of field: sspine_atlas_overrides::premul_alpha_enabled"]
        [::std::mem::offset_of!(sspine_atlas_overrides, premul_alpha_enabled) - 20usize];
    ["Offset of field: sspine_atlas_overrides::premul_alpha_disabled"]
        [::std::mem::offset_of!(sspine_atlas_overrides, premul_alpha_disabled) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_atlas_desc {
    pub data: sspine_range,
    pub override_: sspine_atlas_overrides,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_atlas_desc"][::std::mem::size_of::<sspine_atlas_desc>() - 32usize];
    ["Alignment of sspine_atlas_desc"][::std::mem::align_of::<sspine_atlas_desc>() - 4usize];
    ["Offset of field: sspine_atlas_desc::data"]
        [::std::mem::offset_of!(sspine_atlas_desc, data) - 0usize];
    ["Offset of field: sspine_atlas_desc::override_"]
        [::std::mem::offset_of!(sspine_atlas_desc, override_) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_atlas_page_info {
    pub valid: bool,
    pub atlas: sspine_atlas,
    pub image: sspine_image_info,
    pub overrides: sspine_atlas_overrides,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_atlas_page_info"][::std::mem::size_of::<sspine_atlas_page_info>() - 140usize];
    ["Alignment of sspine_atlas_page_info"]
        [::std::mem::align_of::<sspine_atlas_page_info>() - 4usize];
    ["Offset of field: sspine_atlas_page_info::valid"]
        [::std::mem::offset_of!(sspine_atlas_page_info, valid) - 0usize];
    ["Offset of field: sspine_atlas_page_info::atlas"]
        [::std::mem::offset_of!(sspine_atlas_page_info, atlas) - 4usize];
    ["Offset of field: sspine_atlas_page_info::image"]
        [::std::mem::offset_of!(sspine_atlas_page_info, image) - 8usize];
    ["Offset of field: sspine_atlas_page_info::overrides"]
        [::std::mem::offset_of!(sspine_atlas_page_info, overrides) - 116usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skeleton_desc {
    pub atlas: sspine_atlas,
    pub prescale: f32,
    pub anim_default_mix: f32,
    pub json_data: *const ::std::os::raw::c_char,
    pub binary_data: sspine_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skeleton_desc"][::std::mem::size_of::<sspine_skeleton_desc>() - 24usize];
    ["Alignment of sspine_skeleton_desc"][::std::mem::align_of::<sspine_skeleton_desc>() - 4usize];
    ["Offset of field: sspine_skeleton_desc::atlas"]
        [::std::mem::offset_of!(sspine_skeleton_desc, atlas) - 0usize];
    ["Offset of field: sspine_skeleton_desc::prescale"]
        [::std::mem::offset_of!(sspine_skeleton_desc, prescale) - 4usize];
    ["Offset of field: sspine_skeleton_desc::anim_default_mix"]
        [::std::mem::offset_of!(sspine_skeleton_desc, anim_default_mix) - 8usize];
    ["Offset of field: sspine_skeleton_desc::json_data"]
        [::std::mem::offset_of!(sspine_skeleton_desc, json_data) - 12usize];
    ["Offset of field: sspine_skeleton_desc::binary_data"]
        [::std::mem::offset_of!(sspine_skeleton_desc, binary_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skinset_desc {
    pub skeleton: sspine_skeleton,
    pub skins: [sspine_skin; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skinset_desc"][::std::mem::size_of::<sspine_skinset_desc>() - 260usize];
    ["Alignment of sspine_skinset_desc"][::std::mem::align_of::<sspine_skinset_desc>() - 4usize];
    ["Offset of field: sspine_skinset_desc::skeleton"]
        [::std::mem::offset_of!(sspine_skinset_desc, skeleton) - 0usize];
    ["Offset of field: sspine_skinset_desc::skins"]
        [::std::mem::offset_of!(sspine_skinset_desc, skins) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_anim_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub duration: f32,
    pub name: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_anim_info"][::std::mem::size_of::<sspine_anim_info>() - 76usize];
    ["Alignment of sspine_anim_info"][::std::mem::align_of::<sspine_anim_info>() - 4usize];
    ["Offset of field: sspine_anim_info::valid"]
        [::std::mem::offset_of!(sspine_anim_info, valid) - 0usize];
    ["Offset of field: sspine_anim_info::index"]
        [::std::mem::offset_of!(sspine_anim_info, index) - 4usize];
    ["Offset of field: sspine_anim_info::duration"]
        [::std::mem::offset_of!(sspine_anim_info, duration) - 8usize];
    ["Offset of field: sspine_anim_info::name"]
        [::std::mem::offset_of!(sspine_anim_info, name) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_bone_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub parent_bone: sspine_bone,
    pub length: f32,
    pub pose: sspine_bone_transform,
    pub color: sspine_color,
    pub name: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_bone_info"][::std::mem::size_of::<sspine_bone_info>() - 128usize];
    ["Alignment of sspine_bone_info"][::std::mem::align_of::<sspine_bone_info>() - 4usize];
    ["Offset of field: sspine_bone_info::valid"]
        [::std::mem::offset_of!(sspine_bone_info, valid) - 0usize];
    ["Offset of field: sspine_bone_info::index"]
        [::std::mem::offset_of!(sspine_bone_info, index) - 4usize];
    ["Offset of field: sspine_bone_info::parent_bone"]
        [::std::mem::offset_of!(sspine_bone_info, parent_bone) - 8usize];
    ["Offset of field: sspine_bone_info::length"]
        [::std::mem::offset_of!(sspine_bone_info, length) - 16usize];
    ["Offset of field: sspine_bone_info::pose"]
        [::std::mem::offset_of!(sspine_bone_info, pose) - 20usize];
    ["Offset of field: sspine_bone_info::color"]
        [::std::mem::offset_of!(sspine_bone_info, color) - 48usize];
    ["Offset of field: sspine_bone_info::name"]
        [::std::mem::offset_of!(sspine_bone_info, name) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_slot_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub bone: sspine_bone,
    pub color: sspine_color,
    pub attachment_name: sspine_string,
    pub name: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_slot_info"][::std::mem::size_of::<sspine_slot_info>() - 160usize];
    ["Alignment of sspine_slot_info"][::std::mem::align_of::<sspine_slot_info>() - 4usize];
    ["Offset of field: sspine_slot_info::valid"]
        [::std::mem::offset_of!(sspine_slot_info, valid) - 0usize];
    ["Offset of field: sspine_slot_info::index"]
        [::std::mem::offset_of!(sspine_slot_info, index) - 4usize];
    ["Offset of field: sspine_slot_info::bone"]
        [::std::mem::offset_of!(sspine_slot_info, bone) - 8usize];
    ["Offset of field: sspine_slot_info::color"]
        [::std::mem::offset_of!(sspine_slot_info, color) - 16usize];
    ["Offset of field: sspine_slot_info::attachment_name"]
        [::std::mem::offset_of!(sspine_slot_info, attachment_name) - 32usize];
    ["Offset of field: sspine_slot_info::name"]
        [::std::mem::offset_of!(sspine_slot_info, name) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_iktarget_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub target_bone: sspine_bone,
    pub name: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_iktarget_info"][::std::mem::size_of::<sspine_iktarget_info>() - 80usize];
    ["Alignment of sspine_iktarget_info"][::std::mem::align_of::<sspine_iktarget_info>() - 4usize];
    ["Offset of field: sspine_iktarget_info::valid"]
        [::std::mem::offset_of!(sspine_iktarget_info, valid) - 0usize];
    ["Offset of field: sspine_iktarget_info::index"]
        [::std::mem::offset_of!(sspine_iktarget_info, index) - 4usize];
    ["Offset of field: sspine_iktarget_info::target_bone"]
        [::std::mem::offset_of!(sspine_iktarget_info, target_bone) - 8usize];
    ["Offset of field: sspine_iktarget_info::name"]
        [::std::mem::offset_of!(sspine_iktarget_info, name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_skin_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub name: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_skin_info"][::std::mem::size_of::<sspine_skin_info>() - 72usize];
    ["Alignment of sspine_skin_info"][::std::mem::align_of::<sspine_skin_info>() - 4usize];
    ["Offset of field: sspine_skin_info::valid"]
        [::std::mem::offset_of!(sspine_skin_info, valid) - 0usize];
    ["Offset of field: sspine_skin_info::index"]
        [::std::mem::offset_of!(sspine_skin_info, index) - 4usize];
    ["Offset of field: sspine_skin_info::name"]
        [::std::mem::offset_of!(sspine_skin_info, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_event_info {
    pub valid: bool,
    pub index: ::std::os::raw::c_int,
    pub int_value: ::std::os::raw::c_int,
    pub float_value: f32,
    pub volume: f32,
    pub balance: f32,
    pub name: sspine_string,
    pub string_value: sspine_string,
    pub audio_path: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_event_info"][::std::mem::size_of::<sspine_event_info>() - 216usize];
    ["Alignment of sspine_event_info"][::std::mem::align_of::<sspine_event_info>() - 4usize];
    ["Offset of field: sspine_event_info::valid"]
        [::std::mem::offset_of!(sspine_event_info, valid) - 0usize];
    ["Offset of field: sspine_event_info::index"]
        [::std::mem::offset_of!(sspine_event_info, index) - 4usize];
    ["Offset of field: sspine_event_info::int_value"]
        [::std::mem::offset_of!(sspine_event_info, int_value) - 8usize];
    ["Offset of field: sspine_event_info::float_value"]
        [::std::mem::offset_of!(sspine_event_info, float_value) - 12usize];
    ["Offset of field: sspine_event_info::volume"]
        [::std::mem::offset_of!(sspine_event_info, volume) - 16usize];
    ["Offset of field: sspine_event_info::balance"]
        [::std::mem::offset_of!(sspine_event_info, balance) - 20usize];
    ["Offset of field: sspine_event_info::name"]
        [::std::mem::offset_of!(sspine_event_info, name) - 24usize];
    ["Offset of field: sspine_event_info::string_value"]
        [::std::mem::offset_of!(sspine_event_info, string_value) - 88usize];
    ["Offset of field: sspine_event_info::audio_path"]
        [::std::mem::offset_of!(sspine_event_info, audio_path) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_triggered_event_info {
    pub valid: bool,
    pub event: sspine_event,
    pub time: f32,
    pub int_value: ::std::os::raw::c_int,
    pub float_value: f32,
    pub volume: f32,
    pub balance: f32,
    pub string_value: sspine_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_triggered_event_info"]
        [::std::mem::size_of::<sspine_triggered_event_info>() - 96usize];
    ["Alignment of sspine_triggered_event_info"]
        [::std::mem::align_of::<sspine_triggered_event_info>() - 4usize];
    ["Offset of field: sspine_triggered_event_info::valid"]
        [::std::mem::offset_of!(sspine_triggered_event_info, valid) - 0usize];
    ["Offset of field: sspine_triggered_event_info::event"]
        [::std::mem::offset_of!(sspine_triggered_event_info, event) - 4usize];
    ["Offset of field: sspine_triggered_event_info::time"]
        [::std::mem::offset_of!(sspine_triggered_event_info, time) - 12usize];
    ["Offset of field: sspine_triggered_event_info::int_value"]
        [::std::mem::offset_of!(sspine_triggered_event_info, int_value) - 16usize];
    ["Offset of field: sspine_triggered_event_info::float_value"]
        [::std::mem::offset_of!(sspine_triggered_event_info, float_value) - 20usize];
    ["Offset of field: sspine_triggered_event_info::volume"]
        [::std::mem::offset_of!(sspine_triggered_event_info, volume) - 24usize];
    ["Offset of field: sspine_triggered_event_info::balance"]
        [::std::mem::offset_of!(sspine_triggered_event_info, balance) - 28usize];
    ["Offset of field: sspine_triggered_event_info::string_value"]
        [::std::mem::offset_of!(sspine_triggered_event_info, string_value) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_instance_desc {
    pub skeleton: sspine_skeleton,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_instance_desc"][::std::mem::size_of::<sspine_instance_desc>() - 4usize];
    ["Alignment of sspine_instance_desc"][::std::mem::align_of::<sspine_instance_desc>() - 4usize];
    ["Offset of field: sspine_instance_desc::skeleton"]
        [::std::mem::offset_of!(sspine_instance_desc, skeleton) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_allocator"][::std::mem::size_of::<sspine_allocator>() - 12usize];
    ["Alignment of sspine_allocator"][::std::mem::align_of::<sspine_allocator>() - 4usize];
    ["Offset of field: sspine_allocator::alloc_fn"]
        [::std::mem::offset_of!(sspine_allocator, alloc_fn) - 0usize];
    ["Offset of field: sspine_allocator::free_fn"]
        [::std::mem::offset_of!(sspine_allocator, free_fn) - 4usize];
    ["Offset of field: sspine_allocator::user_data"]
        [::std::mem::offset_of!(sspine_allocator, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_logger"][::std::mem::size_of::<sspine_logger>() - 8usize];
    ["Alignment of sspine_logger"][::std::mem::align_of::<sspine_logger>() - 4usize];
    ["Offset of field: sspine_logger::func"][::std::mem::offset_of!(sspine_logger, func) - 0usize];
    ["Offset of field: sspine_logger::user_data"]
        [::std::mem::offset_of!(sspine_logger, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sspine_desc {
    pub max_vertices: ::std::os::raw::c_int,
    pub max_commands: ::std::os::raw::c_int,
    pub context_pool_size: ::std::os::raw::c_int,
    pub atlas_pool_size: ::std::os::raw::c_int,
    pub skeleton_pool_size: ::std::os::raw::c_int,
    pub skinset_pool_size: ::std::os::raw::c_int,
    pub instance_pool_size: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub color_write_mask: sg_color_mask,
    pub allocator: sspine_allocator,
    pub logger: sspine_logger,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sspine_desc"][::std::mem::size_of::<sspine_desc>() - 64usize];
    ["Alignment of sspine_desc"][::std::mem::align_of::<sspine_desc>() - 4usize];
    ["Offset of field: sspine_desc::max_vertices"]
        [::std::mem::offset_of!(sspine_desc, max_vertices) - 0usize];
    ["Offset of field: sspine_desc::max_commands"]
        [::std::mem::offset_of!(sspine_desc, max_commands) - 4usize];
    ["Offset of field: sspine_desc::context_pool_size"]
        [::std::mem::offset_of!(sspine_desc, context_pool_size) - 8usize];
    ["Offset of field: sspine_desc::atlas_pool_size"]
        [::std::mem::offset_of!(sspine_desc, atlas_pool_size) - 12usize];
    ["Offset of field: sspine_desc::skeleton_pool_size"]
        [::std::mem::offset_of!(sspine_desc, skeleton_pool_size) - 16usize];
    ["Offset of field: sspine_desc::skinset_pool_size"]
        [::std::mem::offset_of!(sspine_desc, skinset_pool_size) - 20usize];
    ["Offset of field: sspine_desc::instance_pool_size"]
        [::std::mem::offset_of!(sspine_desc, instance_pool_size) - 24usize];
    ["Offset of field: sspine_desc::color_format"]
        [::std::mem::offset_of!(sspine_desc, color_format) - 28usize];
    ["Offset of field: sspine_desc::depth_format"]
        [::std::mem::offset_of!(sspine_desc, depth_format) - 32usize];
    ["Offset of field: sspine_desc::sample_count"]
        [::std::mem::offset_of!(sspine_desc, sample_count) - 36usize];
    ["Offset of field: sspine_desc::color_write_mask"]
        [::std::mem::offset_of!(sspine_desc, color_write_mask) - 40usize];
    ["Offset of field: sspine_desc::allocator"]
        [::std::mem::offset_of!(sspine_desc, allocator) - 44usize];
    ["Offset of field: sspine_desc::logger"][::std::mem::offset_of!(sspine_desc, logger) - 56usize];
};
unsafe extern "C" {
    pub fn sspine_setup(desc: *const sspine_desc);
}
unsafe extern "C" {
    pub fn sspine_shutdown();
}
unsafe extern "C" {
    pub fn sspine_make_context(desc: *const sspine_context_desc) -> sspine_context;
}
unsafe extern "C" {
    pub fn sspine_destroy_context(ctx: sspine_context);
}
unsafe extern "C" {
    pub fn sspine_set_context(ctx: sspine_context);
}
unsafe extern "C" {
    pub fn sspine_get_context() -> sspine_context;
}
unsafe extern "C" {
    pub fn sspine_default_context() -> sspine_context;
}
unsafe extern "C" {
    pub fn sspine_get_context_info(ctx: sspine_context) -> sspine_context_info;
}
unsafe extern "C" {
    pub fn sspine_make_atlas(desc: *const sspine_atlas_desc) -> sspine_atlas;
}
unsafe extern "C" {
    pub fn sspine_make_skeleton(desc: *const sspine_skeleton_desc) -> sspine_skeleton;
}
unsafe extern "C" {
    pub fn sspine_make_skinset(desc: *const sspine_skinset_desc) -> sspine_skinset;
}
unsafe extern "C" {
    pub fn sspine_make_instance(desc: *const sspine_instance_desc) -> sspine_instance;
}
unsafe extern "C" {
    pub fn sspine_destroy_atlas(atlas: sspine_atlas);
}
unsafe extern "C" {
    pub fn sspine_destroy_skeleton(skeleton: sspine_skeleton);
}
unsafe extern "C" {
    pub fn sspine_destroy_skinset(skinset: sspine_skinset);
}
unsafe extern "C" {
    pub fn sspine_destroy_instance(instance: sspine_instance);
}
unsafe extern "C" {
    pub fn sspine_set_skinset(instance: sspine_instance, skinset: sspine_skinset);
}
unsafe extern "C" {
    pub fn sspine_update_instance(instance: sspine_instance, delta_time: f32);
}
unsafe extern "C" {
    pub fn sspine_num_triggered_events(instance: sspine_instance) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_get_triggered_event_info(
        instance: sspine_instance,
        triggered_event_index: ::std::os::raw::c_int,
    ) -> sspine_triggered_event_info;
}
unsafe extern "C" {
    pub fn sspine_draw_instance_in_layer(instance: sspine_instance, layer: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sspine_context_draw_instance_in_layer(
        ctx: sspine_context,
        instance: sspine_instance,
        layer: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sspine_layer_transform_to_mat4(tform: *const sspine_layer_transform) -> sspine_mat4;
}
unsafe extern "C" {
    pub fn sspine_draw_layer(layer: ::std::os::raw::c_int, tform: *const sspine_layer_transform);
}
unsafe extern "C" {
    pub fn sspine_context_draw_layer(
        ctx: sspine_context,
        layer: ::std::os::raw::c_int,
        tform: *const sspine_layer_transform,
    );
}
unsafe extern "C" {
    pub fn sspine_get_context_resource_state(context: sspine_context) -> sspine_resource_state;
}
unsafe extern "C" {
    pub fn sspine_get_atlas_resource_state(atlas: sspine_atlas) -> sspine_resource_state;
}
unsafe extern "C" {
    pub fn sspine_get_skeleton_resource_state(skeleton: sspine_skeleton) -> sspine_resource_state;
}
unsafe extern "C" {
    pub fn sspine_get_skinset_resource_state(skinset: sspine_skinset) -> sspine_resource_state;
}
unsafe extern "C" {
    pub fn sspine_get_instance_resource_state(instance: sspine_instance) -> sspine_resource_state;
}
unsafe extern "C" {
    pub fn sspine_context_valid(context: sspine_context) -> bool;
}
unsafe extern "C" {
    pub fn sspine_atlas_valid(atlas: sspine_atlas) -> bool;
}
unsafe extern "C" {
    pub fn sspine_skeleton_valid(skeleton: sspine_skeleton) -> bool;
}
unsafe extern "C" {
    pub fn sspine_instance_valid(instance: sspine_instance) -> bool;
}
unsafe extern "C" {
    pub fn sspine_skinset_valid(skinset: sspine_skinset) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_skeleton_atlas(skeleton: sspine_skeleton) -> sspine_atlas;
}
unsafe extern "C" {
    pub fn sspine_get_instance_skeleton(instance: sspine_instance) -> sspine_skeleton;
}
unsafe extern "C" {
    pub fn sspine_num_images(atlas: sspine_atlas) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_image_by_index(atlas: sspine_atlas, index: ::std::os::raw::c_int)
        -> sspine_image;
}
unsafe extern "C" {
    pub fn sspine_image_valid(image: sspine_image) -> bool;
}
unsafe extern "C" {
    pub fn sspine_image_equal(first: sspine_image, second: sspine_image) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_image_info(image: sspine_image) -> sspine_image_info;
}
unsafe extern "C" {
    pub fn sspine_num_atlas_pages(atlas: sspine_atlas) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_atlas_page_by_index(
        atlas: sspine_atlas,
        index: ::std::os::raw::c_int,
    ) -> sspine_atlas_page;
}
unsafe extern "C" {
    pub fn sspine_atlas_page_valid(page: sspine_atlas_page) -> bool;
}
unsafe extern "C" {
    pub fn sspine_atlas_page_equal(first: sspine_atlas_page, second: sspine_atlas_page) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_atlas_page_info(page: sspine_atlas_page) -> sspine_atlas_page_info;
}
unsafe extern "C" {
    pub fn sspine_set_position(instance: sspine_instance, position: sspine_vec2);
}
unsafe extern "C" {
    pub fn sspine_set_scale(instance: sspine_instance, scale: sspine_vec2);
}
unsafe extern "C" {
    pub fn sspine_set_color(instance: sspine_instance, color: sspine_color);
}
unsafe extern "C" {
    pub fn sspine_get_position(instance: sspine_instance) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_get_scale(instance: sspine_instance) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_get_color(instance: sspine_instance) -> sspine_color;
}
unsafe extern "C" {
    pub fn sspine_num_anims(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_anim_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_anim;
}
unsafe extern "C" {
    pub fn sspine_anim_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_anim;
}
unsafe extern "C" {
    pub fn sspine_anim_valid(anim: sspine_anim) -> bool;
}
unsafe extern "C" {
    pub fn sspine_anim_equal(first: sspine_anim, second: sspine_anim) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_anim_info(anim: sspine_anim) -> sspine_anim_info;
}
unsafe extern "C" {
    pub fn sspine_clear_animation_tracks(instance: sspine_instance);
}
unsafe extern "C" {
    pub fn sspine_clear_animation_track(
        instance: sspine_instance,
        track_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sspine_set_animation(
        instance: sspine_instance,
        anim: sspine_anim,
        track_index: ::std::os::raw::c_int,
        loop_: bool,
    );
}
unsafe extern "C" {
    pub fn sspine_add_animation(
        instance: sspine_instance,
        anim: sspine_anim,
        track_index: ::std::os::raw::c_int,
        loop_: bool,
        delay: f32,
    );
}
unsafe extern "C" {
    pub fn sspine_set_empty_animation(
        instance: sspine_instance,
        track_index: ::std::os::raw::c_int,
        mix_duration: f32,
    );
}
unsafe extern "C" {
    pub fn sspine_add_empty_animation(
        instance: sspine_instance,
        track_index: ::std::os::raw::c_int,
        mix_duration: f32,
        delay: f32,
    );
}
unsafe extern "C" {
    pub fn sspine_num_bones(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_bone_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_bone;
}
unsafe extern "C" {
    pub fn sspine_bone_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_bone;
}
unsafe extern "C" {
    pub fn sspine_bone_valid(bone: sspine_bone) -> bool;
}
unsafe extern "C" {
    pub fn sspine_bone_equal(first: sspine_bone, second: sspine_bone) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_bone_info(bone: sspine_bone) -> sspine_bone_info;
}
unsafe extern "C" {
    pub fn sspine_set_bone_transform(
        instance: sspine_instance,
        bone: sspine_bone,
        transform: *const sspine_bone_transform,
    );
}
unsafe extern "C" {
    pub fn sspine_set_bone_position(
        instance: sspine_instance,
        bone: sspine_bone,
        position: sspine_vec2,
    );
}
unsafe extern "C" {
    pub fn sspine_set_bone_rotation(instance: sspine_instance, bone: sspine_bone, rotation: f32);
}
unsafe extern "C" {
    pub fn sspine_set_bone_scale(instance: sspine_instance, bone: sspine_bone, scale: sspine_vec2);
}
unsafe extern "C" {
    pub fn sspine_set_bone_shear(instance: sspine_instance, bone: sspine_bone, shear: sspine_vec2);
}
unsafe extern "C" {
    pub fn sspine_get_bone_transform(
        instance: sspine_instance,
        bone: sspine_bone,
    ) -> sspine_bone_transform;
}
unsafe extern "C" {
    pub fn sspine_get_bone_position(instance: sspine_instance, bone: sspine_bone) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_get_bone_rotation(instance: sspine_instance, bone: sspine_bone) -> f32;
}
unsafe extern "C" {
    pub fn sspine_get_bone_scale(instance: sspine_instance, bone: sspine_bone) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_get_bone_shear(instance: sspine_instance, bone: sspine_bone) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_get_bone_world_position(
        instance: sspine_instance,
        bone: sspine_bone,
    ) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_bone_local_to_world(
        instance: sspine_instance,
        bone: sspine_bone,
        local_pos: sspine_vec2,
    ) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_bone_world_to_local(
        instance: sspine_instance,
        bone: sspine_bone,
        world_pos: sspine_vec2,
    ) -> sspine_vec2;
}
unsafe extern "C" {
    pub fn sspine_num_slots(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_slot_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_slot;
}
unsafe extern "C" {
    pub fn sspine_slot_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_slot;
}
unsafe extern "C" {
    pub fn sspine_slot_valid(slot: sspine_slot) -> bool;
}
unsafe extern "C" {
    pub fn sspine_slot_equal(first: sspine_slot, second: sspine_slot) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_slot_info(slot: sspine_slot) -> sspine_slot_info;
}
unsafe extern "C" {
    pub fn sspine_set_slot_color(instance: sspine_instance, slot: sspine_slot, color: sspine_color);
}
unsafe extern "C" {
    pub fn sspine_get_slot_color(instance: sspine_instance, slot: sspine_slot) -> sspine_color;
}
unsafe extern "C" {
    pub fn sspine_num_events(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_event_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_event;
}
unsafe extern "C" {
    pub fn sspine_event_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_event;
}
unsafe extern "C" {
    pub fn sspine_event_valid(event: sspine_event) -> bool;
}
unsafe extern "C" {
    pub fn sspine_event_equal(first: sspine_event, second: sspine_event) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_event_info(event: sspine_event) -> sspine_event_info;
}
unsafe extern "C" {
    pub fn sspine_num_iktargets(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_iktarget_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_iktarget;
}
unsafe extern "C" {
    pub fn sspine_iktarget_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_iktarget;
}
unsafe extern "C" {
    pub fn sspine_iktarget_valid(iktarget: sspine_iktarget) -> bool;
}
unsafe extern "C" {
    pub fn sspine_iktarget_equal(first: sspine_iktarget, second: sspine_iktarget) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_iktarget_info(iktarget: sspine_iktarget) -> sspine_iktarget_info;
}
unsafe extern "C" {
    pub fn sspine_set_iktarget_world_pos(
        instance: sspine_instance,
        iktarget: sspine_iktarget,
        world_pos: sspine_vec2,
    );
}
unsafe extern "C" {
    pub fn sspine_num_skins(skeleton: sspine_skeleton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sspine_skin_by_name(
        skeleton: sspine_skeleton,
        name: *const ::std::os::raw::c_char,
    ) -> sspine_skin;
}
unsafe extern "C" {
    pub fn sspine_skin_by_index(
        skeleton: sspine_skeleton,
        index: ::std::os::raw::c_int,
    ) -> sspine_skin;
}
unsafe extern "C" {
    pub fn sspine_skin_valid(skin: sspine_skin) -> bool;
}
unsafe extern "C" {
    pub fn sspine_skin_equal(first: sspine_skin, second: sspine_skin) -> bool;
}
unsafe extern "C" {
    pub fn sspine_get_skin_info(skin: sspine_skin) -> sspine_skin_info;
}
unsafe extern "C" {
    pub fn sspine_set_skin(instance: sspine_instance, skin: sspine_skin);
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 12usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 4usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 4usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 8usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 4usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 4usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 4usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 4usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
unsafe extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwchar(_Character: u16) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(
        _Buffer: *mut u16,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn fputws(_Buffer: *const u16, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getws_s(_Buffer: *mut u16, _BufferCount: usize) -> *mut u16;
}
unsafe extern "C" {
    pub fn putwc(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(_Character: u16) -> wint_t;
}
unsafe extern "C" {
    pub fn _putws(_Buffer: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const u16) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen(_FileName: *const u16, _Mode: *const u16) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const u16, _Mode: *const u16) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfreopen(_FileName: *const u16, _Mode: *const u16, _OldStream: *mut FILE) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const u16,
        _Mode: *const u16,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfsopen(
        _FileName: *const u16,
        _Mode: *const u16,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const u16);
}
unsafe extern "C" {
    pub fn _wpopen(_Command: *const u16, _Mode: *const u16) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wremove(_FileName: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtempnam(_Directory: *const u16, _FilePrefix: *const u16) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut u16, _BufferCount: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wtmpnam(_Buffer: *mut u16) -> *mut u16;
}
unsafe extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _putwc_nolock(_Character: u16, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const u16,
        _BufferCount: usize,
        _Format: *const u16,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
unsafe extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivateData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_const_charPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_const_charPtr"][::std::mem::size_of::<ImVector_const_charPtr>() - 12usize];
    ["Alignment of ImVector_const_charPtr"]
        [::std::mem::align_of::<ImVector_const_charPtr>() - 4usize];
    ["Offset of field: ImVector_const_charPtr::Size"]
        [::std::mem::offset_of!(ImVector_const_charPtr, Size) - 0usize];
    ["Offset of field: ImVector_const_charPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_const_charPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_const_charPtr::Data"]
        [::std::mem::offset_of!(ImVector_const_charPtr, Data) - 8usize];
};
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiDir = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiSortDirection = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2"][::std::mem::size_of::<ImVec2>() - 8usize];
    ["Alignment of ImVec2"][::std::mem::align_of::<ImVec2>() - 4usize];
    ["Offset of field: ImVec2::x"][::std::mem::offset_of!(ImVec2, x) - 0usize];
    ["Offset of field: ImVec2::y"][::std::mem::offset_of!(ImVec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec4"][::std::mem::size_of::<ImVec4>() - 16usize];
    ["Alignment of ImVec4"][::std::mem::align_of::<ImVec4>() - 4usize];
    ["Offset of field: ImVec4::x"][::std::mem::offset_of!(ImVec4, x) - 0usize];
    ["Offset of field: ImVec4::y"][::std::mem::offset_of!(ImVec4, y) - 4usize];
    ["Offset of field: ImVec4::z"][::std::mem::offset_of!(ImVec4, z) - 8usize];
    ["Offset of field: ImVec4::w"][::std::mem::offset_of!(ImVec4, w) - 12usize];
};
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiChildFlags__ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags__ImGuiChildFlags_Border: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags__ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub type ImGuiChildFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 1048576;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ =
    262144;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ =
    512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir__ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir__ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir__ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir__ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir__ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir__ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::std::os::raw::c_int;
pub const ImGuiSortDirection__ImGuiSortDirection_None: ImGuiSortDirection_ = 0;
pub const ImGuiSortDirection__ImGuiSortDirection_Ascending: ImGuiSortDirection_ = 1;
pub const ImGuiSortDirection__ImGuiSortDirection_Descending: ImGuiSortDirection_ = 2;
pub type ImGuiSortDirection_ = ::std::os::raw::c_int;
pub const ImGuiKey_ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_ImGuiKey_GamepadStart: ImGuiKey = 631;
pub const ImGuiKey_ImGuiKey_GamepadBack: ImGuiKey = 632;
pub const ImGuiKey_ImGuiKey_GamepadFaceLeft: ImGuiKey = 633;
pub const ImGuiKey_ImGuiKey_GamepadFaceRight: ImGuiKey = 634;
pub const ImGuiKey_ImGuiKey_GamepadFaceUp: ImGuiKey = 635;
pub const ImGuiKey_ImGuiKey_GamepadFaceDown: ImGuiKey = 636;
pub const ImGuiKey_ImGuiKey_GamepadDpadLeft: ImGuiKey = 637;
pub const ImGuiKey_ImGuiKey_GamepadDpadRight: ImGuiKey = 638;
pub const ImGuiKey_ImGuiKey_GamepadDpadUp: ImGuiKey = 639;
pub const ImGuiKey_ImGuiKey_GamepadDpadDown: ImGuiKey = 640;
pub const ImGuiKey_ImGuiKey_GamepadL1: ImGuiKey = 641;
pub const ImGuiKey_ImGuiKey_GamepadR1: ImGuiKey = 642;
pub const ImGuiKey_ImGuiKey_GamepadL2: ImGuiKey = 643;
pub const ImGuiKey_ImGuiKey_GamepadR2: ImGuiKey = 644;
pub const ImGuiKey_ImGuiKey_GamepadL3: ImGuiKey = 645;
pub const ImGuiKey_ImGuiKey_GamepadR3: ImGuiKey = 646;
pub const ImGuiKey_ImGuiKey_GamepadLStickLeft: ImGuiKey = 647;
pub const ImGuiKey_ImGuiKey_GamepadLStickRight: ImGuiKey = 648;
pub const ImGuiKey_ImGuiKey_GamepadLStickUp: ImGuiKey = 649;
pub const ImGuiKey_ImGuiKey_GamepadLStickDown: ImGuiKey = 650;
pub const ImGuiKey_ImGuiKey_GamepadRStickLeft: ImGuiKey = 651;
pub const ImGuiKey_ImGuiKey_GamepadRStickRight: ImGuiKey = 652;
pub const ImGuiKey_ImGuiKey_GamepadRStickUp: ImGuiKey = 653;
pub const ImGuiKey_ImGuiKey_GamepadRStickDown: ImGuiKey = 654;
pub const ImGuiKey_ImGuiKey_MouseLeft: ImGuiKey = 655;
pub const ImGuiKey_ImGuiKey_MouseRight: ImGuiKey = 656;
pub const ImGuiKey_ImGuiKey_MouseMiddle: ImGuiKey = 657;
pub const ImGuiKey_ImGuiKey_MouseX1: ImGuiKey = 658;
pub const ImGuiKey_ImGuiKey_MouseX2: ImGuiKey = 659;
pub const ImGuiKey_ImGuiKey_MouseWheelX: ImGuiKey = 660;
pub const ImGuiKey_ImGuiKey_MouseWheelY: ImGuiKey = 661;
pub const ImGuiKey_ImGuiKey_ReservedForModCtrl: ImGuiKey = 662;
pub const ImGuiKey_ImGuiKey_ReservedForModShift: ImGuiKey = 663;
pub const ImGuiKey_ImGuiKey_ReservedForModAlt: ImGuiKey = 664;
pub const ImGuiKey_ImGuiKey_ReservedForModSuper: ImGuiKey = 665;
pub const ImGuiKey_ImGuiKey_COUNT: ImGuiKey = 666;
pub const ImGuiKey_ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiKey_ImGuiMod_Shortcut: ImGuiKey = 2048;
pub const ImGuiKey_ImGuiMod_Mask_: ImGuiKey = 63488;
pub const ImGuiKey_ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_NamedKey_END: ImGuiKey = 666;
pub const ImGuiKey_ImGuiKey_NamedKey_COUNT: ImGuiKey = 154;
pub const ImGuiKey_ImGuiKey_KeysData_SIZE: ImGuiKey = 154;
pub const ImGuiKey_ImGuiKey_KeysData_OFFSET: ImGuiKey = 512;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 55;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar__ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 30;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub TabBarBorderSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 55usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyle"][::std::mem::size_of::<ImGuiStyle>() - 1132usize];
    ["Alignment of ImGuiStyle"][::std::mem::align_of::<ImGuiStyle>() - 4usize];
    ["Offset of field: ImGuiStyle::Alpha"][::std::mem::offset_of!(ImGuiStyle, Alpha) - 0usize];
    ["Offset of field: ImGuiStyle::DisabledAlpha"]
        [::std::mem::offset_of!(ImGuiStyle, DisabledAlpha) - 4usize];
    ["Offset of field: ImGuiStyle::WindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowPadding) - 8usize];
    ["Offset of field: ImGuiStyle::WindowRounding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowRounding) - 16usize];
    ["Offset of field: ImGuiStyle::WindowBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowBorderSize) - 20usize];
    ["Offset of field: ImGuiStyle::WindowMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMinSize) - 24usize];
    ["Offset of field: ImGuiStyle::WindowTitleAlign"]
        [::std::mem::offset_of!(ImGuiStyle, WindowTitleAlign) - 32usize];
    ["Offset of field: ImGuiStyle::WindowMenuButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMenuButtonPosition) - 40usize];
    ["Offset of field: ImGuiStyle::ChildRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ChildRounding) - 44usize];
    ["Offset of field: ImGuiStyle::ChildBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, ChildBorderSize) - 48usize];
    ["Offset of field: ImGuiStyle::PopupRounding"]
        [::std::mem::offset_of!(ImGuiStyle, PopupRounding) - 52usize];
    ["Offset of field: ImGuiStyle::PopupBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, PopupBorderSize) - 56usize];
    ["Offset of field: ImGuiStyle::FramePadding"]
        [::std::mem::offset_of!(ImGuiStyle, FramePadding) - 60usize];
    ["Offset of field: ImGuiStyle::FrameRounding"]
        [::std::mem::offset_of!(ImGuiStyle, FrameRounding) - 68usize];
    ["Offset of field: ImGuiStyle::FrameBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, FrameBorderSize) - 72usize];
    ["Offset of field: ImGuiStyle::ItemSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemSpacing) - 76usize];
    ["Offset of field: ImGuiStyle::ItemInnerSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemInnerSpacing) - 84usize];
    ["Offset of field: ImGuiStyle::CellPadding"]
        [::std::mem::offset_of!(ImGuiStyle, CellPadding) - 92usize];
    ["Offset of field: ImGuiStyle::TouchExtraPadding"]
        [::std::mem::offset_of!(ImGuiStyle, TouchExtraPadding) - 100usize];
    ["Offset of field: ImGuiStyle::IndentSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, IndentSpacing) - 108usize];
    ["Offset of field: ImGuiStyle::ColumnsMinSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ColumnsMinSpacing) - 112usize];
    ["Offset of field: ImGuiStyle::ScrollbarSize"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarSize) - 116usize];
    ["Offset of field: ImGuiStyle::ScrollbarRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarRounding) - 120usize];
    ["Offset of field: ImGuiStyle::GrabMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, GrabMinSize) - 124usize];
    ["Offset of field: ImGuiStyle::GrabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, GrabRounding) - 128usize];
    ["Offset of field: ImGuiStyle::LogSliderDeadzone"]
        [::std::mem::offset_of!(ImGuiStyle, LogSliderDeadzone) - 132usize];
    ["Offset of field: ImGuiStyle::TabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, TabRounding) - 136usize];
    ["Offset of field: ImGuiStyle::TabBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBorderSize) - 140usize];
    ["Offset of field: ImGuiStyle::TabMinWidthForCloseButton"]
        [::std::mem::offset_of!(ImGuiStyle, TabMinWidthForCloseButton) - 144usize];
    ["Offset of field: ImGuiStyle::TabBarBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBarBorderSize) - 148usize];
    ["Offset of field: ImGuiStyle::TableAngledHeadersAngle"]
        [::std::mem::offset_of!(ImGuiStyle, TableAngledHeadersAngle) - 152usize];
    ["Offset of field: ImGuiStyle::ColorButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, ColorButtonPosition) - 156usize];
    ["Offset of field: ImGuiStyle::ButtonTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, ButtonTextAlign) - 160usize];
    ["Offset of field: ImGuiStyle::SelectableTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SelectableTextAlign) - 168usize];
    ["Offset of field: ImGuiStyle::SeparatorTextBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextBorderSize) - 176usize];
    ["Offset of field: ImGuiStyle::SeparatorTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextAlign) - 180usize];
    ["Offset of field: ImGuiStyle::SeparatorTextPadding"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextPadding) - 188usize];
    ["Offset of field: ImGuiStyle::DisplayWindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplayWindowPadding) - 196usize];
    ["Offset of field: ImGuiStyle::DisplaySafeAreaPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplaySafeAreaPadding) - 204usize];
    ["Offset of field: ImGuiStyle::DockingSeparatorSize"]
        [::std::mem::offset_of!(ImGuiStyle, DockingSeparatorSize) - 212usize];
    ["Offset of field: ImGuiStyle::MouseCursorScale"]
        [::std::mem::offset_of!(ImGuiStyle, MouseCursorScale) - 216usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLines"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLines) - 220usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLinesUseTex"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLinesUseTex) - 221usize];
    ["Offset of field: ImGuiStyle::AntiAliasedFill"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedFill) - 222usize];
    ["Offset of field: ImGuiStyle::CurveTessellationTol"]
        [::std::mem::offset_of!(ImGuiStyle, CurveTessellationTol) - 224usize];
    ["Offset of field: ImGuiStyle::CircleTessellationMaxError"]
        [::std::mem::offset_of!(ImGuiStyle, CircleTessellationMaxError) - 228usize];
    ["Offset of field: ImGuiStyle::Colors"][::std::mem::offset_of!(ImGuiStyle, Colors) - 232usize];
    ["Offset of field: ImGuiStyle::HoverStationaryDelay"]
        [::std::mem::offset_of!(ImGuiStyle, HoverStationaryDelay) - 1112usize];
    ["Offset of field: ImGuiStyle::HoverDelayShort"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayShort) - 1116usize];
    ["Offset of field: ImGuiStyle::HoverDelayNormal"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayNormal) - 1120usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipMouse"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipMouse) - 1124usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipNav"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipNav) - 1128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyData"][::std::mem::size_of::<ImGuiKeyData>() - 16usize];
    ["Alignment of ImGuiKeyData"][::std::mem::align_of::<ImGuiKeyData>() - 4usize];
    ["Offset of field: ImGuiKeyData::Down"][::std::mem::offset_of!(ImGuiKeyData, Down) - 0usize];
    ["Offset of field: ImGuiKeyData::DownDuration"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDuration) - 4usize];
    ["Offset of field: ImGuiKeyData::DownDurationPrev"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDurationPrev) - 8usize];
    ["Offset of field: ImGuiKeyData::AnalogValue"]
        [::std::mem::offset_of!(ImGuiKeyData, AnalogValue) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImWchar"][::std::mem::size_of::<ImVector_ImWchar>() - 12usize];
    ["Alignment of ImVector_ImWchar"][::std::mem::align_of::<ImVector_ImWchar>() - 4usize];
    ["Offset of field: ImVector_ImWchar::Size"]
        [::std::mem::offset_of!(ImVector_ImWchar, Size) - 0usize];
    ["Offset of field: ImVector_ImWchar::Capacity"]
        [::std::mem::offset_of!(ImVector_ImWchar, Capacity) - 4usize];
    ["Offset of field: ImVector_ImWchar::Data"]
        [::std::mem::offset_of!(ImVector_ImWchar, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub SetPlatformImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(viewport: *mut ImGuiViewport, data: *mut ImGuiPlatformImeData),
    >,
    pub PlatformLocaleDecimalPoint: ImWchar,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub _UnusedPadding: *mut ::std::os::raw::c_void,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 154usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub BackendUsingLegacyKeyArrays: ImS8,
    pub BackendUsingLegacyNavInputArray: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiIO"][::std::mem::size_of::<ImGuiIO>() - 2960usize];
    ["Alignment of ImGuiIO"][::std::mem::align_of::<ImGuiIO>() - 8usize];
    ["Offset of field: ImGuiIO::ConfigFlags"]
        [::std::mem::offset_of!(ImGuiIO, ConfigFlags) - 0usize];
    ["Offset of field: ImGuiIO::BackendFlags"]
        [::std::mem::offset_of!(ImGuiIO, BackendFlags) - 4usize];
    ["Offset of field: ImGuiIO::DisplaySize"]
        [::std::mem::offset_of!(ImGuiIO, DisplaySize) - 8usize];
    ["Offset of field: ImGuiIO::DeltaTime"][::std::mem::offset_of!(ImGuiIO, DeltaTime) - 16usize];
    ["Offset of field: ImGuiIO::IniSavingRate"]
        [::std::mem::offset_of!(ImGuiIO, IniSavingRate) - 20usize];
    ["Offset of field: ImGuiIO::IniFilename"]
        [::std::mem::offset_of!(ImGuiIO, IniFilename) - 24usize];
    ["Offset of field: ImGuiIO::LogFilename"]
        [::std::mem::offset_of!(ImGuiIO, LogFilename) - 28usize];
    ["Offset of field: ImGuiIO::UserData"][::std::mem::offset_of!(ImGuiIO, UserData) - 32usize];
    ["Offset of field: ImGuiIO::Fonts"][::std::mem::offset_of!(ImGuiIO, Fonts) - 36usize];
    ["Offset of field: ImGuiIO::FontGlobalScale"]
        [::std::mem::offset_of!(ImGuiIO, FontGlobalScale) - 40usize];
    ["Offset of field: ImGuiIO::FontAllowUserScaling"]
        [::std::mem::offset_of!(ImGuiIO, FontAllowUserScaling) - 44usize];
    ["Offset of field: ImGuiIO::FontDefault"]
        [::std::mem::offset_of!(ImGuiIO, FontDefault) - 48usize];
    ["Offset of field: ImGuiIO::DisplayFramebufferScale"]
        [::std::mem::offset_of!(ImGuiIO, DisplayFramebufferScale) - 52usize];
    ["Offset of field: ImGuiIO::ConfigDockingNoSplit"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingNoSplit) - 60usize];
    ["Offset of field: ImGuiIO::ConfigDockingWithShift"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingWithShift) - 61usize];
    ["Offset of field: ImGuiIO::ConfigDockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingAlwaysTabBar) - 62usize];
    ["Offset of field: ImGuiIO::ConfigDockingTransparentPayload"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingTransparentPayload) - 63usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoAutoMerge"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoAutoMerge) - 64usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoTaskBarIcon"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoTaskBarIcon) - 65usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDecoration"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDecoration) - 66usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDefaultParent"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDefaultParent) - 67usize];
    ["Offset of field: ImGuiIO::MouseDrawCursor"]
        [::std::mem::offset_of!(ImGuiIO, MouseDrawCursor) - 68usize];
    ["Offset of field: ImGuiIO::ConfigMacOSXBehaviors"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMacOSXBehaviors) - 69usize];
    ["Offset of field: ImGuiIO::ConfigInputTrickleEventQueue"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTrickleEventQueue) - 70usize];
    ["Offset of field: ImGuiIO::ConfigInputTextCursorBlink"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextCursorBlink) - 71usize];
    ["Offset of field: ImGuiIO::ConfigInputTextEnterKeepActive"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextEnterKeepActive) - 72usize];
    ["Offset of field: ImGuiIO::ConfigDragClickToInputText"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDragClickToInputText) - 73usize];
    ["Offset of field: ImGuiIO::ConfigWindowsResizeFromEdges"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsResizeFromEdges) - 74usize];
    ["Offset of field: ImGuiIO::ConfigWindowsMoveFromTitleBarOnly"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsMoveFromTitleBarOnly) - 75usize];
    ["Offset of field: ImGuiIO::ConfigMemoryCompactTimer"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMemoryCompactTimer) - 76usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickTime) - 80usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickMaxDist"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickMaxDist) - 84usize];
    ["Offset of field: ImGuiIO::MouseDragThreshold"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragThreshold) - 88usize];
    ["Offset of field: ImGuiIO::KeyRepeatDelay"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatDelay) - 92usize];
    ["Offset of field: ImGuiIO::KeyRepeatRate"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatRate) - 96usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueOnce"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueOnce) - 100usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueLoop"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueLoop) - 101usize];
    ["Offset of field: ImGuiIO::ConfigDebugIgnoreFocusLoss"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIgnoreFocusLoss) - 102usize];
    ["Offset of field: ImGuiIO::ConfigDebugIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIniSettings) - 103usize];
    ["Offset of field: ImGuiIO::BackendPlatformName"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformName) - 104usize];
    ["Offset of field: ImGuiIO::BackendRendererName"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererName) - 108usize];
    ["Offset of field: ImGuiIO::BackendPlatformUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformUserData) - 112usize];
    ["Offset of field: ImGuiIO::BackendRendererUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererUserData) - 116usize];
    ["Offset of field: ImGuiIO::BackendLanguageUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendLanguageUserData) - 120usize];
    ["Offset of field: ImGuiIO::GetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, GetClipboardTextFn) - 124usize];
    ["Offset of field: ImGuiIO::SetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, SetClipboardTextFn) - 128usize];
    ["Offset of field: ImGuiIO::ClipboardUserData"]
        [::std::mem::offset_of!(ImGuiIO, ClipboardUserData) - 132usize];
    ["Offset of field: ImGuiIO::SetPlatformImeDataFn"]
        [::std::mem::offset_of!(ImGuiIO, SetPlatformImeDataFn) - 136usize];
    ["Offset of field: ImGuiIO::PlatformLocaleDecimalPoint"]
        [::std::mem::offset_of!(ImGuiIO, PlatformLocaleDecimalPoint) - 140usize];
    ["Offset of field: ImGuiIO::WantCaptureMouse"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouse) - 142usize];
    ["Offset of field: ImGuiIO::WantCaptureKeyboard"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureKeyboard) - 143usize];
    ["Offset of field: ImGuiIO::WantTextInput"]
        [::std::mem::offset_of!(ImGuiIO, WantTextInput) - 144usize];
    ["Offset of field: ImGuiIO::WantSetMousePos"]
        [::std::mem::offset_of!(ImGuiIO, WantSetMousePos) - 145usize];
    ["Offset of field: ImGuiIO::WantSaveIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, WantSaveIniSettings) - 146usize];
    ["Offset of field: ImGuiIO::NavActive"][::std::mem::offset_of!(ImGuiIO, NavActive) - 147usize];
    ["Offset of field: ImGuiIO::NavVisible"]
        [::std::mem::offset_of!(ImGuiIO, NavVisible) - 148usize];
    ["Offset of field: ImGuiIO::Framerate"][::std::mem::offset_of!(ImGuiIO, Framerate) - 152usize];
    ["Offset of field: ImGuiIO::MetricsRenderVertices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderVertices) - 156usize];
    ["Offset of field: ImGuiIO::MetricsRenderIndices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderIndices) - 160usize];
    ["Offset of field: ImGuiIO::MetricsRenderWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderWindows) - 164usize];
    ["Offset of field: ImGuiIO::MetricsActiveWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsActiveWindows) - 168usize];
    ["Offset of field: ImGuiIO::MouseDelta"]
        [::std::mem::offset_of!(ImGuiIO, MouseDelta) - 172usize];
    ["Offset of field: ImGuiIO::_UnusedPadding"]
        [::std::mem::offset_of!(ImGuiIO, _UnusedPadding) - 180usize];
    ["Offset of field: ImGuiIO::Ctx"][::std::mem::offset_of!(ImGuiIO, Ctx) - 184usize];
    ["Offset of field: ImGuiIO::MousePos"][::std::mem::offset_of!(ImGuiIO, MousePos) - 188usize];
    ["Offset of field: ImGuiIO::MouseDown"][::std::mem::offset_of!(ImGuiIO, MouseDown) - 196usize];
    ["Offset of field: ImGuiIO::MouseWheel"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheel) - 204usize];
    ["Offset of field: ImGuiIO::MouseWheelH"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelH) - 208usize];
    ["Offset of field: ImGuiIO::MouseSource"]
        [::std::mem::offset_of!(ImGuiIO, MouseSource) - 212usize];
    ["Offset of field: ImGuiIO::MouseHoveredViewport"]
        [::std::mem::offset_of!(ImGuiIO, MouseHoveredViewport) - 216usize];
    ["Offset of field: ImGuiIO::KeyCtrl"][::std::mem::offset_of!(ImGuiIO, KeyCtrl) - 220usize];
    ["Offset of field: ImGuiIO::KeyShift"][::std::mem::offset_of!(ImGuiIO, KeyShift) - 221usize];
    ["Offset of field: ImGuiIO::KeyAlt"][::std::mem::offset_of!(ImGuiIO, KeyAlt) - 222usize];
    ["Offset of field: ImGuiIO::KeySuper"][::std::mem::offset_of!(ImGuiIO, KeySuper) - 223usize];
    ["Offset of field: ImGuiIO::KeyMods"][::std::mem::offset_of!(ImGuiIO, KeyMods) - 224usize];
    ["Offset of field: ImGuiIO::KeysData"][::std::mem::offset_of!(ImGuiIO, KeysData) - 228usize];
    ["Offset of field: ImGuiIO::WantCaptureMouseUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouseUnlessPopupClose) - 2692usize];
    ["Offset of field: ImGuiIO::MousePosPrev"]
        [::std::mem::offset_of!(ImGuiIO, MousePosPrev) - 2696usize];
    ["Offset of field: ImGuiIO::MouseClickedPos"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedPos) - 2704usize];
    ["Offset of field: ImGuiIO::MouseClickedTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedTime) - 2744usize];
    ["Offset of field: ImGuiIO::MouseClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseClicked) - 2784usize];
    ["Offset of field: ImGuiIO::MouseDoubleClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClicked) - 2789usize];
    ["Offset of field: ImGuiIO::MouseClickedCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedCount) - 2794usize];
    ["Offset of field: ImGuiIO::MouseClickedLastCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedLastCount) - 2804usize];
    ["Offset of field: ImGuiIO::MouseReleased"]
        [::std::mem::offset_of!(ImGuiIO, MouseReleased) - 2814usize];
    ["Offset of field: ImGuiIO::MouseDownOwned"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwned) - 2819usize];
    ["Offset of field: ImGuiIO::MouseDownOwnedUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwnedUnlessPopupClose) - 2824usize];
    ["Offset of field: ImGuiIO::MouseWheelRequestAxisSwap"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelRequestAxisSwap) - 2829usize];
    ["Offset of field: ImGuiIO::MouseDownDuration"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDuration) - 2832usize];
    ["Offset of field: ImGuiIO::MouseDownDurationPrev"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDurationPrev) - 2852usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceAbs"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceAbs) - 2872usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceSqr"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceSqr) - 2912usize];
    ["Offset of field: ImGuiIO::PenPressure"]
        [::std::mem::offset_of!(ImGuiIO, PenPressure) - 2932usize];
    ["Offset of field: ImGuiIO::AppFocusLost"]
        [::std::mem::offset_of!(ImGuiIO, AppFocusLost) - 2936usize];
    ["Offset of field: ImGuiIO::AppAcceptingEvents"]
        [::std::mem::offset_of!(ImGuiIO, AppAcceptingEvents) - 2937usize];
    ["Offset of field: ImGuiIO::BackendUsingLegacyKeyArrays"]
        [::std::mem::offset_of!(ImGuiIO, BackendUsingLegacyKeyArrays) - 2938usize];
    ["Offset of field: ImGuiIO::BackendUsingLegacyNavInputArray"]
        [::std::mem::offset_of!(ImGuiIO, BackendUsingLegacyNavInputArray) - 2939usize];
    ["Offset of field: ImGuiIO::InputQueueSurrogate"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueSurrogate) - 2940usize];
    ["Offset of field: ImGuiIO::InputQueueCharacters"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueCharacters) - 2944usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextCallbackData"]
        [::std::mem::size_of::<ImGuiInputTextCallbackData>() - 52usize];
    ["Alignment of ImGuiInputTextCallbackData"]
        [::std::mem::align_of::<ImGuiInputTextCallbackData>() - 4usize];
    ["Offset of field: ImGuiInputTextCallbackData::Ctx"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Ctx) - 0usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventFlag"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventFlag) - 4usize];
    ["Offset of field: ImGuiInputTextCallbackData::Flags"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Flags) - 8usize];
    ["Offset of field: ImGuiInputTextCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, UserData) - 12usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventChar"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventChar) - 16usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventKey"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventKey) - 20usize];
    ["Offset of field: ImGuiInputTextCallbackData::Buf"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Buf) - 24usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufTextLen"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufTextLen) - 28usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufSize"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufSize) - 32usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufDirty"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufDirty) - 36usize];
    ["Offset of field: ImGuiInputTextCallbackData::CursorPos"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, CursorPos) - 40usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionStart"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionStart) - 44usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionEnd"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionEnd) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSizeCallbackData"][::std::mem::size_of::<ImGuiSizeCallbackData>() - 28usize];
    ["Alignment of ImGuiSizeCallbackData"]
        [::std::mem::align_of::<ImGuiSizeCallbackData>() - 4usize];
    ["Offset of field: ImGuiSizeCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, UserData) - 0usize];
    ["Offset of field: ImGuiSizeCallbackData::Pos"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, Pos) - 4usize];
    ["Offset of field: ImGuiSizeCallbackData::CurrentSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, CurrentSize) - 12usize];
    ["Offset of field: ImGuiSizeCallbackData::DesiredSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, DesiredSize) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowClass"][::std::mem::size_of::<ImGuiWindowClass>() - 28usize];
    ["Alignment of ImGuiWindowClass"][::std::mem::align_of::<ImGuiWindowClass>() - 4usize];
    ["Offset of field: ImGuiWindowClass::ClassId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ClassId) - 0usize];
    ["Offset of field: ImGuiWindowClass::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ParentViewportId) - 4usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideSet) - 8usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideClear"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideClear) - 12usize];
    ["Offset of field: ImGuiWindowClass::TabItemFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, TabItemFlagsOverrideSet) - 16usize];
    ["Offset of field: ImGuiWindowClass::DockNodeFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockNodeFlagsOverrideSet) - 20usize];
    ["Offset of field: ImGuiWindowClass::DockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAlwaysTabBar) - 24usize];
    ["Offset of field: ImGuiWindowClass::DockingAllowUnclassed"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAllowUnclassed) - 25usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPayload"][::std::mem::size_of::<ImGuiPayload>() - 56usize];
    ["Alignment of ImGuiPayload"][::std::mem::align_of::<ImGuiPayload>() - 4usize];
    ["Offset of field: ImGuiPayload::Data"][::std::mem::offset_of!(ImGuiPayload, Data) - 0usize];
    ["Offset of field: ImGuiPayload::DataSize"]
        [::std::mem::offset_of!(ImGuiPayload, DataSize) - 4usize];
    ["Offset of field: ImGuiPayload::SourceId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceId) - 8usize];
    ["Offset of field: ImGuiPayload::SourceParentId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceParentId) - 12usize];
    ["Offset of field: ImGuiPayload::DataFrameCount"]
        [::std::mem::offset_of!(ImGuiPayload, DataFrameCount) - 16usize];
    ["Offset of field: ImGuiPayload::DataType"]
        [::std::mem::offset_of!(ImGuiPayload, DataType) - 20usize];
    ["Offset of field: ImGuiPayload::Preview"]
        [::std::mem::offset_of!(ImGuiPayload, Preview) - 53usize];
    ["Offset of field: ImGuiPayload::Delivery"]
        [::std::mem::offset_of!(ImGuiPayload, Delivery) - 54usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumnSortSpecs"]
        [::std::mem::size_of::<ImGuiTableColumnSortSpecs>() - 12usize];
    ["Alignment of ImGuiTableColumnSortSpecs"]
        [::std::mem::align_of::<ImGuiTableColumnSortSpecs>() - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnUserID"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnUserID) - 0usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnIndex"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnIndex) - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, SortOrder) - 6usize];
};
impl ImGuiTableColumnSortSpecs {
    #[inline]
    pub fn SortDirection(&self) -> ImGuiSortDirection {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImGuiSortDirection) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImGuiSortDirection {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImGuiSortDirection) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImGuiSortDirection,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SortDirection: u32 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableSortSpecs"][::std::mem::size_of::<ImGuiTableSortSpecs>() - 12usize];
    ["Alignment of ImGuiTableSortSpecs"][::std::mem::align_of::<ImGuiTableSortSpecs>() - 4usize];
    ["Offset of field: ImGuiTableSortSpecs::Specs"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, Specs) - 0usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsCount"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsCount) - 4usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsDirty"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsDirty) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOnceUponAFrame"][::std::mem::size_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Alignment of ImGuiOnceUponAFrame"][::std::mem::align_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Offset of field: ImGuiOnceUponAFrame::RefFrame"]
        [::std::mem::offset_of!(ImGuiOnceUponAFrame, RefFrame) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextRange"][::std::mem::size_of::<ImGuiTextRange>() - 8usize];
    ["Alignment of ImGuiTextRange"][::std::mem::align_of::<ImGuiTextRange>() - 4usize];
    ["Offset of field: ImGuiTextRange::b"][::std::mem::offset_of!(ImGuiTextRange, b) - 0usize];
    ["Offset of field: ImGuiTextRange::e"][::std::mem::offset_of!(ImGuiTextRange, e) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTextRange"][::std::mem::size_of::<ImVector_ImGuiTextRange>() - 12usize];
    ["Alignment of ImVector_ImGuiTextRange"]
        [::std::mem::align_of::<ImVector_ImGuiTextRange>() - 4usize];
    ["Offset of field: ImVector_ImGuiTextRange::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTextRange, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTextRange::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTextRange, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTextRange::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTextRange, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextRange,
    pub CountGrep: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextFilter"][::std::mem::size_of::<ImGuiTextFilter>() - 272usize];
    ["Alignment of ImGuiTextFilter"][::std::mem::align_of::<ImGuiTextFilter>() - 4usize];
    ["Offset of field: ImGuiTextFilter::InputBuf"]
        [::std::mem::offset_of!(ImGuiTextFilter, InputBuf) - 0usize];
    ["Offset of field: ImGuiTextFilter::Filters"]
        [::std::mem::offset_of!(ImGuiTextFilter, Filters) - 256usize];
    ["Offset of field: ImGuiTextFilter::CountGrep"]
        [::std::mem::offset_of!(ImGuiTextFilter, CountGrep) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_char"][::std::mem::size_of::<ImVector_char>() - 12usize];
    ["Alignment of ImVector_char"][::std::mem::align_of::<ImVector_char>() - 4usize];
    ["Offset of field: ImVector_char::Size"][::std::mem::offset_of!(ImVector_char, Size) - 0usize];
    ["Offset of field: ImVector_char::Capacity"]
        [::std::mem::offset_of!(ImVector_char, Capacity) - 4usize];
    ["Offset of field: ImVector_char::Data"][::std::mem::offset_of!(ImVector_char, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextBuffer"][::std::mem::size_of::<ImGuiTextBuffer>() - 12usize];
    ["Alignment of ImGuiTextBuffer"][::std::mem::align_of::<ImGuiTextBuffer>() - 4usize];
    ["Offset of field: ImGuiTextBuffer::Buf"]
        [::std::mem::offset_of!(ImGuiTextBuffer, Buf) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>() - 4usize];
    ["Alignment of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>() - 4usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_i"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_i) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_f"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_f) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_p"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_p) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair"][::std::mem::size_of::<ImGuiStoragePair>() - 8usize];
    ["Alignment of ImGuiStoragePair"][::std::mem::align_of::<ImGuiStoragePair>() - 4usize];
    ["Offset of field: ImGuiStoragePair::key"]
        [::std::mem::offset_of!(ImGuiStoragePair, key) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiStoragePair"]
        [::std::mem::size_of::<ImVector_ImGuiStoragePair>() - 12usize];
    ["Alignment of ImVector_ImGuiStoragePair"]
        [::std::mem::align_of::<ImVector_ImGuiStoragePair>() - 4usize];
    ["Offset of field: ImVector_ImGuiStoragePair::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiStoragePair, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiStoragePair::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiStoragePair, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiStoragePair::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiStoragePair, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStorage"][::std::mem::size_of::<ImGuiStorage>() - 12usize];
    ["Alignment of ImGuiStorage"][::std::mem::align_of::<ImGuiStorage>() - 4usize];
    ["Offset of field: ImGuiStorage::Data"][::std::mem::offset_of!(ImGuiStorage, Data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipper"][::std::mem::size_of::<ImGuiListClipper>() - 28usize];
    ["Alignment of ImGuiListClipper"][::std::mem::align_of::<ImGuiListClipper>() - 4usize];
    ["Offset of field: ImGuiListClipper::Ctx"]
        [::std::mem::offset_of!(ImGuiListClipper, Ctx) - 0usize];
    ["Offset of field: ImGuiListClipper::DisplayStart"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayStart) - 4usize];
    ["Offset of field: ImGuiListClipper::DisplayEnd"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayEnd) - 8usize];
    ["Offset of field: ImGuiListClipper::ItemsCount"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsCount) - 12usize];
    ["Offset of field: ImGuiListClipper::ItemsHeight"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsHeight) - 16usize];
    ["Offset of field: ImGuiListClipper::StartPosY"]
        [::std::mem::offset_of!(ImGuiListClipper, StartPosY) - 20usize];
    ["Offset of field: ImGuiListClipper::TempData"]
        [::std::mem::offset_of!(ImGuiListClipper, TempData) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImColor"][::std::mem::size_of::<ImColor>() - 16usize];
    ["Alignment of ImColor"][::std::mem::align_of::<ImColor>() - 4usize];
    ["Offset of field: ImColor::Value"][::std::mem::offset_of!(ImColor, Value) - 0usize];
};
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmd"][::std::mem::size_of::<ImDrawCmd>() - 40usize];
    ["Alignment of ImDrawCmd"][::std::mem::align_of::<ImDrawCmd>() - 4usize];
    ["Offset of field: ImDrawCmd::ClipRect"][::std::mem::offset_of!(ImDrawCmd, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmd::TextureId"]
        [::std::mem::offset_of!(ImDrawCmd, TextureId) - 16usize];
    ["Offset of field: ImDrawCmd::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, VtxOffset) - 20usize];
    ["Offset of field: ImDrawCmd::IdxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, IdxOffset) - 24usize];
    ["Offset of field: ImDrawCmd::ElemCount"]
        [::std::mem::offset_of!(ImDrawCmd, ElemCount) - 28usize];
    ["Offset of field: ImDrawCmd::UserCallback"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallback) - 32usize];
    ["Offset of field: ImDrawCmd::UserCallbackData"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackData) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawVert"][::std::mem::size_of::<ImDrawVert>() - 20usize];
    ["Alignment of ImDrawVert"][::std::mem::align_of::<ImDrawVert>() - 4usize];
    ["Offset of field: ImDrawVert::pos"][::std::mem::offset_of!(ImDrawVert, pos) - 0usize];
    ["Offset of field: ImDrawVert::uv"][::std::mem::offset_of!(ImDrawVert, uv) - 8usize];
    ["Offset of field: ImDrawVert::col"][::std::mem::offset_of!(ImDrawVert, col) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmdHeader"][::std::mem::size_of::<ImDrawCmdHeader>() - 24usize];
    ["Alignment of ImDrawCmdHeader"][::std::mem::align_of::<ImDrawCmdHeader>() - 4usize];
    ["Offset of field: ImDrawCmdHeader::ClipRect"]
        [::std::mem::offset_of!(ImDrawCmdHeader, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmdHeader::TextureId"]
        [::std::mem::offset_of!(ImDrawCmdHeader, TextureId) - 16usize];
    ["Offset of field: ImDrawCmdHeader::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmdHeader, VtxOffset) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImDrawCmd"][::std::mem::size_of::<ImVector_ImDrawCmd>() - 12usize];
    ["Alignment of ImVector_ImDrawCmd"][::std::mem::align_of::<ImVector_ImDrawCmd>() - 4usize];
    ["Offset of field: ImVector_ImDrawCmd::Size"]
        [::std::mem::offset_of!(ImVector_ImDrawCmd, Size) - 0usize];
    ["Offset of field: ImVector_ImDrawCmd::Capacity"]
        [::std::mem::offset_of!(ImVector_ImDrawCmd, Capacity) - 4usize];
    ["Offset of field: ImVector_ImDrawCmd::Data"]
        [::std::mem::offset_of!(ImVector_ImDrawCmd, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImDrawIdx"][::std::mem::size_of::<ImVector_ImDrawIdx>() - 12usize];
    ["Alignment of ImVector_ImDrawIdx"][::std::mem::align_of::<ImVector_ImDrawIdx>() - 4usize];
    ["Offset of field: ImVector_ImDrawIdx::Size"]
        [::std::mem::offset_of!(ImVector_ImDrawIdx, Size) - 0usize];
    ["Offset of field: ImVector_ImDrawIdx::Capacity"]
        [::std::mem::offset_of!(ImVector_ImDrawIdx, Capacity) - 4usize];
    ["Offset of field: ImVector_ImDrawIdx::Data"]
        [::std::mem::offset_of!(ImVector_ImDrawIdx, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawChannel"][::std::mem::size_of::<ImDrawChannel>() - 24usize];
    ["Alignment of ImDrawChannel"][::std::mem::align_of::<ImDrawChannel>() - 4usize];
    ["Offset of field: ImDrawChannel::_CmdBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _CmdBuffer) - 0usize];
    ["Offset of field: ImDrawChannel::_IdxBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _IdxBuffer) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImDrawChannel"][::std::mem::size_of::<ImVector_ImDrawChannel>() - 12usize];
    ["Alignment of ImVector_ImDrawChannel"]
        [::std::mem::align_of::<ImVector_ImDrawChannel>() - 4usize];
    ["Offset of field: ImVector_ImDrawChannel::Size"]
        [::std::mem::offset_of!(ImVector_ImDrawChannel, Size) - 0usize];
    ["Offset of field: ImVector_ImDrawChannel::Capacity"]
        [::std::mem::offset_of!(ImVector_ImDrawChannel, Capacity) - 4usize];
    ["Offset of field: ImVector_ImDrawChannel::Data"]
        [::std::mem::offset_of!(ImVector_ImDrawChannel, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawListSplitter"][::std::mem::size_of::<ImDrawListSplitter>() - 20usize];
    ["Alignment of ImDrawListSplitter"][::std::mem::align_of::<ImDrawListSplitter>() - 4usize];
    ["Offset of field: ImDrawListSplitter::_Current"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Current) - 0usize];
    ["Offset of field: ImDrawListSplitter::_Count"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Count) - 4usize];
    ["Offset of field: ImDrawListSplitter::_Channels"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Channels) - 8usize];
};
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImDrawVert"][::std::mem::size_of::<ImVector_ImDrawVert>() - 12usize];
    ["Alignment of ImVector_ImDrawVert"][::std::mem::align_of::<ImVector_ImDrawVert>() - 4usize];
    ["Offset of field: ImVector_ImDrawVert::Size"]
        [::std::mem::offset_of!(ImVector_ImDrawVert, Size) - 0usize];
    ["Offset of field: ImVector_ImDrawVert::Capacity"]
        [::std::mem::offset_of!(ImVector_ImDrawVert, Capacity) - 4usize];
    ["Offset of field: ImVector_ImDrawVert::Data"]
        [::std::mem::offset_of!(ImVector_ImDrawVert, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImVec4"][::std::mem::size_of::<ImVector_ImVec4>() - 12usize];
    ["Alignment of ImVector_ImVec4"][::std::mem::align_of::<ImVector_ImVec4>() - 4usize];
    ["Offset of field: ImVector_ImVec4::Size"]
        [::std::mem::offset_of!(ImVector_ImVec4, Size) - 0usize];
    ["Offset of field: ImVector_ImVec4::Capacity"]
        [::std::mem::offset_of!(ImVector_ImVec4, Capacity) - 4usize];
    ["Offset of field: ImVector_ImVec4::Data"]
        [::std::mem::offset_of!(ImVector_ImVec4, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImTextureID"][::std::mem::size_of::<ImVector_ImTextureID>() - 12usize];
    ["Alignment of ImVector_ImTextureID"][::std::mem::align_of::<ImVector_ImTextureID>() - 4usize];
    ["Offset of field: ImVector_ImTextureID::Size"]
        [::std::mem::offset_of!(ImVector_ImTextureID, Size) - 0usize];
    ["Offset of field: ImVector_ImTextureID::Capacity"]
        [::std::mem::offset_of!(ImVector_ImTextureID, Capacity) - 4usize];
    ["Offset of field: ImVector_ImTextureID::Data"]
        [::std::mem::offset_of!(ImVector_ImTextureID, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImVec2"][::std::mem::size_of::<ImVector_ImVec2>() - 12usize];
    ["Alignment of ImVector_ImVec2"][::std::mem::align_of::<ImVector_ImVec2>() - 4usize];
    ["Offset of field: ImVector_ImVec2::Size"]
        [::std::mem::offset_of!(ImVector_ImVec2, Size) - 0usize];
    ["Offset of field: ImVector_ImVec2::Capacity"]
        [::std::mem::offset_of!(ImVector_ImVec2, Capacity) - 4usize];
    ["Offset of field: ImVector_ImVec2::Data"]
        [::std::mem::offset_of!(ImVector_ImVec2, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _OwnerName: *const ::std::os::raw::c_char,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _FringeScale: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawList"][::std::mem::size_of::<ImDrawList>() - 144usize];
    ["Alignment of ImDrawList"][::std::mem::align_of::<ImDrawList>() - 4usize];
    ["Offset of field: ImDrawList::CmdBuffer"]
        [::std::mem::offset_of!(ImDrawList, CmdBuffer) - 0usize];
    ["Offset of field: ImDrawList::IdxBuffer"]
        [::std::mem::offset_of!(ImDrawList, IdxBuffer) - 12usize];
    ["Offset of field: ImDrawList::VtxBuffer"]
        [::std::mem::offset_of!(ImDrawList, VtxBuffer) - 24usize];
    ["Offset of field: ImDrawList::Flags"][::std::mem::offset_of!(ImDrawList, Flags) - 36usize];
    ["Offset of field: ImDrawList::_VtxCurrentIdx"]
        [::std::mem::offset_of!(ImDrawList, _VtxCurrentIdx) - 40usize];
    ["Offset of field: ImDrawList::_Data"][::std::mem::offset_of!(ImDrawList, _Data) - 44usize];
    ["Offset of field: ImDrawList::_OwnerName"]
        [::std::mem::offset_of!(ImDrawList, _OwnerName) - 48usize];
    ["Offset of field: ImDrawList::_VtxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _VtxWritePtr) - 52usize];
    ["Offset of field: ImDrawList::_IdxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _IdxWritePtr) - 56usize];
    ["Offset of field: ImDrawList::_ClipRectStack"]
        [::std::mem::offset_of!(ImDrawList, _ClipRectStack) - 60usize];
    ["Offset of field: ImDrawList::_TextureIdStack"]
        [::std::mem::offset_of!(ImDrawList, _TextureIdStack) - 72usize];
    ["Offset of field: ImDrawList::_Path"][::std::mem::offset_of!(ImDrawList, _Path) - 84usize];
    ["Offset of field: ImDrawList::_CmdHeader"]
        [::std::mem::offset_of!(ImDrawList, _CmdHeader) - 96usize];
    ["Offset of field: ImDrawList::_Splitter"]
        [::std::mem::offset_of!(ImDrawList, _Splitter) - 120usize];
    ["Offset of field: ImDrawList::_FringeScale"]
        [::std::mem::offset_of!(ImDrawList, _FringeScale) - 140usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImDrawListPtr"][::std::mem::size_of::<ImVector_ImDrawListPtr>() - 12usize];
    ["Alignment of ImVector_ImDrawListPtr"]
        [::std::mem::align_of::<ImVector_ImDrawListPtr>() - 4usize];
    ["Offset of field: ImVector_ImDrawListPtr::Size"]
        [::std::mem::offset_of!(ImVector_ImDrawListPtr, Size) - 0usize];
    ["Offset of field: ImVector_ImDrawListPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_ImDrawListPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_ImDrawListPtr::Data"]
        [::std::mem::offset_of!(ImVector_ImDrawListPtr, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector_ImDrawListPtr,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawData"][::std::mem::size_of::<ImDrawData>() - 56usize];
    ["Alignment of ImDrawData"][::std::mem::align_of::<ImDrawData>() - 4usize];
    ["Offset of field: ImDrawData::Valid"][::std::mem::offset_of!(ImDrawData, Valid) - 0usize];
    ["Offset of field: ImDrawData::CmdListsCount"]
        [::std::mem::offset_of!(ImDrawData, CmdListsCount) - 4usize];
    ["Offset of field: ImDrawData::TotalIdxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalIdxCount) - 8usize];
    ["Offset of field: ImDrawData::TotalVtxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalVtxCount) - 12usize];
    ["Offset of field: ImDrawData::CmdLists"]
        [::std::mem::offset_of!(ImDrawData, CmdLists) - 16usize];
    ["Offset of field: ImDrawData::DisplayPos"]
        [::std::mem::offset_of!(ImDrawData, DisplayPos) - 28usize];
    ["Offset of field: ImDrawData::DisplaySize"]
        [::std::mem::offset_of!(ImDrawData, DisplaySize) - 36usize];
    ["Offset of field: ImDrawData::FramebufferScale"]
        [::std::mem::offset_of!(ImDrawData, FramebufferScale) - 44usize];
    ["Offset of field: ImDrawData::OwnerViewport"]
        [::std::mem::offset_of!(ImDrawData, OwnerViewport) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontConfig"][::std::mem::size_of::<ImFontConfig>() - 124usize];
    ["Alignment of ImFontConfig"][::std::mem::align_of::<ImFontConfig>() - 4usize];
    ["Offset of field: ImFontConfig::FontData"]
        [::std::mem::offset_of!(ImFontConfig, FontData) - 0usize];
    ["Offset of field: ImFontConfig::FontDataSize"]
        [::std::mem::offset_of!(ImFontConfig, FontDataSize) - 4usize];
    ["Offset of field: ImFontConfig::FontDataOwnedByAtlas"]
        [::std::mem::offset_of!(ImFontConfig, FontDataOwnedByAtlas) - 8usize];
    ["Offset of field: ImFontConfig::FontNo"]
        [::std::mem::offset_of!(ImFontConfig, FontNo) - 12usize];
    ["Offset of field: ImFontConfig::SizePixels"]
        [::std::mem::offset_of!(ImFontConfig, SizePixels) - 16usize];
    ["Offset of field: ImFontConfig::OversampleH"]
        [::std::mem::offset_of!(ImFontConfig, OversampleH) - 20usize];
    ["Offset of field: ImFontConfig::OversampleV"]
        [::std::mem::offset_of!(ImFontConfig, OversampleV) - 24usize];
    ["Offset of field: ImFontConfig::PixelSnapH"]
        [::std::mem::offset_of!(ImFontConfig, PixelSnapH) - 28usize];
    ["Offset of field: ImFontConfig::GlyphExtraSpacing"]
        [::std::mem::offset_of!(ImFontConfig, GlyphExtraSpacing) - 32usize];
    ["Offset of field: ImFontConfig::GlyphOffset"]
        [::std::mem::offset_of!(ImFontConfig, GlyphOffset) - 40usize];
    ["Offset of field: ImFontConfig::GlyphRanges"]
        [::std::mem::offset_of!(ImFontConfig, GlyphRanges) - 48usize];
    ["Offset of field: ImFontConfig::GlyphMinAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMinAdvanceX) - 52usize];
    ["Offset of field: ImFontConfig::GlyphMaxAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMaxAdvanceX) - 56usize];
    ["Offset of field: ImFontConfig::MergeMode"]
        [::std::mem::offset_of!(ImFontConfig, MergeMode) - 60usize];
    ["Offset of field: ImFontConfig::FontBuilderFlags"]
        [::std::mem::offset_of!(ImFontConfig, FontBuilderFlags) - 64usize];
    ["Offset of field: ImFontConfig::RasterizerMultiply"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerMultiply) - 68usize];
    ["Offset of field: ImFontConfig::RasterizerDensity"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerDensity) - 72usize];
    ["Offset of field: ImFontConfig::EllipsisChar"]
        [::std::mem::offset_of!(ImFontConfig, EllipsisChar) - 76usize];
    ["Offset of field: ImFontConfig::Name"][::std::mem::offset_of!(ImFontConfig, Name) - 78usize];
    ["Offset of field: ImFontConfig::DstFont"]
        [::std::mem::offset_of!(ImFontConfig, DstFont) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyph"][::std::mem::size_of::<ImFontGlyph>() - 40usize];
    ["Alignment of ImFontGlyph"][::std::mem::align_of::<ImFontGlyph>() - 4usize];
    ["Offset of field: ImFontGlyph::AdvanceX"]
        [::std::mem::offset_of!(ImFontGlyph, AdvanceX) - 4usize];
    ["Offset of field: ImFontGlyph::X0"][::std::mem::offset_of!(ImFontGlyph, X0) - 8usize];
    ["Offset of field: ImFontGlyph::Y0"][::std::mem::offset_of!(ImFontGlyph, Y0) - 12usize];
    ["Offset of field: ImFontGlyph::X1"][::std::mem::offset_of!(ImFontGlyph, X1) - 16usize];
    ["Offset of field: ImFontGlyph::Y1"][::std::mem::offset_of!(ImFontGlyph, Y1) - 20usize];
    ["Offset of field: ImFontGlyph::U0"][::std::mem::offset_of!(ImFontGlyph, U0) - 24usize];
    ["Offset of field: ImFontGlyph::V0"][::std::mem::offset_of!(ImFontGlyph, V0) - 28usize];
    ["Offset of field: ImFontGlyph::U1"][::std::mem::offset_of!(ImFontGlyph, U1) - 32usize];
    ["Offset of field: ImFontGlyph::V1"][::std::mem::offset_of!(ImFontGlyph, V1) - 36usize];
};
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Colored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Colored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Visible_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Visible_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Codepoint_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Codepoint_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImU32"][::std::mem::size_of::<ImVector_ImU32>() - 12usize];
    ["Alignment of ImVector_ImU32"][::std::mem::align_of::<ImVector_ImU32>() - 4usize];
    ["Offset of field: ImVector_ImU32::Size"]
        [::std::mem::offset_of!(ImVector_ImU32, Size) - 0usize];
    ["Offset of field: ImVector_ImU32::Capacity"]
        [::std::mem::offset_of!(ImVector_ImU32, Capacity) - 4usize];
    ["Offset of field: ImVector_ImU32::Data"]
        [::std::mem::offset_of!(ImVector_ImU32, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector_ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyphRangesBuilder"]
        [::std::mem::size_of::<ImFontGlyphRangesBuilder>() - 12usize];
    ["Alignment of ImFontGlyphRangesBuilder"]
        [::std::mem::align_of::<ImFontGlyphRangesBuilder>() - 4usize];
    ["Offset of field: ImFontGlyphRangesBuilder::UsedChars"]
        [::std::mem::offset_of!(ImFontGlyphRangesBuilder, UsedChars) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlasCustomRect"][::std::mem::size_of::<ImFontAtlasCustomRect>() - 28usize];
    ["Alignment of ImFontAtlasCustomRect"]
        [::std::mem::align_of::<ImFontAtlasCustomRect>() - 4usize];
    ["Offset of field: ImFontAtlasCustomRect::Width"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Width) - 0usize];
    ["Offset of field: ImFontAtlasCustomRect::Height"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Height) - 2usize];
    ["Offset of field: ImFontAtlasCustomRect::X"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, X) - 4usize];
    ["Offset of field: ImFontAtlasCustomRect::Y"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Y) - 6usize];
    ["Offset of field: ImFontAtlasCustomRect::GlyphID"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, GlyphID) - 8usize];
    ["Offset of field: ImFontAtlasCustomRect::GlyphAdvanceX"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, GlyphAdvanceX) - 12usize];
    ["Offset of field: ImFontAtlasCustomRect::GlyphOffset"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, GlyphOffset) - 16usize];
    ["Offset of field: ImFontAtlasCustomRect::Font"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Font) - 24usize];
};
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImFontPtr"][::std::mem::size_of::<ImVector_ImFontPtr>() - 12usize];
    ["Alignment of ImVector_ImFontPtr"][::std::mem::align_of::<ImVector_ImFontPtr>() - 4usize];
    ["Offset of field: ImVector_ImFontPtr::Size"]
        [::std::mem::offset_of!(ImVector_ImFontPtr, Size) - 0usize];
    ["Offset of field: ImVector_ImFontPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_ImFontPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_ImFontPtr::Data"]
        [::std::mem::offset_of!(ImVector_ImFontPtr, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImFontAtlasCustomRect"]
        [::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>() - 12usize];
    ["Alignment of ImVector_ImFontAtlasCustomRect"]
        [::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>() - 4usize];
    ["Offset of field: ImVector_ImFontAtlasCustomRect::Size"]
        [::std::mem::offset_of!(ImVector_ImFontAtlasCustomRect, Size) - 0usize];
    ["Offset of field: ImVector_ImFontAtlasCustomRect::Capacity"]
        [::std::mem::offset_of!(ImVector_ImFontAtlasCustomRect, Capacity) - 4usize];
    ["Offset of field: ImVector_ImFontAtlasCustomRect::Data"]
        [::std::mem::offset_of!(ImVector_ImFontAtlasCustomRect, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImFontConfig"][::std::mem::size_of::<ImVector_ImFontConfig>() - 12usize];
    ["Alignment of ImVector_ImFontConfig"]
        [::std::mem::align_of::<ImVector_ImFontConfig>() - 4usize];
    ["Offset of field: ImVector_ImFontConfig::Size"]
        [::std::mem::offset_of!(ImVector_ImFontConfig, Size) - 0usize];
    ["Offset of field: ImVector_ImFontConfig::Capacity"]
        [::std::mem::offset_of!(ImVector_ImFontConfig, Capacity) - 4usize];
    ["Offset of field: ImVector_ImFontConfig::Data"]
        [::std::mem::offset_of!(ImVector_ImFontConfig, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub Locked: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlas"][::std::mem::size_of::<ImFontAtlas>() - 1136usize];
    ["Alignment of ImFontAtlas"][::std::mem::align_of::<ImFontAtlas>() - 4usize];
    ["Offset of field: ImFontAtlas::Flags"][::std::mem::offset_of!(ImFontAtlas, Flags) - 0usize];
    ["Offset of field: ImFontAtlas::TexID"][::std::mem::offset_of!(ImFontAtlas, TexID) - 4usize];
    ["Offset of field: ImFontAtlas::TexDesiredWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexDesiredWidth) - 8usize];
    ["Offset of field: ImFontAtlas::TexGlyphPadding"]
        [::std::mem::offset_of!(ImFontAtlas, TexGlyphPadding) - 12usize];
    ["Offset of field: ImFontAtlas::Locked"][::std::mem::offset_of!(ImFontAtlas, Locked) - 16usize];
    ["Offset of field: ImFontAtlas::UserData"]
        [::std::mem::offset_of!(ImFontAtlas, UserData) - 20usize];
    ["Offset of field: ImFontAtlas::TexReady"]
        [::std::mem::offset_of!(ImFontAtlas, TexReady) - 24usize];
    ["Offset of field: ImFontAtlas::TexPixelsUseColors"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsUseColors) - 25usize];
    ["Offset of field: ImFontAtlas::TexPixelsAlpha8"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsAlpha8) - 28usize];
    ["Offset of field: ImFontAtlas::TexPixelsRGBA32"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsRGBA32) - 32usize];
    ["Offset of field: ImFontAtlas::TexWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexWidth) - 36usize];
    ["Offset of field: ImFontAtlas::TexHeight"]
        [::std::mem::offset_of!(ImFontAtlas, TexHeight) - 40usize];
    ["Offset of field: ImFontAtlas::TexUvScale"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvScale) - 44usize];
    ["Offset of field: ImFontAtlas::TexUvWhitePixel"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvWhitePixel) - 52usize];
    ["Offset of field: ImFontAtlas::Fonts"][::std::mem::offset_of!(ImFontAtlas, Fonts) - 60usize];
    ["Offset of field: ImFontAtlas::CustomRects"]
        [::std::mem::offset_of!(ImFontAtlas, CustomRects) - 72usize];
    ["Offset of field: ImFontAtlas::ConfigData"]
        [::std::mem::offset_of!(ImFontAtlas, ConfigData) - 84usize];
    ["Offset of field: ImFontAtlas::TexUvLines"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvLines) - 96usize];
    ["Offset of field: ImFontAtlas::FontBuilderIO"]
        [::std::mem::offset_of!(ImFontAtlas, FontBuilderIO) - 1120usize];
    ["Offset of field: ImFontAtlas::FontBuilderFlags"]
        [::std::mem::offset_of!(ImFontAtlas, FontBuilderFlags) - 1124usize];
    ["Offset of field: ImFontAtlas::PackIdMouseCursors"]
        [::std::mem::offset_of!(ImFontAtlas, PackIdMouseCursors) - 1128usize];
    ["Offset of field: ImFontAtlas::PackIdLines"]
        [::std::mem::offset_of!(ImFontAtlas, PackIdLines) - 1132usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_float"][::std::mem::size_of::<ImVector_float>() - 12usize];
    ["Alignment of ImVector_float"][::std::mem::align_of::<ImVector_float>() - 4usize];
    ["Offset of field: ImVector_float::Size"]
        [::std::mem::offset_of!(ImVector_float, Size) - 0usize];
    ["Offset of field: ImVector_float::Capacity"]
        [::std::mem::offset_of!(ImVector_float, Capacity) - 4usize];
    ["Offset of field: ImVector_float::Data"]
        [::std::mem::offset_of!(ImVector_float, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImFontGlyph"][::std::mem::size_of::<ImVector_ImFontGlyph>() - 12usize];
    ["Alignment of ImVector_ImFontGlyph"][::std::mem::align_of::<ImVector_ImFontGlyph>() - 4usize];
    ["Offset of field: ImVector_ImFontGlyph::Size"]
        [::std::mem::offset_of!(ImVector_ImFontGlyph, Size) - 0usize];
    ["Offset of field: ImVector_ImFontGlyph::Capacity"]
        [::std::mem::offset_of!(ImVector_ImFontGlyph, Capacity) - 4usize];
    ["Offset of field: ImVector_ImFontGlyph::Data"]
        [::std::mem::offset_of!(ImVector_ImFontGlyph, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub EllipsisCharCount: ::std::os::raw::c_short,
    pub EllipsisWidth: f32,
    pub EllipsisCharStep: f32,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFont"][::std::mem::size_of::<ImFont>() - 96usize];
    ["Alignment of ImFont"][::std::mem::align_of::<ImFont>() - 4usize];
    ["Offset of field: ImFont::IndexAdvanceX"]
        [::std::mem::offset_of!(ImFont, IndexAdvanceX) - 0usize];
    ["Offset of field: ImFont::FallbackAdvanceX"]
        [::std::mem::offset_of!(ImFont, FallbackAdvanceX) - 12usize];
    ["Offset of field: ImFont::FontSize"][::std::mem::offset_of!(ImFont, FontSize) - 16usize];
    ["Offset of field: ImFont::IndexLookup"][::std::mem::offset_of!(ImFont, IndexLookup) - 20usize];
    ["Offset of field: ImFont::Glyphs"][::std::mem::offset_of!(ImFont, Glyphs) - 32usize];
    ["Offset of field: ImFont::FallbackGlyph"]
        [::std::mem::offset_of!(ImFont, FallbackGlyph) - 44usize];
    ["Offset of field: ImFont::ContainerAtlas"]
        [::std::mem::offset_of!(ImFont, ContainerAtlas) - 48usize];
    ["Offset of field: ImFont::ConfigData"][::std::mem::offset_of!(ImFont, ConfigData) - 52usize];
    ["Offset of field: ImFont::ConfigDataCount"]
        [::std::mem::offset_of!(ImFont, ConfigDataCount) - 56usize];
    ["Offset of field: ImFont::FallbackChar"]
        [::std::mem::offset_of!(ImFont, FallbackChar) - 58usize];
    ["Offset of field: ImFont::EllipsisChar"]
        [::std::mem::offset_of!(ImFont, EllipsisChar) - 60usize];
    ["Offset of field: ImFont::EllipsisCharCount"]
        [::std::mem::offset_of!(ImFont, EllipsisCharCount) - 62usize];
    ["Offset of field: ImFont::EllipsisWidth"]
        [::std::mem::offset_of!(ImFont, EllipsisWidth) - 64usize];
    ["Offset of field: ImFont::EllipsisCharStep"]
        [::std::mem::offset_of!(ImFont, EllipsisCharStep) - 68usize];
    ["Offset of field: ImFont::DirtyLookupTables"]
        [::std::mem::offset_of!(ImFont, DirtyLookupTables) - 72usize];
    ["Offset of field: ImFont::Scale"][::std::mem::offset_of!(ImFont, Scale) - 76usize];
    ["Offset of field: ImFont::Ascent"][::std::mem::offset_of!(ImFont, Ascent) - 80usize];
    ["Offset of field: ImFont::Descent"][::std::mem::offset_of!(ImFont, Descent) - 84usize];
    ["Offset of field: ImFont::MetricsTotalSurface"]
        [::std::mem::offset_of!(ImFont, MetricsTotalSurface) - 88usize];
    ["Offset of field: ImFont::Used4kPagesMap"]
        [::std::mem::offset_of!(ImFont, Used4kPagesMap) - 92usize];
};
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiViewport"][::std::mem::size_of::<ImGuiViewport>() - 72usize];
    ["Alignment of ImGuiViewport"][::std::mem::align_of::<ImGuiViewport>() - 4usize];
    ["Offset of field: ImGuiViewport::ID"][::std::mem::offset_of!(ImGuiViewport, ID) - 0usize];
    ["Offset of field: ImGuiViewport::Flags"]
        [::std::mem::offset_of!(ImGuiViewport, Flags) - 4usize];
    ["Offset of field: ImGuiViewport::Pos"][::std::mem::offset_of!(ImGuiViewport, Pos) - 8usize];
    ["Offset of field: ImGuiViewport::Size"][::std::mem::offset_of!(ImGuiViewport, Size) - 16usize];
    ["Offset of field: ImGuiViewport::WorkPos"]
        [::std::mem::offset_of!(ImGuiViewport, WorkPos) - 24usize];
    ["Offset of field: ImGuiViewport::WorkSize"]
        [::std::mem::offset_of!(ImGuiViewport, WorkSize) - 32usize];
    ["Offset of field: ImGuiViewport::DpiScale"]
        [::std::mem::offset_of!(ImGuiViewport, DpiScale) - 40usize];
    ["Offset of field: ImGuiViewport::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiViewport, ParentViewportId) - 44usize];
    ["Offset of field: ImGuiViewport::DrawData"]
        [::std::mem::offset_of!(ImGuiViewport, DrawData) - 48usize];
    ["Offset of field: ImGuiViewport::RendererUserData"]
        [::std::mem::offset_of!(ImGuiViewport, RendererUserData) - 52usize];
    ["Offset of field: ImGuiViewport::PlatformUserData"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformUserData) - 56usize];
    ["Offset of field: ImGuiViewport::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandle) - 60usize];
    ["Offset of field: ImGuiViewport::PlatformHandleRaw"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandleRaw) - 64usize];
    ["Offset of field: ImGuiViewport::PlatformWindowCreated"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformWindowCreated) - 68usize];
    ["Offset of field: ImGuiViewport::PlatformRequestMove"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestMove) - 69usize];
    ["Offset of field: ImGuiViewport::PlatformRequestResize"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestResize) - 70usize];
    ["Offset of field: ImGuiViewport::PlatformRequestClose"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestClose) - 71usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiPlatformMonitor"]
        [::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>() - 12usize];
    ["Alignment of ImVector_ImGuiPlatformMonitor"]
        [::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>() - 4usize];
    ["Offset of field: ImVector_ImGuiPlatformMonitor::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiPlatformMonitor, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiPlatformMonitor::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiPlatformMonitor, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiPlatformMonitor::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiPlatformMonitor, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiViewportPtr"]
        [::std::mem::size_of::<ImVector_ImGuiViewportPtr>() - 12usize];
    ["Alignment of ImVector_ImGuiViewportPtr"]
        [::std::mem::align_of::<ImVector_ImGuiViewportPtr>() - 4usize];
    ["Offset of field: ImVector_ImGuiViewportPtr::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPtr, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiViewportPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiViewportPtr::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPtr, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformIO {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformIO"][::std::mem::size_of::<ImGuiPlatformIO>() - 116usize];
    ["Alignment of ImGuiPlatformIO"][::std::mem::align_of::<ImGuiPlatformIO>() - 4usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateWindow) - 0usize];
    ["Offset of field: ImGuiPlatformIO::Platform_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_DestroyWindow) - 4usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ShowWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ShowWindow) - 8usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowPos) - 12usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowPos) - 16usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowSize) - 20usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowSize) - 24usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowFocus) - 28usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowFocus) - 32usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowMinimized"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowMinimized) - 36usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowTitle"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowTitle) - 40usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowAlpha"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowAlpha) - 44usize];
    ["Offset of field: ImGuiPlatformIO::Platform_UpdateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_UpdateWindow) - 48usize];
    ["Offset of field: ImGuiPlatformIO::Platform_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_RenderWindow) - 52usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SwapBuffers) - 56usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowDpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowDpiScale) - 60usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OnChangedViewport"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OnChangedViewport) - 64usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateVkSurface"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateVkSurface) - 68usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_CreateWindow) - 72usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_DestroyWindow) - 76usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SetWindowSize) - 80usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_RenderWindow) - 84usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SwapBuffers) - 88usize];
    ["Offset of field: ImGuiPlatformIO::Monitors"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Monitors) - 92usize];
    ["Offset of field: ImGuiPlatformIO::Viewports"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Viewports) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformMonitor"][::std::mem::size_of::<ImGuiPlatformMonitor>() - 40usize];
    ["Alignment of ImGuiPlatformMonitor"][::std::mem::align_of::<ImGuiPlatformMonitor>() - 4usize];
    ["Offset of field: ImGuiPlatformMonitor::MainPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainPos) - 0usize];
    ["Offset of field: ImGuiPlatformMonitor::MainSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainSize) - 8usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkPos) - 16usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkSize) - 24usize];
    ["Offset of field: ImGuiPlatformMonitor::DpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, DpiScale) - 32usize];
    ["Offset of field: ImGuiPlatformMonitor::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, PlatformHandle) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformImeData"][::std::mem::size_of::<ImGuiPlatformImeData>() - 16usize];
    ["Alignment of ImGuiPlatformImeData"][::std::mem::align_of::<ImGuiPlatformImeData>() - 4usize];
    ["Offset of field: ImGuiPlatformImeData::WantVisible"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, WantVisible) - 0usize];
    ["Offset of field: ImGuiPlatformImeData::InputPos"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputPos) - 4usize];
    ["Offset of field: ImGuiPlatformImeData::InputLineHeight"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputLineHeight) - 12usize];
};
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiFocusRequestFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiNavHighlightFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiTypingSelectFlags = ::std::os::raw::c_int;
pub type ImGuiErrorLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
unsafe extern "C" {
    #[link_name = "\u{1}?GImGui@@3PAUImGuiContext@@A"]
    pub static mut GImGui: *mut ImGuiContext;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoRecord {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_int,
    pub delete_length: ::std::os::raw::c_int,
    pub char_storage: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StbUndoRecord"][::std::mem::size_of::<StbUndoRecord>() - 16usize];
    ["Alignment of StbUndoRecord"][::std::mem::align_of::<StbUndoRecord>() - 4usize];
    ["Offset of field: StbUndoRecord::where_"]
        [::std::mem::offset_of!(StbUndoRecord, where_) - 0usize];
    ["Offset of field: StbUndoRecord::insert_length"]
        [::std::mem::offset_of!(StbUndoRecord, insert_length) - 4usize];
    ["Offset of field: StbUndoRecord::delete_length"]
        [::std::mem::offset_of!(StbUndoRecord, delete_length) - 8usize];
    ["Offset of field: StbUndoRecord::char_storage"]
        [::std::mem::offset_of!(StbUndoRecord, char_storage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoState {
    pub undo_rec: [StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_int,
    pub redo_char_point: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StbUndoState"][::std::mem::size_of::<StbUndoState>() - 3596usize];
    ["Alignment of StbUndoState"][::std::mem::align_of::<StbUndoState>() - 4usize];
    ["Offset of field: StbUndoState::undo_rec"]
        [::std::mem::offset_of!(StbUndoState, undo_rec) - 0usize];
    ["Offset of field: StbUndoState::undo_char"]
        [::std::mem::offset_of!(StbUndoState, undo_char) - 1584usize];
    ["Offset of field: StbUndoState::undo_point"]
        [::std::mem::offset_of!(StbUndoState, undo_point) - 3582usize];
    ["Offset of field: StbUndoState::redo_point"]
        [::std::mem::offset_of!(StbUndoState, redo_point) - 3584usize];
    ["Offset of field: StbUndoState::undo_char_point"]
        [::std::mem::offset_of!(StbUndoState, undo_char_point) - 3588usize];
    ["Offset of field: StbUndoState::redo_char_point"]
        [::std::mem::offset_of!(StbUndoState, redo_char_point) - 3592usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STB_TexteditState {
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub row_count_per_page: ::std::os::raw::c_int,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub padding2: ::std::os::raw::c_uchar,
    pub padding3: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undostate: StbUndoState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of STB_TexteditState"][::std::mem::size_of::<STB_TexteditState>() - 3628usize];
    ["Alignment of STB_TexteditState"][::std::mem::align_of::<STB_TexteditState>() - 4usize];
    ["Offset of field: STB_TexteditState::cursor"]
        [::std::mem::offset_of!(STB_TexteditState, cursor) - 0usize];
    ["Offset of field: STB_TexteditState::select_start"]
        [::std::mem::offset_of!(STB_TexteditState, select_start) - 4usize];
    ["Offset of field: STB_TexteditState::select_end"]
        [::std::mem::offset_of!(STB_TexteditState, select_end) - 8usize];
    ["Offset of field: STB_TexteditState::insert_mode"]
        [::std::mem::offset_of!(STB_TexteditState, insert_mode) - 12usize];
    ["Offset of field: STB_TexteditState::row_count_per_page"]
        [::std::mem::offset_of!(STB_TexteditState, row_count_per_page) - 16usize];
    ["Offset of field: STB_TexteditState::cursor_at_end_of_line"]
        [::std::mem::offset_of!(STB_TexteditState, cursor_at_end_of_line) - 20usize];
    ["Offset of field: STB_TexteditState::initialized"]
        [::std::mem::offset_of!(STB_TexteditState, initialized) - 21usize];
    ["Offset of field: STB_TexteditState::has_preferred_x"]
        [::std::mem::offset_of!(STB_TexteditState, has_preferred_x) - 22usize];
    ["Offset of field: STB_TexteditState::single_line"]
        [::std::mem::offset_of!(STB_TexteditState, single_line) - 23usize];
    ["Offset of field: STB_TexteditState::padding1"]
        [::std::mem::offset_of!(STB_TexteditState, padding1) - 24usize];
    ["Offset of field: STB_TexteditState::padding2"]
        [::std::mem::offset_of!(STB_TexteditState, padding2) - 25usize];
    ["Offset of field: STB_TexteditState::padding3"]
        [::std::mem::offset_of!(STB_TexteditState, padding3) - 26usize];
    ["Offset of field: STB_TexteditState::preferred_x"]
        [::std::mem::offset_of!(STB_TexteditState, preferred_x) - 28usize];
    ["Offset of field: STB_TexteditState::undostate"]
        [::std::mem::offset_of!(STB_TexteditState, undostate) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StbTexteditRow"][::std::mem::size_of::<StbTexteditRow>() - 24usize];
    ["Alignment of StbTexteditRow"][::std::mem::align_of::<StbTexteditRow>() - 4usize];
    ["Offset of field: StbTexteditRow::x0"][::std::mem::offset_of!(StbTexteditRow, x0) - 0usize];
    ["Offset of field: StbTexteditRow::x1"][::std::mem::offset_of!(StbTexteditRow, x1) - 4usize];
    ["Offset of field: StbTexteditRow::baseline_y_delta"]
        [::std::mem::offset_of!(StbTexteditRow, baseline_y_delta) - 8usize];
    ["Offset of field: StbTexteditRow::ymin"]
        [::std::mem::offset_of!(StbTexteditRow, ymin) - 12usize];
    ["Offset of field: StbTexteditRow::ymax"]
        [::std::mem::offset_of!(StbTexteditRow, ymax) - 16usize];
    ["Offset of field: StbTexteditRow::num_chars"]
        [::std::mem::offset_of!(StbTexteditRow, num_chars) - 20usize];
};
pub type ImFileHandle = *mut FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec1"][::std::mem::size_of::<ImVec1>() - 4usize];
    ["Alignment of ImVec1"][::std::mem::align_of::<ImVec1>() - 4usize];
    ["Offset of field: ImVec1::x"][::std::mem::offset_of!(ImVec1, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2ih"][::std::mem::size_of::<ImVec2ih>() - 4usize];
    ["Alignment of ImVec2ih"][::std::mem::align_of::<ImVec2ih>() - 2usize];
    ["Offset of field: ImVec2ih::x"][::std::mem::offset_of!(ImVec2ih, x) - 0usize];
    ["Offset of field: ImVec2ih::y"][::std::mem::offset_of!(ImVec2ih, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImRect"][::std::mem::size_of::<ImRect>() - 16usize];
    ["Alignment of ImRect"][::std::mem::align_of::<ImRect>() - 4usize];
    ["Offset of field: ImRect::Min"][::std::mem::offset_of!(ImRect, Min) - 0usize];
    ["Offset of field: ImRect::Max"][::std::mem::offset_of!(ImRect, Max) - 8usize];
};
pub type ImBitArrayPtr = *mut ImU32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitVector {
    pub Storage: ImVector_ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImBitVector"][::std::mem::size_of::<ImBitVector>() - 12usize];
    ["Alignment of ImBitVector"][::std::mem::align_of::<ImBitVector>() - 4usize];
    ["Offset of field: ImBitVector::Storage"]
        [::std::mem::offset_of!(ImBitVector, Storage) - 0usize];
};
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_int {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_int"][::std::mem::size_of::<ImVector_int>() - 12usize];
    ["Alignment of ImVector_int"][::std::mem::align_of::<ImVector_int>() - 4usize];
    ["Offset of field: ImVector_int::Size"][::std::mem::offset_of!(ImVector_int, Size) - 0usize];
    ["Offset of field: ImVector_int::Capacity"]
        [::std::mem::offset_of!(ImVector_int, Capacity) - 4usize];
    ["Offset of field: ImVector_int::Data"][::std::mem::offset_of!(ImVector_int, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextIndex {
    pub LineOffsets: ImVector_int,
    pub EndOffset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextIndex"][::std::mem::size_of::<ImGuiTextIndex>() - 16usize];
    ["Alignment of ImGuiTextIndex"][::std::mem::align_of::<ImGuiTextIndex>() - 4usize];
    ["Offset of field: ImGuiTextIndex::LineOffsets"]
        [::std::mem::offset_of!(ImGuiTextIndex, LineOffsets) - 0usize];
    ["Offset of field: ImGuiTextIndex::EndOffset"]
        [::std::mem::offset_of!(ImGuiTextIndex, EndOffset) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub TempBuffer: ImVector_ImVec2,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawListSharedData"][::std::mem::size_of::<ImDrawListSharedData>() - 512usize];
    ["Alignment of ImDrawListSharedData"][::std::mem::align_of::<ImDrawListSharedData>() - 4usize];
    ["Offset of field: ImDrawListSharedData::TexUvWhitePixel"]
        [::std::mem::offset_of!(ImDrawListSharedData, TexUvWhitePixel) - 0usize];
    ["Offset of field: ImDrawListSharedData::Font"]
        [::std::mem::offset_of!(ImDrawListSharedData, Font) - 8usize];
    ["Offset of field: ImDrawListSharedData::FontSize"]
        [::std::mem::offset_of!(ImDrawListSharedData, FontSize) - 12usize];
    ["Offset of field: ImDrawListSharedData::CurveTessellationTol"]
        [::std::mem::offset_of!(ImDrawListSharedData, CurveTessellationTol) - 16usize];
    ["Offset of field: ImDrawListSharedData::CircleSegmentMaxError"]
        [::std::mem::offset_of!(ImDrawListSharedData, CircleSegmentMaxError) - 20usize];
    ["Offset of field: ImDrawListSharedData::ClipRectFullscreen"]
        [::std::mem::offset_of!(ImDrawListSharedData, ClipRectFullscreen) - 24usize];
    ["Offset of field: ImDrawListSharedData::InitialFlags"]
        [::std::mem::offset_of!(ImDrawListSharedData, InitialFlags) - 40usize];
    ["Offset of field: ImDrawListSharedData::TempBuffer"]
        [::std::mem::offset_of!(ImDrawListSharedData, TempBuffer) - 44usize];
    ["Offset of field: ImDrawListSharedData::ArcFastVtx"]
        [::std::mem::offset_of!(ImDrawListSharedData, ArcFastVtx) - 56usize];
    ["Offset of field: ImDrawListSharedData::ArcFastRadiusCutoff"]
        [::std::mem::offset_of!(ImDrawListSharedData, ArcFastRadiusCutoff) - 440usize];
    ["Offset of field: ImDrawListSharedData::CircleSegmentCounts"]
        [::std::mem::offset_of!(ImDrawListSharedData, CircleSegmentCounts) - 444usize];
    ["Offset of field: ImDrawListSharedData::TexUvLines"]
        [::std::mem::offset_of!(ImDrawListSharedData, TexUvLines) - 508usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawDataBuilder {
    pub Layers: [*mut ImVector_ImDrawListPtr; 2usize],
    pub LayerData1: ImVector_ImDrawListPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawDataBuilder"][::std::mem::size_of::<ImDrawDataBuilder>() - 20usize];
    ["Alignment of ImDrawDataBuilder"][::std::mem::align_of::<ImDrawDataBuilder>() - 4usize];
    ["Offset of field: ImDrawDataBuilder::Layers"]
        [::std::mem::offset_of!(ImDrawDataBuilder, Layers) - 0usize];
    ["Offset of field: ImDrawDataBuilder::LayerData1"]
        [::std::mem::offset_of!(ImDrawDataBuilder, LayerData1) - 8usize];
};
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags__ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags__ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags__ImGuiItemFlags_NoWindowHoverableCheck: ImGuiItemFlags_ = 256;
pub const ImGuiItemFlags__ImGuiItemFlags_AllowOverlap: ImGuiItemFlags_ = 512;
pub const ImGuiItemFlags__ImGuiItemFlags_Inputable: ImGuiItemFlags_ = 1024;
pub const ImGuiItemFlags__ImGuiItemFlags_HasSelectionUserData: ImGuiItemFlags_ = 2048;
pub type ImGuiItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_FocusedByTabbing: ImGuiItemStatusFlags_ = 256;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Visible: ImGuiItemStatusFlags_ = 512;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_DelayMask_: ImGuiHoveredFlagsPrivate_ =
    245760;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_AllowedMaskForIsWindowHovered:
    ImGuiHoveredFlagsPrivate_ = 12479;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_AllowedMaskForIsItemHovered:
    ImGuiHoveredFlagsPrivate_ = 262048;
pub type ImGuiHoveredFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_Multiline: ImGuiInputTextFlagsPrivate_ =
    67108864;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_NoMarkEdited:
    ImGuiInputTextFlagsPrivate_ = 134217728;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_MergedItem: ImGuiInputTextFlagsPrivate_ =
    268435456;
pub type ImGuiInputTextFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickRelease:
    ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickReleaseAnywhere:
    ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ =
    128;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ =
    256;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDragDropHold:
    ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ =
    2048;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AllowOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ =
    8192;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ =
    32768;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ =
    65536;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ =
    131072;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ =
    524288;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoSetKeyOwner: ImGuiButtonFlagsPrivate_ =
    1048576;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoTestKeyOwner: ImGuiButtonFlagsPrivate_ =
    2097152;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ =
    32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiComboFlagsPrivate__ImGuiComboFlags_CustomPreview: ImGuiComboFlagsPrivate_ = 1048576;
pub type ImGuiComboFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoHoldingActiveID:
    ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnNav:
    ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnClick:
    ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnRelease:
    ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SpanAvailWidth:
    ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SetNavIdOnHover:
    ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoPadWithHalfSpacing:
    ImGuiSelectableFlagsPrivate_ = 67108864;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoSetKeyOwner:
    ImGuiSelectableFlagsPrivate_ = 134217728;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_ClipLabelForTrailingButton:
    ImGuiTreeNodeFlagsPrivate_ = 1048576;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_UpsideDownArrow:
    ImGuiTreeNodeFlagsPrivate_ = 2097152;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_int;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_None: ImGuiFocusRequestFlags_ = 0;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_RestoreFocusedChild:
    ImGuiFocusRequestFlags_ = 1;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_UnlessBelowModal: ImGuiFocusRequestFlags_ =
    2;
pub type ImGuiFocusRequestFlags_ = ::std::os::raw::c_int;
pub const ImGuiTextFlags__ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags__ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_OverridePrevious: ImGuiTooltipFlags_ = 2;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_int;
pub const ImGuiLayoutType__ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType__ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_int;
pub const ImGuiLogType_ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::std::os::raw::c_int;
pub const ImGuiAxis_ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_int;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataVarInfo {
    pub Type: ImGuiDataType,
    pub Count: ImU32,
    pub Offset: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataVarInfo"][::std::mem::size_of::<ImGuiDataVarInfo>() - 12usize];
    ["Alignment of ImGuiDataVarInfo"][::std::mem::align_of::<ImGuiDataVarInfo>() - 4usize];
    ["Offset of field: ImGuiDataVarInfo::Type"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Type) - 0usize];
    ["Offset of field: ImGuiDataVarInfo::Count"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Count) - 4usize];
    ["Offset of field: ImGuiDataVarInfo::Offset"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeTempStorage {
    pub Data: [ImU8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataTypeTempStorage"]
        [::std::mem::size_of::<ImGuiDataTypeTempStorage>() - 8usize];
    ["Alignment of ImGuiDataTypeTempStorage"]
        [::std::mem::align_of::<ImGuiDataTypeTempStorage>() - 1usize];
    ["Offset of field: ImGuiDataTypeTempStorage::Data"]
        [::std::mem::offset_of!(ImGuiDataTypeTempStorage, Data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataTypeInfo"][::std::mem::size_of::<ImGuiDataTypeInfo>() - 16usize];
    ["Alignment of ImGuiDataTypeInfo"][::std::mem::align_of::<ImGuiDataTypeInfo>() - 4usize];
    ["Offset of field: ImGuiDataTypeInfo::Size"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, Size) - 0usize];
    ["Offset of field: ImGuiDataTypeInfo::Name"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, Name) - 4usize];
    ["Offset of field: ImGuiDataTypeInfo::PrintFmt"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, PrintFmt) - 8usize];
    ["Offset of field: ImGuiDataTypeInfo::ScanFmt"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, ScanFmt) - 12usize];
};
pub const ImGuiDataTypePrivate__ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataTypePrivate__ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataTypePrivate__ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiColorMod"][::std::mem::size_of::<ImGuiColorMod>() - 20usize];
    ["Alignment of ImGuiColorMod"][::std::mem::align_of::<ImGuiColorMod>() - 4usize];
    ["Offset of field: ImGuiColorMod::Col"][::std::mem::offset_of!(ImGuiColorMod, Col) - 0usize];
    ["Offset of field: ImGuiColorMod::BackupValue"]
        [::std::mem::offset_of!(ImGuiColorMod, BackupValue) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyleMod__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>() - 8usize];
    ["Alignment of ImGuiStyleMod__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>() - 4usize];
    ["Offset of field: ImGuiStyleMod__bindgen_ty_1::BackupInt"]
        [::std::mem::offset_of!(ImGuiStyleMod__bindgen_ty_1, BackupInt) - 0usize];
    ["Offset of field: ImGuiStyleMod__bindgen_ty_1::BackupFloat"]
        [::std::mem::offset_of!(ImGuiStyleMod__bindgen_ty_1, BackupFloat) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyleMod"][::std::mem::size_of::<ImGuiStyleMod>() - 12usize];
    ["Alignment of ImGuiStyleMod"][::std::mem::align_of::<ImGuiStyleMod>() - 4usize];
    ["Offset of field: ImGuiStyleMod::VarIdx"]
        [::std::mem::offset_of!(ImGuiStyleMod, VarIdx) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiComboPreviewData"][::std::mem::size_of::<ImGuiComboPreviewData>() - 48usize];
    ["Alignment of ImGuiComboPreviewData"]
        [::std::mem::align_of::<ImGuiComboPreviewData>() - 4usize];
    ["Offset of field: ImGuiComboPreviewData::PreviewRect"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, PreviewRect) - 0usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorPos) - 16usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorMaxPos) - 24usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorPosPrevLine) - 32usize];
    ["Offset of field: ImGuiComboPreviewData::BackupPrevLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupPrevLineTextBaseOffset) - 40usize];
    ["Offset of field: ImGuiComboPreviewData::BackupLayout"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupLayout) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub BackupIsSameLine: bool,
    pub EmitItem: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiGroupData"][::std::mem::size_of::<ImGuiGroupData>() - 56usize];
    ["Alignment of ImGuiGroupData"][::std::mem::align_of::<ImGuiGroupData>() - 4usize];
    ["Offset of field: ImGuiGroupData::WindowID"]
        [::std::mem::offset_of!(ImGuiGroupData, WindowID) - 0usize];
    ["Offset of field: ImGuiGroupData::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorPos) - 4usize];
    ["Offset of field: ImGuiGroupData::BackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorMaxPos) - 12usize];
    ["Offset of field: ImGuiGroupData::BackupCursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorPosPrevLine) - 20usize];
    ["Offset of field: ImGuiGroupData::BackupIndent"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupIndent) - 28usize];
    ["Offset of field: ImGuiGroupData::BackupGroupOffset"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupGroupOffset) - 32usize];
    ["Offset of field: ImGuiGroupData::BackupCurrLineSize"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCurrLineSize) - 36usize];
    ["Offset of field: ImGuiGroupData::BackupCurrLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCurrLineTextBaseOffset) - 44usize];
    ["Offset of field: ImGuiGroupData::BackupActiveIdIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupActiveIdIsAlive) - 48usize];
    ["Offset of field: ImGuiGroupData::BackupActiveIdPreviousFrameIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupActiveIdPreviousFrameIsAlive) - 52usize];
    ["Offset of field: ImGuiGroupData::BackupHoveredIdIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupHoveredIdIsAlive) - 53usize];
    ["Offset of field: ImGuiGroupData::BackupIsSameLine"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupIsSameLine) - 54usize];
    ["Offset of field: ImGuiGroupData::EmitItem"]
        [::std::mem::offset_of!(ImGuiGroupData, EmitItem) - 55usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMenuColumns"][::std::mem::size_of::<ImGuiMenuColumns>() - 28usize];
    ["Alignment of ImGuiMenuColumns"][::std::mem::align_of::<ImGuiMenuColumns>() - 4usize];
    ["Offset of field: ImGuiMenuColumns::TotalWidth"]
        [::std::mem::offset_of!(ImGuiMenuColumns, TotalWidth) - 0usize];
    ["Offset of field: ImGuiMenuColumns::NextTotalWidth"]
        [::std::mem::offset_of!(ImGuiMenuColumns, NextTotalWidth) - 4usize];
    ["Offset of field: ImGuiMenuColumns::Spacing"]
        [::std::mem::offset_of!(ImGuiMenuColumns, Spacing) - 8usize];
    ["Offset of field: ImGuiMenuColumns::OffsetIcon"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetIcon) - 10usize];
    ["Offset of field: ImGuiMenuColumns::OffsetLabel"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetLabel) - 12usize];
    ["Offset of field: ImGuiMenuColumns::OffsetShortcut"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetShortcut) - 14usize];
    ["Offset of field: ImGuiMenuColumns::OffsetMark"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetMark) - 16usize];
    ["Offset of field: ImGuiMenuColumns::Widths"]
        [::std::mem::offset_of!(ImGuiMenuColumns, Widths) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivatedState {
    pub ID: ImGuiID,
    pub TextA: ImVector_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextDeactivatedState"]
        [::std::mem::size_of::<ImGuiInputTextDeactivatedState>() - 16usize];
    ["Alignment of ImGuiInputTextDeactivatedState"]
        [::std::mem::align_of::<ImGuiInputTextDeactivatedState>() - 4usize];
    ["Offset of field: ImGuiInputTextDeactivatedState::ID"]
        [::std::mem::offset_of!(ImGuiInputTextDeactivatedState, ID) - 0usize];
    ["Offset of field: ImGuiInputTextDeactivatedState::TextA"]
        [::std::mem::offset_of!(ImGuiInputTextDeactivatedState, TextA) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextState {
    pub Ctx: *mut ImGuiContext,
    pub ID: ImGuiID,
    pub CurLenW: ::std::os::raw::c_int,
    pub CurLenA: ::std::os::raw::c_int,
    pub TextW: ImVector_ImWchar,
    pub TextA: ImVector_char,
    pub InitialTextA: ImVector_char,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::std::os::raw::c_int,
    pub ScrollX: f32,
    pub Stb: STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub Flags: ImGuiInputTextFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextState"][::std::mem::size_of::<ImGuiInputTextState>() - 3704usize];
    ["Alignment of ImGuiInputTextState"][::std::mem::align_of::<ImGuiInputTextState>() - 4usize];
    ["Offset of field: ImGuiInputTextState::Ctx"]
        [::std::mem::offset_of!(ImGuiInputTextState, Ctx) - 0usize];
    ["Offset of field: ImGuiInputTextState::ID"]
        [::std::mem::offset_of!(ImGuiInputTextState, ID) - 4usize];
    ["Offset of field: ImGuiInputTextState::CurLenW"]
        [::std::mem::offset_of!(ImGuiInputTextState, CurLenW) - 8usize];
    ["Offset of field: ImGuiInputTextState::CurLenA"]
        [::std::mem::offset_of!(ImGuiInputTextState, CurLenA) - 12usize];
    ["Offset of field: ImGuiInputTextState::TextW"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextW) - 16usize];
    ["Offset of field: ImGuiInputTextState::TextA"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextA) - 28usize];
    ["Offset of field: ImGuiInputTextState::InitialTextA"]
        [::std::mem::offset_of!(ImGuiInputTextState, InitialTextA) - 40usize];
    ["Offset of field: ImGuiInputTextState::TextAIsValid"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextAIsValid) - 52usize];
    ["Offset of field: ImGuiInputTextState::BufCapacityA"]
        [::std::mem::offset_of!(ImGuiInputTextState, BufCapacityA) - 56usize];
    ["Offset of field: ImGuiInputTextState::ScrollX"]
        [::std::mem::offset_of!(ImGuiInputTextState, ScrollX) - 60usize];
    ["Offset of field: ImGuiInputTextState::Stb"]
        [::std::mem::offset_of!(ImGuiInputTextState, Stb) - 64usize];
    ["Offset of field: ImGuiInputTextState::CursorAnim"]
        [::std::mem::offset_of!(ImGuiInputTextState, CursorAnim) - 3692usize];
    ["Offset of field: ImGuiInputTextState::CursorFollow"]
        [::std::mem::offset_of!(ImGuiInputTextState, CursorFollow) - 3696usize];
    ["Offset of field: ImGuiInputTextState::SelectedAllMouseLock"]
        [::std::mem::offset_of!(ImGuiInputTextState, SelectedAllMouseLock) - 3697usize];
    ["Offset of field: ImGuiInputTextState::Edited"]
        [::std::mem::offset_of!(ImGuiInputTextState, Edited) - 3698usize];
    ["Offset of field: ImGuiInputTextState::Flags"]
        [::std::mem::offset_of!(ImGuiInputTextState, Flags) - 3700usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub BackupNavWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPopupData"][::std::mem::size_of::<ImGuiPopupData>() - 40usize];
    ["Alignment of ImGuiPopupData"][::std::mem::align_of::<ImGuiPopupData>() - 4usize];
    ["Offset of field: ImGuiPopupData::PopupId"]
        [::std::mem::offset_of!(ImGuiPopupData, PopupId) - 0usize];
    ["Offset of field: ImGuiPopupData::Window"]
        [::std::mem::offset_of!(ImGuiPopupData, Window) - 4usize];
    ["Offset of field: ImGuiPopupData::BackupNavWindow"]
        [::std::mem::offset_of!(ImGuiPopupData, BackupNavWindow) - 8usize];
    ["Offset of field: ImGuiPopupData::ParentNavLayer"]
        [::std::mem::offset_of!(ImGuiPopupData, ParentNavLayer) - 12usize];
    ["Offset of field: ImGuiPopupData::OpenFrameCount"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenFrameCount) - 16usize];
    ["Offset of field: ImGuiPopupData::OpenParentId"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenParentId) - 20usize];
    ["Offset of field: ImGuiPopupData::OpenPopupPos"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenPopupPos) - 24usize];
    ["Offset of field: ImGuiPopupData::OpenMousePos"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenMousePos) - 32usize];
};
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasContentSize:
    ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasCollapsed:
    ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSizeConstraint:
    ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ =
    32;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ =
    64;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ =
    128;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasChildFlags:
    ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasViewport:
    ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ =
    1024;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasWindowClass:
    ImGuiNextWindowDataFlags_ = 2048;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub ChildFlags: ImGuiChildFlags,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNextWindowData"][::std::mem::size_of::<ImGuiNextWindowData>() - 140usize];
    ["Alignment of ImGuiNextWindowData"][::std::mem::align_of::<ImGuiNextWindowData>() - 4usize];
    ["Offset of field: ImGuiNextWindowData::Flags"]
        [::std::mem::offset_of!(ImGuiNextWindowData, Flags) - 0usize];
    ["Offset of field: ImGuiNextWindowData::PosCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosCond) - 4usize];
    ["Offset of field: ImGuiNextWindowData::SizeCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCond) - 8usize];
    ["Offset of field: ImGuiNextWindowData::CollapsedCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, CollapsedCond) - 12usize];
    ["Offset of field: ImGuiNextWindowData::DockCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, DockCond) - 16usize];
    ["Offset of field: ImGuiNextWindowData::PosVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosVal) - 20usize];
    ["Offset of field: ImGuiNextWindowData::PosPivotVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosPivotVal) - 28usize];
    ["Offset of field: ImGuiNextWindowData::SizeVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeVal) - 36usize];
    ["Offset of field: ImGuiNextWindowData::ContentSizeVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ContentSizeVal) - 44usize];
    ["Offset of field: ImGuiNextWindowData::ScrollVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ScrollVal) - 52usize];
    ["Offset of field: ImGuiNextWindowData::ChildFlags"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ChildFlags) - 60usize];
    ["Offset of field: ImGuiNextWindowData::PosUndock"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosUndock) - 64usize];
    ["Offset of field: ImGuiNextWindowData::CollapsedVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, CollapsedVal) - 65usize];
    ["Offset of field: ImGuiNextWindowData::SizeConstraintRect"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeConstraintRect) - 68usize];
    ["Offset of field: ImGuiNextWindowData::SizeCallback"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCallback) - 84usize];
    ["Offset of field: ImGuiNextWindowData::SizeCallbackUserData"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCallbackUserData) - 88usize];
    ["Offset of field: ImGuiNextWindowData::BgAlphaVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, BgAlphaVal) - 92usize];
    ["Offset of field: ImGuiNextWindowData::ViewportId"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ViewportId) - 96usize];
    ["Offset of field: ImGuiNextWindowData::DockId"]
        [::std::mem::offset_of!(ImGuiNextWindowData, DockId) - 100usize];
    ["Offset of field: ImGuiNextWindowData::WindowClass"]
        [::std::mem::offset_of!(ImGuiNextWindowData, WindowClass) - 104usize];
    ["Offset of field: ImGuiNextWindowData::MenuBarOffsetMinVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, MenuBarOffsetMinVal) - 132usize];
};
pub type ImGuiSelectionUserData = ImS64;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub Width: f32,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub OpenCond: ImGuiCond,
    pub OpenVal: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNextItemData"][::std::mem::size_of::<ImGuiNextItemData>() - 32usize];
    ["Alignment of ImGuiNextItemData"][::std::mem::align_of::<ImGuiNextItemData>() - 8usize];
    ["Offset of field: ImGuiNextItemData::Flags"]
        [::std::mem::offset_of!(ImGuiNextItemData, Flags) - 0usize];
    ["Offset of field: ImGuiNextItemData::ItemFlags"]
        [::std::mem::offset_of!(ImGuiNextItemData, ItemFlags) - 4usize];
    ["Offset of field: ImGuiNextItemData::Width"]
        [::std::mem::offset_of!(ImGuiNextItemData, Width) - 8usize];
    ["Offset of field: ImGuiNextItemData::SelectionUserData"]
        [::std::mem::offset_of!(ImGuiNextItemData, SelectionUserData) - 16usize];
    ["Offset of field: ImGuiNextItemData::OpenCond"]
        [::std::mem::offset_of!(ImGuiNextItemData, OpenCond) - 24usize];
    ["Offset of field: ImGuiNextItemData::OpenVal"]
        [::std::mem::offset_of!(ImGuiNextItemData, OpenVal) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub InFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiLastItemData"][::std::mem::size_of::<ImGuiLastItemData>() - 60usize];
    ["Alignment of ImGuiLastItemData"][::std::mem::align_of::<ImGuiLastItemData>() - 4usize];
    ["Offset of field: ImGuiLastItemData::ID"]
        [::std::mem::offset_of!(ImGuiLastItemData, ID) - 0usize];
    ["Offset of field: ImGuiLastItemData::InFlags"]
        [::std::mem::offset_of!(ImGuiLastItemData, InFlags) - 4usize];
    ["Offset of field: ImGuiLastItemData::StatusFlags"]
        [::std::mem::offset_of!(ImGuiLastItemData, StatusFlags) - 8usize];
    ["Offset of field: ImGuiLastItemData::Rect"]
        [::std::mem::offset_of!(ImGuiLastItemData, Rect) - 12usize];
    ["Offset of field: ImGuiLastItemData::NavRect"]
        [::std::mem::offset_of!(ImGuiLastItemData, NavRect) - 28usize];
    ["Offset of field: ImGuiLastItemData::DisplayRect"]
        [::std::mem::offset_of!(ImGuiLastItemData, DisplayRect) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavTreeNodeData {
    pub ID: ImGuiID,
    pub InFlags: ImGuiItemFlags,
    pub NavRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNavTreeNodeData"][::std::mem::size_of::<ImGuiNavTreeNodeData>() - 24usize];
    ["Alignment of ImGuiNavTreeNodeData"][::std::mem::align_of::<ImGuiNavTreeNodeData>() - 4usize];
    ["Offset of field: ImGuiNavTreeNodeData::ID"]
        [::std::mem::offset_of!(ImGuiNavTreeNodeData, ID) - 0usize];
    ["Offset of field: ImGuiNavTreeNodeData::InFlags"]
        [::std::mem::offset_of!(ImGuiNavTreeNodeData, InFlags) - 4usize];
    ["Offset of field: ImGuiNavTreeNodeData::NavRect"]
        [::std::mem::offset_of!(ImGuiNavTreeNodeData, NavRect) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackSizes {
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStackSizes"][::std::mem::size_of::<ImGuiStackSizes>() - 18usize];
    ["Alignment of ImGuiStackSizes"][::std::mem::align_of::<ImGuiStackSizes>() - 2usize];
    ["Offset of field: ImGuiStackSizes::SizeOfIDStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfIDStack) - 0usize];
    ["Offset of field: ImGuiStackSizes::SizeOfColorStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfColorStack) - 2usize];
    ["Offset of field: ImGuiStackSizes::SizeOfStyleVarStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfStyleVarStack) - 4usize];
    ["Offset of field: ImGuiStackSizes::SizeOfFontStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfFontStack) - 6usize];
    ["Offset of field: ImGuiStackSizes::SizeOfFocusScopeStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfFocusScopeStack) - 8usize];
    ["Offset of field: ImGuiStackSizes::SizeOfGroupStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfGroupStack) - 10usize];
    ["Offset of field: ImGuiStackSizes::SizeOfItemFlagsStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfItemFlagsStack) - 12usize];
    ["Offset of field: ImGuiStackSizes::SizeOfBeginPopupStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfBeginPopupStack) - 14usize];
    ["Offset of field: ImGuiStackSizes::SizeOfDisabledStack"]
        [::std::mem::offset_of!(ImGuiStackSizes, SizeOfDisabledStack) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesOnBegin: ImGuiStackSizes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowStackData"][::std::mem::size_of::<ImGuiWindowStackData>() - 84usize];
    ["Alignment of ImGuiWindowStackData"][::std::mem::align_of::<ImGuiWindowStackData>() - 4usize];
    ["Offset of field: ImGuiWindowStackData::Window"]
        [::std::mem::offset_of!(ImGuiWindowStackData, Window) - 0usize];
    ["Offset of field: ImGuiWindowStackData::ParentLastItemDataBackup"]
        [::std::mem::offset_of!(ImGuiWindowStackData, ParentLastItemDataBackup) - 4usize];
    ["Offset of field: ImGuiWindowStackData::StackSizesOnBegin"]
        [::std::mem::offset_of!(ImGuiWindowStackData, StackSizesOnBegin) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiShrinkWidthItem"][::std::mem::size_of::<ImGuiShrinkWidthItem>() - 12usize];
    ["Alignment of ImGuiShrinkWidthItem"][::std::mem::align_of::<ImGuiShrinkWidthItem>() - 4usize];
    ["Offset of field: ImGuiShrinkWidthItem::Index"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, Index) - 0usize];
    ["Offset of field: ImGuiShrinkWidthItem::Width"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, Width) - 4usize];
    ["Offset of field: ImGuiShrinkWidthItem::InitialWidth"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, InitialWidth) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPtrOrIndex"][::std::mem::size_of::<ImGuiPtrOrIndex>() - 8usize];
    ["Alignment of ImGuiPtrOrIndex"][::std::mem::align_of::<ImGuiPtrOrIndex>() - 4usize];
    ["Offset of field: ImGuiPtrOrIndex::Ptr"]
        [::std::mem::offset_of!(ImGuiPtrOrIndex, Ptr) - 0usize];
    ["Offset of field: ImGuiPtrOrIndex::Index"]
        [::std::mem::offset_of!(ImGuiPtrOrIndex, Index) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
    pub Storage: [ImU32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN"][::std::mem::size_of::<
        ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN,
    >() - 20usize];
    ["Alignment of ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN"]
        [::std::mem::align_of::<ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>()
            - 4usize];
    ["Offset of field: ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN::Storage"][::std::mem::offset_of!(
        ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN,
        Storage
    )
        - 0usize];
};
pub type ImBitArrayForNamedKeys = ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN;
pub const ImGuiInputEventType_ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_int;
pub const ImGuiInputSource_ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_ImGuiInputSource_Clipboard: ImGuiInputSource = 4;
pub const ImGuiInputSource_ImGuiInputSource_COUNT: ImGuiInputSource = 5;
pub type ImGuiInputSource = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMousePos"][::std::mem::size_of::<ImGuiInputEventMousePos>() - 12usize];
    ["Alignment of ImGuiInputEventMousePos"]
        [::std::mem::align_of::<ImGuiInputEventMousePos>() - 4usize];
    ["Offset of field: ImGuiInputEventMousePos::PosX"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, PosX) - 0usize];
    ["Offset of field: ImGuiInputEventMousePos::PosY"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, PosY) - 4usize];
    ["Offset of field: ImGuiInputEventMousePos::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseWheel"]
        [::std::mem::size_of::<ImGuiInputEventMouseWheel>() - 12usize];
    ["Alignment of ImGuiInputEventMouseWheel"]
        [::std::mem::align_of::<ImGuiInputEventMouseWheel>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseWheel::WheelX"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, WheelX) - 0usize];
    ["Offset of field: ImGuiInputEventMouseWheel::WheelY"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, WheelY) - 4usize];
    ["Offset of field: ImGuiInputEventMouseWheel::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseButton"]
        [::std::mem::size_of::<ImGuiInputEventMouseButton>() - 12usize];
    ["Alignment of ImGuiInputEventMouseButton"]
        [::std::mem::align_of::<ImGuiInputEventMouseButton>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseButton::Button"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, Button) - 0usize];
    ["Offset of field: ImGuiInputEventMouseButton::Down"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, Down) - 4usize];
    ["Offset of field: ImGuiInputEventMouseButton::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseViewport"]
        [::std::mem::size_of::<ImGuiInputEventMouseViewport>() - 4usize];
    ["Alignment of ImGuiInputEventMouseViewport"]
        [::std::mem::align_of::<ImGuiInputEventMouseViewport>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseViewport::HoveredViewportID"]
        [::std::mem::offset_of!(ImGuiInputEventMouseViewport, HoveredViewportID) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventKey"][::std::mem::size_of::<ImGuiInputEventKey>() - 12usize];
    ["Alignment of ImGuiInputEventKey"][::std::mem::align_of::<ImGuiInputEventKey>() - 4usize];
    ["Offset of field: ImGuiInputEventKey::Key"]
        [::std::mem::offset_of!(ImGuiInputEventKey, Key) - 0usize];
    ["Offset of field: ImGuiInputEventKey::Down"]
        [::std::mem::offset_of!(ImGuiInputEventKey, Down) - 4usize];
    ["Offset of field: ImGuiInputEventKey::AnalogValue"]
        [::std::mem::offset_of!(ImGuiInputEventKey, AnalogValue) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventText"][::std::mem::size_of::<ImGuiInputEventText>() - 4usize];
    ["Alignment of ImGuiInputEventText"][::std::mem::align_of::<ImGuiInputEventText>() - 4usize];
    ["Offset of field: ImGuiInputEventText::Char"]
        [::std::mem::offset_of!(ImGuiInputEventText, Char) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventAppFocused"]
        [::std::mem::size_of::<ImGuiInputEventAppFocused>() - 1usize];
    ["Alignment of ImGuiInputEventAppFocused"]
        [::std::mem::align_of::<ImGuiInputEventAppFocused>() - 1usize];
    ["Offset of field: ImGuiInputEventAppFocused::Focused"]
        [::std::mem::offset_of!(ImGuiInputEventAppFocused, Focused) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub EventId: ImU32,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEvent__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiInputEvent__bindgen_ty_1>() - 12usize];
    ["Alignment of ImGuiInputEvent__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiInputEvent__bindgen_ty_1>() - 4usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MousePos"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MousePos) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseWheel"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseWheel) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseButton"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseButton) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseViewport"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseViewport) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::Key"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, Key) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::Text"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, Text) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::AppFocused"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, AppFocused) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEvent"][::std::mem::size_of::<ImGuiInputEvent>() - 28usize];
    ["Alignment of ImGuiInputEvent"][::std::mem::align_of::<ImGuiInputEvent>() - 4usize];
    ["Offset of field: ImGuiInputEvent::Type"]
        [::std::mem::offset_of!(ImGuiInputEvent, Type) - 0usize];
    ["Offset of field: ImGuiInputEvent::Source"]
        [::std::mem::offset_of!(ImGuiInputEvent, Source) - 4usize];
    ["Offset of field: ImGuiInputEvent::EventId"]
        [::std::mem::offset_of!(ImGuiInputEvent, EventId) - 8usize];
    ["Offset of field: ImGuiInputEvent::AddedByTestEngine"]
        [::std::mem::offset_of!(ImGuiInputEvent, AddedByTestEngine) - 24usize];
};
pub type ImGuiKeyRoutingIndex = ImS16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyRoutingData {
    pub NextEntryIndex: ImGuiKeyRoutingIndex,
    pub Mods: ImU16,
    pub RoutingNextScore: ImU8,
    pub RoutingCurr: ImGuiID,
    pub RoutingNext: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyRoutingData"][::std::mem::size_of::<ImGuiKeyRoutingData>() - 16usize];
    ["Alignment of ImGuiKeyRoutingData"][::std::mem::align_of::<ImGuiKeyRoutingData>() - 4usize];
    ["Offset of field: ImGuiKeyRoutingData::NextEntryIndex"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, NextEntryIndex) - 0usize];
    ["Offset of field: ImGuiKeyRoutingData::Mods"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, Mods) - 2usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingNextScore"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingNextScore) - 4usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingCurr"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingCurr) - 8usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingNext"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingNext) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiKeyRoutingData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiKeyRoutingData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiKeyRoutingData"]
        [::std::mem::size_of::<ImVector_ImGuiKeyRoutingData>() - 12usize];
    ["Alignment of ImVector_ImGuiKeyRoutingData"]
        [::std::mem::align_of::<ImVector_ImGuiKeyRoutingData>() - 4usize];
    ["Offset of field: ImVector_ImGuiKeyRoutingData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiKeyRoutingData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiKeyRoutingData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiKeyRoutingData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiKeyRoutingData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiKeyRoutingData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyRoutingTable {
    pub Index: [ImGuiKeyRoutingIndex; 154usize],
    pub Entries: ImVector_ImGuiKeyRoutingData,
    pub EntriesNext: ImVector_ImGuiKeyRoutingData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyRoutingTable"][::std::mem::size_of::<ImGuiKeyRoutingTable>() - 332usize];
    ["Alignment of ImGuiKeyRoutingTable"][::std::mem::align_of::<ImGuiKeyRoutingTable>() - 4usize];
    ["Offset of field: ImGuiKeyRoutingTable::Index"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, Index) - 0usize];
    ["Offset of field: ImGuiKeyRoutingTable::Entries"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, Entries) - 308usize];
    ["Offset of field: ImGuiKeyRoutingTable::EntriesNext"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, EntriesNext) - 320usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyOwnerData {
    pub OwnerCurr: ImGuiID,
    pub OwnerNext: ImGuiID,
    pub LockThisFrame: bool,
    pub LockUntilRelease: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyOwnerData"][::std::mem::size_of::<ImGuiKeyOwnerData>() - 12usize];
    ["Alignment of ImGuiKeyOwnerData"][::std::mem::align_of::<ImGuiKeyOwnerData>() - 4usize];
    ["Offset of field: ImGuiKeyOwnerData::OwnerCurr"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, OwnerCurr) - 0usize];
    ["Offset of field: ImGuiKeyOwnerData::OwnerNext"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, OwnerNext) - 4usize];
    ["Offset of field: ImGuiKeyOwnerData::LockThisFrame"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, LockThisFrame) - 8usize];
    ["Offset of field: ImGuiKeyOwnerData::LockUntilRelease"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, LockUntilRelease) - 9usize];
};
pub const ImGuiInputFlags__ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags__ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags__ImGuiInputFlags_RepeatRateDefault: ImGuiInputFlags_ = 2;
pub const ImGuiInputFlags__ImGuiInputFlags_RepeatRateNavMove: ImGuiInputFlags_ = 4;
pub const ImGuiInputFlags__ImGuiInputFlags_RepeatRateNavTweak: ImGuiInputFlags_ = 8;
pub const ImGuiInputFlags__ImGuiInputFlags_RepeatRateMask_: ImGuiInputFlags_ = 14;
pub const ImGuiInputFlags__ImGuiInputFlags_CondHovered: ImGuiInputFlags_ = 16;
pub const ImGuiInputFlags__ImGuiInputFlags_CondActive: ImGuiInputFlags_ = 32;
pub const ImGuiInputFlags__ImGuiInputFlags_CondDefault_: ImGuiInputFlags_ = 48;
pub const ImGuiInputFlags__ImGuiInputFlags_CondMask_: ImGuiInputFlags_ = 48;
pub const ImGuiInputFlags__ImGuiInputFlags_LockThisFrame: ImGuiInputFlags_ = 64;
pub const ImGuiInputFlags__ImGuiInputFlags_LockUntilRelease: ImGuiInputFlags_ = 128;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 256;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobalLow: ImGuiInputFlags_ = 512;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobalHigh: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteMask_: ImGuiInputFlags_ = 3840;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteExtraMask_: ImGuiInputFlags_ = 12288;
pub const ImGuiInputFlags__ImGuiInputFlags_SupportedByIsKeyPressed: ImGuiInputFlags_ = 15;
pub const ImGuiInputFlags__ImGuiInputFlags_SupportedByShortcut: ImGuiInputFlags_ = 16143;
pub const ImGuiInputFlags__ImGuiInputFlags_SupportedBySetKeyOwner: ImGuiInputFlags_ = 192;
pub const ImGuiInputFlags__ImGuiInputFlags_SupportedBySetItemKeyOwner: ImGuiInputFlags_ = 240;
pub type ImGuiInputFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipperRange"][::std::mem::size_of::<ImGuiListClipperRange>() - 12usize];
    ["Alignment of ImGuiListClipperRange"]
        [::std::mem::align_of::<ImGuiListClipperRange>() - 4usize];
    ["Offset of field: ImGuiListClipperRange::Min"]
        [::std::mem::offset_of!(ImGuiListClipperRange, Min) - 0usize];
    ["Offset of field: ImGuiListClipperRange::Max"]
        [::std::mem::offset_of!(ImGuiListClipperRange, Max) - 4usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexConvert"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexConvert) - 8usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexOffsetMin"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexOffsetMin) - 9usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexOffsetMax"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexOffsetMax) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiListClipperRange"]
        [::std::mem::size_of::<ImVector_ImGuiListClipperRange>() - 12usize];
    ["Alignment of ImVector_ImGuiListClipperRange"]
        [::std::mem::align_of::<ImVector_ImGuiListClipperRange>() - 4usize];
    ["Offset of field: ImVector_ImGuiListClipperRange::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperRange, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiListClipperRange::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperRange, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiListClipperRange::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperRange, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector_ImGuiListClipperRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipperData"][::std::mem::size_of::<ImGuiListClipperData>() - 28usize];
    ["Alignment of ImGuiListClipperData"][::std::mem::align_of::<ImGuiListClipperData>() - 4usize];
    ["Offset of field: ImGuiListClipperData::ListClipper"]
        [::std::mem::offset_of!(ImGuiListClipperData, ListClipper) - 0usize];
    ["Offset of field: ImGuiListClipperData::LossynessOffset"]
        [::std::mem::offset_of!(ImGuiListClipperData, LossynessOffset) - 4usize];
    ["Offset of field: ImGuiListClipperData::StepNo"]
        [::std::mem::offset_of!(ImGuiListClipperData, StepNo) - 8usize];
    ["Offset of field: ImGuiListClipperData::ItemsFrozen"]
        [::std::mem::offset_of!(ImGuiListClipperData, ItemsFrozen) - 12usize];
    ["Offset of field: ImGuiListClipperData::Ranges"]
        [::std::mem::offset_of!(ImGuiListClipperData, Ranges) - 16usize];
};
pub const ImGuiActivateFlags__ImGuiActivateFlags_None: ImGuiActivateFlags_ = 0;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferInput: ImGuiActivateFlags_ = 1;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferTweak: ImGuiActivateFlags_ = 2;
pub const ImGuiActivateFlags__ImGuiActivateFlags_TryToPreserveState: ImGuiActivateFlags_ = 4;
pub type ImGuiActivateFlags_ = ::std::os::raw::c_int;
pub const ImGuiScrollFlags__ImGuiScrollFlags_None: ImGuiScrollFlags_ = 0;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeX: ImGuiScrollFlags_ = 1;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeY: ImGuiScrollFlags_ = 2;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterX: ImGuiScrollFlags_ = 4;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterY: ImGuiScrollFlags_ = 8;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterX: ImGuiScrollFlags_ = 16;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterY: ImGuiScrollFlags_ = 32;
pub const ImGuiScrollFlags__ImGuiScrollFlags_NoScrollParent: ImGuiScrollFlags_ = 64;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskX_: ImGuiScrollFlags_ = 21;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskY_: ImGuiScrollFlags_ = 42;
pub type ImGuiScrollFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeDefault: ImGuiNavHighlightFlags_ = 1;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeThin: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapMask_: ImGuiNavMoveFlags_ = 15;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_ScrollToEdgeY: ImGuiNavMoveFlags_ = 64;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Forwarded: ImGuiNavMoveFlags_ = 128;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_DebugNoResult: ImGuiNavMoveFlags_ = 256;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_FocusApi: ImGuiNavMoveFlags_ = 512;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_IsTabbing: ImGuiNavMoveFlags_ = 1024;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_IsPageMove: ImGuiNavMoveFlags_ = 2048;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Activate: ImGuiNavMoveFlags_ = 4096;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_NoSelect: ImGuiNavMoveFlags_ = 8192;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_NoSetNavHighlight: ImGuiNavMoveFlags_ = 16384;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavLayer_ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub InFlags: ImGuiItemFlags,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNavItemData"][::std::mem::size_of::<ImGuiNavItemData>() - 56usize];
    ["Alignment of ImGuiNavItemData"][::std::mem::align_of::<ImGuiNavItemData>() - 8usize];
    ["Offset of field: ImGuiNavItemData::Window"]
        [::std::mem::offset_of!(ImGuiNavItemData, Window) - 0usize];
    ["Offset of field: ImGuiNavItemData::ID"]
        [::std::mem::offset_of!(ImGuiNavItemData, ID) - 4usize];
    ["Offset of field: ImGuiNavItemData::FocusScopeId"]
        [::std::mem::offset_of!(ImGuiNavItemData, FocusScopeId) - 8usize];
    ["Offset of field: ImGuiNavItemData::RectRel"]
        [::std::mem::offset_of!(ImGuiNavItemData, RectRel) - 12usize];
    ["Offset of field: ImGuiNavItemData::InFlags"]
        [::std::mem::offset_of!(ImGuiNavItemData, InFlags) - 28usize];
    ["Offset of field: ImGuiNavItemData::SelectionUserData"]
        [::std::mem::offset_of!(ImGuiNavItemData, SelectionUserData) - 32usize];
    ["Offset of field: ImGuiNavItemData::DistBox"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistBox) - 40usize];
    ["Offset of field: ImGuiNavItemData::DistCenter"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistCenter) - 44usize];
    ["Offset of field: ImGuiNavItemData::DistAxial"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistAxial) - 48usize];
};
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_None: ImGuiTypingSelectFlags_ = 0;
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_AllowBackspace: ImGuiTypingSelectFlags_ =
    1;
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_AllowSingleCharMode:
    ImGuiTypingSelectFlags_ = 2;
pub type ImGuiTypingSelectFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectRequest {
    pub Flags: ImGuiTypingSelectFlags,
    pub SearchBufferLen: ::std::os::raw::c_int,
    pub SearchBuffer: *const ::std::os::raw::c_char,
    pub SelectRequest: bool,
    pub SingleCharMode: bool,
    pub SingleCharSize: ImS8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTypingSelectRequest"]
        [::std::mem::size_of::<ImGuiTypingSelectRequest>() - 16usize];
    ["Alignment of ImGuiTypingSelectRequest"]
        [::std::mem::align_of::<ImGuiTypingSelectRequest>() - 4usize];
    ["Offset of field: ImGuiTypingSelectRequest::Flags"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, Flags) - 0usize];
    ["Offset of field: ImGuiTypingSelectRequest::SearchBufferLen"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SearchBufferLen) - 4usize];
    ["Offset of field: ImGuiTypingSelectRequest::SearchBuffer"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SearchBuffer) - 8usize];
    ["Offset of field: ImGuiTypingSelectRequest::SelectRequest"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SelectRequest) - 12usize];
    ["Offset of field: ImGuiTypingSelectRequest::SingleCharMode"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SingleCharMode) - 13usize];
    ["Offset of field: ImGuiTypingSelectRequest::SingleCharSize"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SingleCharSize) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectState {
    pub Request: ImGuiTypingSelectRequest,
    pub SearchBuffer: [::std::os::raw::c_char; 64usize],
    pub FocusScope: ImGuiID,
    pub LastRequestFrame: ::std::os::raw::c_int,
    pub LastRequestTime: f32,
    pub SingleCharModeLock: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTypingSelectState"][::std::mem::size_of::<ImGuiTypingSelectState>() - 96usize];
    ["Alignment of ImGuiTypingSelectState"]
        [::std::mem::align_of::<ImGuiTypingSelectState>() - 4usize];
    ["Offset of field: ImGuiTypingSelectState::Request"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, Request) - 0usize];
    ["Offset of field: ImGuiTypingSelectState::SearchBuffer"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, SearchBuffer) - 16usize];
    ["Offset of field: ImGuiTypingSelectState::FocusScope"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, FocusScope) - 80usize];
    ["Offset of field: ImGuiTypingSelectState::LastRequestFrame"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, LastRequestFrame) - 84usize];
    ["Offset of field: ImGuiTypingSelectState::LastRequestTime"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, LastRequestTime) - 88usize];
    ["Offset of field: ImGuiTypingSelectState::SingleCharModeLock"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, SingleCharModeLock) - 92usize];
};
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ =
    16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOldColumnData"][::std::mem::size_of::<ImGuiOldColumnData>() - 28usize];
    ["Alignment of ImGuiOldColumnData"][::std::mem::align_of::<ImGuiOldColumnData>() - 4usize];
    ["Offset of field: ImGuiOldColumnData::OffsetNorm"]
        [::std::mem::offset_of!(ImGuiOldColumnData, OffsetNorm) - 0usize];
    ["Offset of field: ImGuiOldColumnData::OffsetNormBeforeResize"]
        [::std::mem::offset_of!(ImGuiOldColumnData, OffsetNormBeforeResize) - 4usize];
    ["Offset of field: ImGuiOldColumnData::Flags"]
        [::std::mem::offset_of!(ImGuiOldColumnData, Flags) - 8usize];
    ["Offset of field: ImGuiOldColumnData::ClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumnData, ClipRect) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiOldColumnData"]
        [::std::mem::size_of::<ImVector_ImGuiOldColumnData>() - 12usize];
    ["Alignment of ImVector_ImGuiOldColumnData"]
        [::std::mem::align_of::<ImVector_ImGuiOldColumnData>() - 4usize];
    ["Offset of field: ImVector_ImGuiOldColumnData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumnData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiOldColumnData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumnData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiOldColumnData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumnData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiOldColumnData,
    pub Splitter: ImDrawListSplitter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOldColumns"][::std::mem::size_of::<ImGuiOldColumns>() - 124usize];
    ["Alignment of ImGuiOldColumns"][::std::mem::align_of::<ImGuiOldColumns>() - 4usize];
    ["Offset of field: ImGuiOldColumns::ID"][::std::mem::offset_of!(ImGuiOldColumns, ID) - 0usize];
    ["Offset of field: ImGuiOldColumns::Flags"]
        [::std::mem::offset_of!(ImGuiOldColumns, Flags) - 4usize];
    ["Offset of field: ImGuiOldColumns::IsFirstFrame"]
        [::std::mem::offset_of!(ImGuiOldColumns, IsFirstFrame) - 8usize];
    ["Offset of field: ImGuiOldColumns::IsBeingResized"]
        [::std::mem::offset_of!(ImGuiOldColumns, IsBeingResized) - 9usize];
    ["Offset of field: ImGuiOldColumns::Current"]
        [::std::mem::offset_of!(ImGuiOldColumns, Current) - 12usize];
    ["Offset of field: ImGuiOldColumns::Count"]
        [::std::mem::offset_of!(ImGuiOldColumns, Count) - 16usize];
    ["Offset of field: ImGuiOldColumns::OffMinX"]
        [::std::mem::offset_of!(ImGuiOldColumns, OffMinX) - 20usize];
    ["Offset of field: ImGuiOldColumns::OffMaxX"]
        [::std::mem::offset_of!(ImGuiOldColumns, OffMaxX) - 24usize];
    ["Offset of field: ImGuiOldColumns::LineMinY"]
        [::std::mem::offset_of!(ImGuiOldColumns, LineMinY) - 28usize];
    ["Offset of field: ImGuiOldColumns::LineMaxY"]
        [::std::mem::offset_of!(ImGuiOldColumns, LineMaxY) - 32usize];
    ["Offset of field: ImGuiOldColumns::HostCursorPosY"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostCursorPosY) - 36usize];
    ["Offset of field: ImGuiOldColumns::HostCursorMaxPosX"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostCursorMaxPosX) - 40usize];
    ["Offset of field: ImGuiOldColumns::HostInitialClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostInitialClipRect) - 44usize];
    ["Offset of field: ImGuiOldColumns::HostBackupClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostBackupClipRect) - 60usize];
    ["Offset of field: ImGuiOldColumns::HostBackupParentWorkRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostBackupParentWorkRect) - 76usize];
    ["Offset of field: ImGuiOldColumns::Columns"]
        [::std::mem::offset_of!(ImGuiOldColumns, Columns) - 92usize];
    ["Offset of field: ImGuiOldColumns::Splitter"]
        [::std::mem::offset_of!(ImGuiOldColumns, Splitter) - 104usize];
};
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ =
    1024;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ =
    2048;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ =
    8192;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoWindowMenuButton:
    ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ =
    32768;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ =
    65536;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ =
    131072;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitOther:
    ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverMe:
    ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverOther:
    ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverEmpty:
    ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ =
    7864336;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SharedFlagsInheritMask_:
    ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 196640;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsTransferMask_:
    ImGuiDockNodeFlagsPrivate_ = 260208;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SavedFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 261152;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority__ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeState_ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow:
    ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing:
    ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiWindowPtr"][::std::mem::size_of::<ImVector_ImGuiWindowPtr>() - 12usize];
    ["Alignment of ImVector_ImGuiWindowPtr"]
        [::std::mem::align_of::<ImVector_ImGuiWindowPtr>() - 4usize];
    ["Offset of field: ImVector_ImGuiWindowPtr::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowPtr, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiWindowPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiWindowPtr::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowPtr, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub RefViewportId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDockNode"][::std::mem::size_of::<ImGuiDockNode>() - 168usize];
    ["Alignment of ImGuiDockNode"][::std::mem::align_of::<ImGuiDockNode>() - 4usize];
    ["Offset of field: ImGuiDockNode::ID"][::std::mem::offset_of!(ImGuiDockNode, ID) - 0usize];
    ["Offset of field: ImGuiDockNode::SharedFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, SharedFlags) - 4usize];
    ["Offset of field: ImGuiDockNode::LocalFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, LocalFlags) - 8usize];
    ["Offset of field: ImGuiDockNode::LocalFlagsInWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, LocalFlagsInWindows) - 12usize];
    ["Offset of field: ImGuiDockNode::MergedFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, MergedFlags) - 16usize];
    ["Offset of field: ImGuiDockNode::State"]
        [::std::mem::offset_of!(ImGuiDockNode, State) - 20usize];
    ["Offset of field: ImGuiDockNode::ParentNode"]
        [::std::mem::offset_of!(ImGuiDockNode, ParentNode) - 24usize];
    ["Offset of field: ImGuiDockNode::ChildNodes"]
        [::std::mem::offset_of!(ImGuiDockNode, ChildNodes) - 28usize];
    ["Offset of field: ImGuiDockNode::Windows"]
        [::std::mem::offset_of!(ImGuiDockNode, Windows) - 36usize];
    ["Offset of field: ImGuiDockNode::TabBar"]
        [::std::mem::offset_of!(ImGuiDockNode, TabBar) - 48usize];
    ["Offset of field: ImGuiDockNode::Pos"][::std::mem::offset_of!(ImGuiDockNode, Pos) - 52usize];
    ["Offset of field: ImGuiDockNode::Size"][::std::mem::offset_of!(ImGuiDockNode, Size) - 60usize];
    ["Offset of field: ImGuiDockNode::SizeRef"]
        [::std::mem::offset_of!(ImGuiDockNode, SizeRef) - 68usize];
    ["Offset of field: ImGuiDockNode::SplitAxis"]
        [::std::mem::offset_of!(ImGuiDockNode, SplitAxis) - 76usize];
    ["Offset of field: ImGuiDockNode::WindowClass"]
        [::std::mem::offset_of!(ImGuiDockNode, WindowClass) - 80usize];
    ["Offset of field: ImGuiDockNode::LastBgColor"]
        [::std::mem::offset_of!(ImGuiDockNode, LastBgColor) - 108usize];
    ["Offset of field: ImGuiDockNode::HostWindow"]
        [::std::mem::offset_of!(ImGuiDockNode, HostWindow) - 112usize];
    ["Offset of field: ImGuiDockNode::VisibleWindow"]
        [::std::mem::offset_of!(ImGuiDockNode, VisibleWindow) - 116usize];
    ["Offset of field: ImGuiDockNode::CentralNode"]
        [::std::mem::offset_of!(ImGuiDockNode, CentralNode) - 120usize];
    ["Offset of field: ImGuiDockNode::OnlyNodeWithWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, OnlyNodeWithWindows) - 124usize];
    ["Offset of field: ImGuiDockNode::CountNodeWithWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, CountNodeWithWindows) - 128usize];
    ["Offset of field: ImGuiDockNode::LastFrameAlive"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameAlive) - 132usize];
    ["Offset of field: ImGuiDockNode::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameActive) - 136usize];
    ["Offset of field: ImGuiDockNode::LastFrameFocused"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameFocused) - 140usize];
    ["Offset of field: ImGuiDockNode::LastFocusedNodeId"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFocusedNodeId) - 144usize];
    ["Offset of field: ImGuiDockNode::SelectedTabId"]
        [::std::mem::offset_of!(ImGuiDockNode, SelectedTabId) - 148usize];
    ["Offset of field: ImGuiDockNode::WantCloseTabId"]
        [::std::mem::offset_of!(ImGuiDockNode, WantCloseTabId) - 152usize];
    ["Offset of field: ImGuiDockNode::RefViewportId"]
        [::std::mem::offset_of!(ImGuiDockNode, RefViewportId) - 156usize];
};
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForPos_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForPos_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForSize_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForSize_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForViewport_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForViewport_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsFocused_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsFocused_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsBgDrawnThisFrame_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsBgDrawnThisFrame_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCloseButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCloseButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasWindowMenuButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasWindowMenuButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCentralNodeChild_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCentralNodeChild_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantCloseAll_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantCloseAll_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantLockSizeOnce_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantLockSizeOnce_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantMouseMove_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantMouseMove_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarUpdate_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarUpdate_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarToggle_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarToggle_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Tab: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabActive: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocused: ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocusedActive:
    ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 6;
pub type ImGuiWindowDockStyleCol = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowDockStyle"][::std::mem::size_of::<ImGuiWindowDockStyle>() - 24usize];
    ["Alignment of ImGuiWindowDockStyle"][::std::mem::align_of::<ImGuiWindowDockStyle>() - 4usize];
    ["Offset of field: ImGuiWindowDockStyle::Colors"]
        [::std::mem::offset_of!(ImGuiWindowDockStyle, Colors) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiDockRequest"]
        [::std::mem::size_of::<ImVector_ImGuiDockRequest>() - 12usize];
    ["Alignment of ImVector_ImGuiDockRequest"]
        [::std::mem::align_of::<ImVector_ImGuiDockRequest>() - 4usize];
    ["Offset of field: ImVector_ImGuiDockRequest::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiDockRequest, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiDockRequest::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiDockRequest, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiDockRequest::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiDockRequest, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiDockNodeSettings"]
        [::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>() - 12usize];
    ["Alignment of ImVector_ImGuiDockNodeSettings"]
        [::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>() - 4usize];
    ["Offset of field: ImVector_ImGuiDockNodeSettings::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiDockNodeSettings, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiDockNodeSettings::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiDockNodeSettings, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiDockNodeSettings::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiDockNodeSettings, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDockContext"][::std::mem::size_of::<ImGuiDockContext>() - 40usize];
    ["Alignment of ImGuiDockContext"][::std::mem::align_of::<ImGuiDockContext>() - 4usize];
    ["Offset of field: ImGuiDockContext::Nodes"]
        [::std::mem::offset_of!(ImGuiDockContext, Nodes) - 0usize];
    ["Offset of field: ImGuiDockContext::Requests"]
        [::std::mem::offset_of!(ImGuiDockContext, Requests) - 12usize];
    ["Offset of field: ImGuiDockContext::NodesSettings"]
        [::std::mem::offset_of!(ImGuiDockContext, NodesSettings) - 24usize];
    ["Offset of field: ImGuiDockContext::WantFullRebuild"]
        [::std::mem::offset_of!(ImGuiDockContext, WantFullRebuild) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Window: *mut ImGuiWindow,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFocusedStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub LastFocusedHadNavWindow: bool,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub BgFgDrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub BgFgDrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkOffsetMin: ImVec2,
    pub WorkOffsetMax: ImVec2,
    pub BuildWorkOffsetMin: ImVec2,
    pub BuildWorkOffsetMax: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiViewportP"][::std::mem::size_of::<ImGuiViewportP>() - 260usize];
    ["Alignment of ImGuiViewportP"][::std::mem::align_of::<ImGuiViewportP>() - 4usize];
    ["Offset of field: ImGuiViewportP::_ImGuiViewport"]
        [::std::mem::offset_of!(ImGuiViewportP, _ImGuiViewport) - 0usize];
    ["Offset of field: ImGuiViewportP::Window"]
        [::std::mem::offset_of!(ImGuiViewportP, Window) - 72usize];
    ["Offset of field: ImGuiViewportP::Idx"][::std::mem::offset_of!(ImGuiViewportP, Idx) - 76usize];
    ["Offset of field: ImGuiViewportP::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFrameActive) - 80usize];
    ["Offset of field: ImGuiViewportP::LastFocusedStampCount"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFocusedStampCount) - 84usize];
    ["Offset of field: ImGuiViewportP::LastNameHash"]
        [::std::mem::offset_of!(ImGuiViewportP, LastNameHash) - 88usize];
    ["Offset of field: ImGuiViewportP::LastPos"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPos) - 92usize];
    ["Offset of field: ImGuiViewportP::Alpha"]
        [::std::mem::offset_of!(ImGuiViewportP, Alpha) - 100usize];
    ["Offset of field: ImGuiViewportP::LastAlpha"]
        [::std::mem::offset_of!(ImGuiViewportP, LastAlpha) - 104usize];
    ["Offset of field: ImGuiViewportP::LastFocusedHadNavWindow"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFocusedHadNavWindow) - 108usize];
    ["Offset of field: ImGuiViewportP::PlatformMonitor"]
        [::std::mem::offset_of!(ImGuiViewportP, PlatformMonitor) - 110usize];
    ["Offset of field: ImGuiViewportP::BgFgDrawListsLastFrame"]
        [::std::mem::offset_of!(ImGuiViewportP, BgFgDrawListsLastFrame) - 112usize];
    ["Offset of field: ImGuiViewportP::BgFgDrawLists"]
        [::std::mem::offset_of!(ImGuiViewportP, BgFgDrawLists) - 120usize];
    ["Offset of field: ImGuiViewportP::DrawDataP"]
        [::std::mem::offset_of!(ImGuiViewportP, DrawDataP) - 128usize];
    ["Offset of field: ImGuiViewportP::DrawDataBuilder"]
        [::std::mem::offset_of!(ImGuiViewportP, DrawDataBuilder) - 184usize];
    ["Offset of field: ImGuiViewportP::LastPlatformPos"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPlatformPos) - 204usize];
    ["Offset of field: ImGuiViewportP::LastPlatformSize"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPlatformSize) - 212usize];
    ["Offset of field: ImGuiViewportP::LastRendererSize"]
        [::std::mem::offset_of!(ImGuiViewportP, LastRendererSize) - 220usize];
    ["Offset of field: ImGuiViewportP::WorkOffsetMin"]
        [::std::mem::offset_of!(ImGuiViewportP, WorkOffsetMin) - 228usize];
    ["Offset of field: ImGuiViewportP::WorkOffsetMax"]
        [::std::mem::offset_of!(ImGuiViewportP, WorkOffsetMax) - 236usize];
    ["Offset of field: ImGuiViewportP::BuildWorkOffsetMin"]
        [::std::mem::offset_of!(ImGuiViewportP, BuildWorkOffsetMin) - 244usize];
    ["Offset of field: ImGuiViewportP::BuildWorkOffsetMax"]
        [::std::mem::offset_of!(ImGuiViewportP, BuildWorkOffsetMax) - 252usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub IsChild: bool,
    pub WantApply: bool,
    pub WantDelete: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowSettings"][::std::mem::size_of::<ImGuiWindowSettings>() - 36usize];
    ["Alignment of ImGuiWindowSettings"][::std::mem::align_of::<ImGuiWindowSettings>() - 4usize];
    ["Offset of field: ImGuiWindowSettings::ID"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ID) - 0usize];
    ["Offset of field: ImGuiWindowSettings::Pos"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Pos) - 4usize];
    ["Offset of field: ImGuiWindowSettings::Size"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Size) - 8usize];
    ["Offset of field: ImGuiWindowSettings::ViewportPos"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ViewportPos) - 12usize];
    ["Offset of field: ImGuiWindowSettings::ViewportId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ViewportId) - 16usize];
    ["Offset of field: ImGuiWindowSettings::DockId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, DockId) - 20usize];
    ["Offset of field: ImGuiWindowSettings::ClassId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ClassId) - 24usize];
    ["Offset of field: ImGuiWindowSettings::DockOrder"]
        [::std::mem::offset_of!(ImGuiWindowSettings, DockOrder) - 28usize];
    ["Offset of field: ImGuiWindowSettings::Collapsed"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Collapsed) - 30usize];
    ["Offset of field: ImGuiWindowSettings::IsChild"]
        [::std::mem::offset_of!(ImGuiWindowSettings, IsChild) - 31usize];
    ["Offset of field: ImGuiWindowSettings::WantApply"]
        [::std::mem::offset_of!(ImGuiWindowSettings, WantApply) - 32usize];
    ["Offset of field: ImGuiWindowSettings::WantDelete"]
        [::std::mem::offset_of!(ImGuiWindowSettings, WantDelete) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSettingsHandler"][::std::mem::size_of::<ImGuiSettingsHandler>() - 36usize];
    ["Alignment of ImGuiSettingsHandler"][::std::mem::align_of::<ImGuiSettingsHandler>() - 4usize];
    ["Offset of field: ImGuiSettingsHandler::TypeName"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, TypeName) - 0usize];
    ["Offset of field: ImGuiSettingsHandler::TypeHash"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, TypeHash) - 4usize];
    ["Offset of field: ImGuiSettingsHandler::ClearAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ClearAllFn) - 8usize];
    ["Offset of field: ImGuiSettingsHandler::ReadInitFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadInitFn) - 12usize];
    ["Offset of field: ImGuiSettingsHandler::ReadOpenFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadOpenFn) - 16usize];
    ["Offset of field: ImGuiSettingsHandler::ReadLineFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadLineFn) - 20usize];
    ["Offset of field: ImGuiSettingsHandler::ApplyAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ApplyAllFn) - 24usize];
    ["Offset of field: ImGuiSettingsHandler::WriteAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, WriteAllFn) - 28usize];
    ["Offset of field: ImGuiSettingsHandler::UserData"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, UserData) - 32usize];
};
pub const ImGuiLocKey_ImGuiLocKey_VersionStr: ImGuiLocKey = 0;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeOne: ImGuiLocKey = 1;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeAllFit: ImGuiLocKey = 2;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeAllDefault: ImGuiLocKey = 3;
pub const ImGuiLocKey_ImGuiLocKey_TableResetOrder: ImGuiLocKey = 4;
pub const ImGuiLocKey_ImGuiLocKey_WindowingMainMenuBar: ImGuiLocKey = 5;
pub const ImGuiLocKey_ImGuiLocKey_WindowingPopup: ImGuiLocKey = 6;
pub const ImGuiLocKey_ImGuiLocKey_WindowingUntitled: ImGuiLocKey = 7;
pub const ImGuiLocKey_ImGuiLocKey_DockingHideTabBar: ImGuiLocKey = 8;
pub const ImGuiLocKey_ImGuiLocKey_DockingHoldShiftToDock: ImGuiLocKey = 9;
pub const ImGuiLocKey_ImGuiLocKey_DockingDragToUndockOrMoveNode: ImGuiLocKey = 10;
pub const ImGuiLocKey_ImGuiLocKey_COUNT: ImGuiLocKey = 11;
pub type ImGuiLocKey = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLocEntry {
    pub Key: ImGuiLocKey,
    pub Text: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiLocEntry"][::std::mem::size_of::<ImGuiLocEntry>() - 8usize];
    ["Alignment of ImGuiLocEntry"][::std::mem::align_of::<ImGuiLocEntry>() - 4usize];
    ["Offset of field: ImGuiLocEntry::Key"][::std::mem::offset_of!(ImGuiLocEntry, Key) - 0usize];
    ["Offset of field: ImGuiLocEntry::Text"][::std::mem::offset_of!(ImGuiLocEntry, Text) - 4usize];
};
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_None: ImGuiDebugLogFlags_ = 0;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventActiveId: ImGuiDebugLogFlags_ = 1;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventFocus: ImGuiDebugLogFlags_ = 2;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventPopup: ImGuiDebugLogFlags_ = 4;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventNav: ImGuiDebugLogFlags_ = 8;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventClipper: ImGuiDebugLogFlags_ = 16;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventSelection: ImGuiDebugLogFlags_ = 32;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventIO: ImGuiDebugLogFlags_ = 64;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventDocking: ImGuiDebugLogFlags_ = 128;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventViewport: ImGuiDebugLogFlags_ = 256;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventMask_: ImGuiDebugLogFlags_ = 511;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_OutputToTTY: ImGuiDebugLogFlags_ = 1024;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_OutputToTestEngine: ImGuiDebugLogFlags_ = 2048;
pub type ImGuiDebugLogFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocEntry {
    pub FrameCount: ::std::os::raw::c_int,
    pub AllocCount: ImS16,
    pub FreeCount: ImS16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDebugAllocEntry"][::std::mem::size_of::<ImGuiDebugAllocEntry>() - 8usize];
    ["Alignment of ImGuiDebugAllocEntry"][::std::mem::align_of::<ImGuiDebugAllocEntry>() - 4usize];
    ["Offset of field: ImGuiDebugAllocEntry::FrameCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, FrameCount) - 0usize];
    ["Offset of field: ImGuiDebugAllocEntry::AllocCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, AllocCount) - 4usize];
    ["Offset of field: ImGuiDebugAllocEntry::FreeCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, FreeCount) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocInfo {
    pub TotalAllocCount: ::std::os::raw::c_int,
    pub TotalFreeCount: ::std::os::raw::c_int,
    pub LastEntriesIdx: ImS16,
    pub LastEntriesBuf: [ImGuiDebugAllocEntry; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDebugAllocInfo"][::std::mem::size_of::<ImGuiDebugAllocInfo>() - 60usize];
    ["Alignment of ImGuiDebugAllocInfo"][::std::mem::align_of::<ImGuiDebugAllocInfo>() - 4usize];
    ["Offset of field: ImGuiDebugAllocInfo::TotalAllocCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, TotalAllocCount) - 0usize];
    ["Offset of field: ImGuiDebugAllocInfo::TotalFreeCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, TotalFreeCount) - 4usize];
    ["Offset of field: ImGuiDebugAllocInfo::LastEntriesIdx"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, LastEntriesIdx) - 8usize];
    ["Offset of field: ImGuiDebugAllocInfo::LastEntriesBuf"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, LastEntriesBuf) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowIDStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowAtlasTintedWithTextColor: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMetricsConfig"][::std::mem::size_of::<ImGuiMetricsConfig>() - 20usize];
    ["Alignment of ImGuiMetricsConfig"][::std::mem::align_of::<ImGuiMetricsConfig>() - 4usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDebugLog"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDebugLog) - 0usize];
    ["Offset of field: ImGuiMetricsConfig::ShowIDStackTool"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowIDStackTool) - 1usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsRects"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsRects) - 2usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsBeginOrder"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsBeginOrder) - 3usize];
    ["Offset of field: ImGuiMetricsConfig::ShowTablesRects"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowTablesRects) - 4usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDrawCmdMesh"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDrawCmdMesh) - 5usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDrawCmdBoundingBoxes"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDrawCmdBoundingBoxes) - 6usize];
    ["Offset of field: ImGuiMetricsConfig::ShowAtlasTintedWithTextColor"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowAtlasTintedWithTextColor) - 7usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDockingNodes"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDockingNodes) - 8usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsRectsType"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsRectsType) - 12usize];
    ["Offset of field: ImGuiMetricsConfig::ShowTablesRectsType"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowTablesRectsType) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
    pub Desc: [::std::os::raw::c_char; 57usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStackLevelInfo"][::std::mem::size_of::<ImGuiStackLevelInfo>() - 72usize];
    ["Alignment of ImGuiStackLevelInfo"][::std::mem::align_of::<ImGuiStackLevelInfo>() - 4usize];
    ["Offset of field: ImGuiStackLevelInfo::ID"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, ID) - 0usize];
    ["Offset of field: ImGuiStackLevelInfo::QueryFrameCount"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, QueryFrameCount) - 4usize];
    ["Offset of field: ImGuiStackLevelInfo::QuerySuccess"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, QuerySuccess) - 5usize];
    ["Offset of field: ImGuiStackLevelInfo::Desc"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, Desc) - 12usize];
};
impl ImGuiStackLevelInfo {
    #[inline]
    pub fn DataType(&self) -> ImGuiDataType {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_DataType(&mut self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DataType_raw(this: *const Self) -> ImGuiDataType {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DataType_raw(this: *mut Self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(DataType: ImGuiDataType) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let DataType: u32 = unsafe { ::std::mem::transmute(DataType) };
            DataType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStackLevelInfo {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStackLevelInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiStackLevelInfo"]
        [::std::mem::size_of::<ImVector_ImGuiStackLevelInfo>() - 12usize];
    ["Alignment of ImVector_ImGuiStackLevelInfo"]
        [::std::mem::align_of::<ImVector_ImGuiStackLevelInfo>() - 4usize];
    ["Offset of field: ImVector_ImGuiStackLevelInfo::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiStackLevelInfo, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiStackLevelInfo::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiStackLevelInfo, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiStackLevelInfo::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiStackLevelInfo, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIDStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryId: ImGuiID,
    pub Results: ImVector_ImGuiStackLevelInfo,
    pub CopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiIDStackTool"][::std::mem::size_of::<ImGuiIDStackTool>() - 32usize];
    ["Alignment of ImGuiIDStackTool"][::std::mem::align_of::<ImGuiIDStackTool>() - 4usize];
    ["Offset of field: ImGuiIDStackTool::LastActiveFrame"]
        [::std::mem::offset_of!(ImGuiIDStackTool, LastActiveFrame) - 0usize];
    ["Offset of field: ImGuiIDStackTool::StackLevel"]
        [::std::mem::offset_of!(ImGuiIDStackTool, StackLevel) - 4usize];
    ["Offset of field: ImGuiIDStackTool::QueryId"]
        [::std::mem::offset_of!(ImGuiIDStackTool, QueryId) - 8usize];
    ["Offset of field: ImGuiIDStackTool::Results"]
        [::std::mem::offset_of!(ImGuiIDStackTool, Results) - 12usize];
    ["Offset of field: ImGuiIDStackTool::CopyToClipboardOnCtrlC"]
        [::std::mem::offset_of!(ImGuiIDStackTool, CopyToClipboardOnCtrlC) - 24usize];
    ["Offset of field: ImGuiIDStackTool::CopyToClipboardLastTime"]
        [::std::mem::offset_of!(ImGuiIDStackTool, CopyToClipboardLastTime) - 28usize];
};
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiContextHook"][::std::mem::size_of::<ImGuiContextHook>() - 20usize];
    ["Alignment of ImGuiContextHook"][::std::mem::align_of::<ImGuiContextHook>() - 4usize];
    ["Offset of field: ImGuiContextHook::HookId"]
        [::std::mem::offset_of!(ImGuiContextHook, HookId) - 0usize];
    ["Offset of field: ImGuiContextHook::Type"]
        [::std::mem::offset_of!(ImGuiContextHook, Type) - 4usize];
    ["Offset of field: ImGuiContextHook::Owner"]
        [::std::mem::offset_of!(ImGuiContextHook, Owner) - 8usize];
    ["Offset of field: ImGuiContextHook::Callback"]
        [::std::mem::offset_of!(ImGuiContextHook, Callback) - 12usize];
    ["Offset of field: ImGuiContextHook::UserData"]
        [::std::mem::offset_of!(ImGuiContextHook, UserData) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiInputEvent {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiInputEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiInputEvent"]
        [::std::mem::size_of::<ImVector_ImGuiInputEvent>() - 12usize];
    ["Alignment of ImVector_ImGuiInputEvent"]
        [::std::mem::align_of::<ImVector_ImGuiInputEvent>() - 4usize];
    ["Offset of field: ImVector_ImGuiInputEvent::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiInputEvent, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiInputEvent::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiInputEvent, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiInputEvent::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiInputEvent, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowStackData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiWindowStackData"]
        [::std::mem::size_of::<ImVector_ImGuiWindowStackData>() - 12usize];
    ["Alignment of ImVector_ImGuiWindowStackData"]
        [::std::mem::align_of::<ImVector_ImGuiWindowStackData>() - 4usize];
    ["Offset of field: ImVector_ImGuiWindowStackData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowStackData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiWindowStackData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowStackData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiWindowStackData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiWindowStackData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiColorMod"][::std::mem::size_of::<ImVector_ImGuiColorMod>() - 12usize];
    ["Alignment of ImVector_ImGuiColorMod"]
        [::std::mem::align_of::<ImVector_ImGuiColorMod>() - 4usize];
    ["Offset of field: ImVector_ImGuiColorMod::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiColorMod, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiColorMod::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiColorMod, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiColorMod::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiColorMod, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiStyleMod"][::std::mem::size_of::<ImVector_ImGuiStyleMod>() - 12usize];
    ["Alignment of ImVector_ImGuiStyleMod"]
        [::std::mem::align_of::<ImVector_ImGuiStyleMod>() - 4usize];
    ["Offset of field: ImVector_ImGuiStyleMod::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiStyleMod, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiStyleMod::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiStyleMod, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiStyleMod::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiStyleMod, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiID"][::std::mem::size_of::<ImVector_ImGuiID>() - 12usize];
    ["Alignment of ImVector_ImGuiID"][::std::mem::align_of::<ImVector_ImGuiID>() - 4usize];
    ["Offset of field: ImVector_ImGuiID::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiID, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiID::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiID, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiID::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiID, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiItemFlags"][::std::mem::size_of::<ImVector_ImGuiItemFlags>() - 12usize];
    ["Alignment of ImVector_ImGuiItemFlags"]
        [::std::mem::align_of::<ImVector_ImGuiItemFlags>() - 4usize];
    ["Offset of field: ImVector_ImGuiItemFlags::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiItemFlags, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiItemFlags::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiItemFlags, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiItemFlags::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiItemFlags, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiGroupData"][::std::mem::size_of::<ImVector_ImGuiGroupData>() - 12usize];
    ["Alignment of ImVector_ImGuiGroupData"]
        [::std::mem::align_of::<ImVector_ImGuiGroupData>() - 4usize];
    ["Offset of field: ImVector_ImGuiGroupData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiGroupData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiGroupData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiGroupData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiGroupData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiGroupData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiPopupData"][::std::mem::size_of::<ImVector_ImGuiPopupData>() - 12usize];
    ["Alignment of ImVector_ImGuiPopupData"]
        [::std::mem::align_of::<ImVector_ImGuiPopupData>() - 4usize];
    ["Offset of field: ImVector_ImGuiPopupData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiPopupData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiPopupData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiPopupData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiPopupData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiPopupData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiNavTreeNodeData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiNavTreeNodeData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiNavTreeNodeData"]
        [::std::mem::size_of::<ImVector_ImGuiNavTreeNodeData>() - 12usize];
    ["Alignment of ImVector_ImGuiNavTreeNodeData"]
        [::std::mem::align_of::<ImVector_ImGuiNavTreeNodeData>() - 4usize];
    ["Offset of field: ImVector_ImGuiNavTreeNodeData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiNavTreeNodeData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiNavTreeNodeData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiNavTreeNodeData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiNavTreeNodeData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiNavTreeNodeData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiViewportPPtr"]
        [::std::mem::size_of::<ImVector_ImGuiViewportPPtr>() - 12usize];
    ["Alignment of ImVector_ImGuiViewportPPtr"]
        [::std::mem::align_of::<ImVector_ImGuiViewportPPtr>() - 4usize];
    ["Offset of field: ImVector_ImGuiViewportPPtr::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPPtr, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiViewportPPtr::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPPtr, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiViewportPPtr::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiViewportPPtr, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_unsigned_char"][::std::mem::size_of::<ImVector_unsigned_char>() - 12usize];
    ["Alignment of ImVector_unsigned_char"]
        [::std::mem::align_of::<ImVector_unsigned_char>() - 4usize];
    ["Offset of field: ImVector_unsigned_char::Size"]
        [::std::mem::offset_of!(ImVector_unsigned_char, Size) - 0usize];
    ["Offset of field: ImVector_unsigned_char::Capacity"]
        [::std::mem::offset_of!(ImVector_unsigned_char, Capacity) - 4usize];
    ["Offset of field: ImVector_unsigned_char::Data"]
        [::std::mem::offset_of!(ImVector_unsigned_char, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiListClipperData"]
        [::std::mem::size_of::<ImVector_ImGuiListClipperData>() - 12usize];
    ["Alignment of ImVector_ImGuiListClipperData"]
        [::std::mem::align_of::<ImVector_ImGuiListClipperData>() - 4usize];
    ["Offset of field: ImVector_ImGuiListClipperData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiListClipperData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiListClipperData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiListClipperData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableTempData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTableTempData"]
        [::std::mem::size_of::<ImVector_ImGuiTableTempData>() - 12usize];
    ["Alignment of ImVector_ImGuiTableTempData"]
        [::std::mem::align_of::<ImVector_ImGuiTableTempData>() - 4usize];
    ["Offset of field: ImVector_ImGuiTableTempData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTableTempData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTableTempData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTableTempData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTableTempData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTableTempData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTable {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTable"][::std::mem::size_of::<ImVector_ImGuiTable>() - 12usize];
    ["Alignment of ImVector_ImGuiTable"][::std::mem::align_of::<ImVector_ImGuiTable>() - 4usize];
    ["Offset of field: ImVector_ImGuiTable::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTable, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTable::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTable, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTable::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTable, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImPool_ImGuiTable"][::std::mem::size_of::<ImPool_ImGuiTable>() - 32usize];
    ["Alignment of ImPool_ImGuiTable"][::std::mem::align_of::<ImPool_ImGuiTable>() - 4usize];
    ["Offset of field: ImPool_ImGuiTable::Buf"]
        [::std::mem::offset_of!(ImPool_ImGuiTable, Buf) - 0usize];
    ["Offset of field: ImPool_ImGuiTable::Map"]
        [::std::mem::offset_of!(ImPool_ImGuiTable, Map) - 12usize];
    ["Offset of field: ImPool_ImGuiTable::FreeIdx"]
        [::std::mem::offset_of!(ImPool_ImGuiTable, FreeIdx) - 24usize];
    ["Offset of field: ImPool_ImGuiTable::AliveCount"]
        [::std::mem::offset_of!(ImPool_ImGuiTable, AliveCount) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTabBar"][::std::mem::size_of::<ImVector_ImGuiTabBar>() - 12usize];
    ["Alignment of ImVector_ImGuiTabBar"][::std::mem::align_of::<ImVector_ImGuiTabBar>() - 4usize];
    ["Offset of field: ImVector_ImGuiTabBar::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTabBar, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTabBar::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTabBar, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTabBar::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTabBar, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImPool_ImGuiTabBar"][::std::mem::size_of::<ImPool_ImGuiTabBar>() - 32usize];
    ["Alignment of ImPool_ImGuiTabBar"][::std::mem::align_of::<ImPool_ImGuiTabBar>() - 4usize];
    ["Offset of field: ImPool_ImGuiTabBar::Buf"]
        [::std::mem::offset_of!(ImPool_ImGuiTabBar, Buf) - 0usize];
    ["Offset of field: ImPool_ImGuiTabBar::Map"]
        [::std::mem::offset_of!(ImPool_ImGuiTabBar, Map) - 12usize];
    ["Offset of field: ImPool_ImGuiTabBar::FreeIdx"]
        [::std::mem::offset_of!(ImPool_ImGuiTabBar, FreeIdx) - 24usize];
    ["Offset of field: ImPool_ImGuiTabBar::AliveCount"]
        [::std::mem::offset_of!(ImPool_ImGuiTabBar, AliveCount) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiPtrOrIndex"]
        [::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>() - 12usize];
    ["Alignment of ImVector_ImGuiPtrOrIndex"]
        [::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>() - 4usize];
    ["Offset of field: ImVector_ImGuiPtrOrIndex::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiPtrOrIndex, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiPtrOrIndex::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiPtrOrIndex, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiPtrOrIndex::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiPtrOrIndex, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiShrinkWidthItem"]
        [::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>() - 12usize];
    ["Alignment of ImVector_ImGuiShrinkWidthItem"]
        [::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>() - 4usize];
    ["Offset of field: ImVector_ImGuiShrinkWidthItem::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiShrinkWidthItem, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiShrinkWidthItem::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiShrinkWidthItem, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiShrinkWidthItem::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiShrinkWidthItem, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiSettingsHandler"]
        [::std::mem::size_of::<ImVector_ImGuiSettingsHandler>() - 12usize];
    ["Alignment of ImVector_ImGuiSettingsHandler"]
        [::std::mem::align_of::<ImVector_ImGuiSettingsHandler>() - 4usize];
    ["Offset of field: ImVector_ImGuiSettingsHandler::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiSettingsHandler, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiSettingsHandler::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiSettingsHandler, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiSettingsHandler::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiSettingsHandler, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImChunkStream_ImGuiWindowSettings"]
        [::std::mem::size_of::<ImChunkStream_ImGuiWindowSettings>() - 12usize];
    ["Alignment of ImChunkStream_ImGuiWindowSettings"]
        [::std::mem::align_of::<ImChunkStream_ImGuiWindowSettings>() - 4usize];
    ["Offset of field: ImChunkStream_ImGuiWindowSettings::Buf"]
        [::std::mem::offset_of!(ImChunkStream_ImGuiWindowSettings, Buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiTableSettings {
    pub Buf: ImVector_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImChunkStream_ImGuiTableSettings"]
        [::std::mem::size_of::<ImChunkStream_ImGuiTableSettings>() - 12usize];
    ["Alignment of ImChunkStream_ImGuiTableSettings"]
        [::std::mem::align_of::<ImChunkStream_ImGuiTableSettings>() - 4usize];
    ["Offset of field: ImChunkStream_ImGuiTableSettings::Buf"]
        [::std::mem::offset_of!(ImChunkStream_ImGuiTableSettings, Buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiContextHook,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiContextHook"]
        [::std::mem::size_of::<ImVector_ImGuiContextHook>() - 12usize];
    ["Alignment of ImVector_ImGuiContextHook"]
        [::std::mem::align_of::<ImVector_ImGuiContextHook>() - 4usize];
    ["Offset of field: ImVector_ImGuiContextHook::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiContextHook, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiContextHook::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiContextHook, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiContextHook::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiContextHook, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub InputEventsQueue: ImVector_ImGuiInputEvent,
    pub InputEventsTrail: ImVector_ImGuiInputEvent,
    pub InputEventsNextMouseSource: ImGuiMouseSource,
    pub InputEventsNextEventId: ImU32,
    pub Windows: ImVector_ImGuiWindowPtr,
    pub WindowsFocusOrder: ImVector_ImGuiWindowPtr,
    pub WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
    pub CurrentWindowStack: ImVector_ImGuiWindowStackData,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub WindowsHoverPadding: ImVec2,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowStartFrame: ::std::os::raw::c_int,
    pub WheelingWindowScrolledFrame: ::std::os::raw::c_int,
    pub WheelingWindowReleaseTimer: f32,
    pub WheelingWindowWheelRemainder: ImVec2,
    pub WheelingAxisAvg: ImVec2,
    pub DebugHookIdInfo: ImGuiID,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdDisabled: bool,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdMouseButton: ::std::os::raw::c_int,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub KeysOwnerData: [ImGuiKeyOwnerData; 154usize],
    pub KeysRoutingTable: ImGuiKeyRoutingTable,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingAllKeyboardKeys: bool,
    pub CurrentFocusScopeId: ImGuiID,
    pub CurrentItemFlags: ImGuiItemFlags,
    pub DebugLocateId: ImGuiID,
    pub NextItemData: ImGuiNextItemData,
    pub LastItemData: ImGuiLastItemData,
    pub NextWindowData: ImGuiNextWindowData,
    pub DebugShowGroupRects: bool,
    pub ColorStack: ImVector_ImGuiColorMod,
    pub StyleVarStack: ImVector_ImGuiStyleMod,
    pub FontStack: ImVector_ImFontPtr,
    pub FocusScopeStack: ImVector_ImGuiID,
    pub ItemFlagsStack: ImVector_ImGuiItemFlags,
    pub GroupStack: ImVector_ImGuiGroupData,
    pub OpenPopupStack: ImVector_ImGuiPopupData,
    pub BeginPopupStack: ImVector_ImGuiPopupData,
    pub NavTreeNodeStack: ImVector_ImGuiNavTreeNodeData,
    pub BeginMenuCount: ::std::os::raw::c_int,
    pub Viewports: ImVector_ImGuiViewportPPtr,
    pub CurrentDpiScale: f32,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub ViewportCreatedCount: ::std::os::raw::c_int,
    pub PlatformWindowsCreatedCount: ::std::os::raw::c_int,
    pub ViewportFocusedStampCount: ::std::os::raw::c_int,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavActivateFlags: ImGuiActivateFlags,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyChord,
    pub NavNextActivateId: ImGuiID,
    pub NavNextActivateFlags: ImGuiActivateFlags,
    pub NavInputSource: ImGuiInputSource,
    pub NavLayer: ImGuiNavLayer,
    pub NavLastValidSelectionUserData: ImGuiSelectionUserData,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResult: ImGuiNavItemData,
    pub NavMoveSubmitted: bool,
    pub NavMoveScoringItems: bool,
    pub NavMoveForwardToNextFrame: bool,
    pub NavMoveFlags: ImGuiNavMoveFlags,
    pub NavMoveScrollFlags: ImGuiScrollFlags,
    pub NavMoveKeyMods: ImGuiKeyChord,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirForDebug: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavScoringRect: ImRect,
    pub NavScoringNoClipRect: ImRect,
    pub NavScoringDebugCount: ::std::os::raw::c_int,
    pub NavTabbingDir: ::std::os::raw::c_int,
    pub NavTabbingCounter: ::std::os::raw::c_int,
    pub NavMoveResultLocal: ImGuiNavItemData,
    pub NavMoveResultLocalVisible: ImGuiNavItemData,
    pub NavMoveResultOther: ImGuiNavItemData,
    pub NavTabbingResultFirst: ImGuiNavItemData,
    pub ConfigNavWindowingKeyNext: ImGuiKeyChord,
    pub ConfigNavWindowingKeyPrev: ImGuiKeyChord,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub NavWindowingAccumDeltaPos: ImVec2,
    pub NavWindowingAccumDeltaSize: ImVec2,
    pub DimBgRatio: f32,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector_unsigned_char,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub ClipperTempDataStacked: ::std::os::raw::c_int,
    pub ClipperTempData: ImVector_ImGuiListClipperData,
    pub CurrentTable: *mut ImGuiTable,
    pub TablesTempDataStacked: ::std::os::raw::c_int,
    pub TablesTempData: ImVector_ImGuiTableTempData,
    pub Tables: ImPool_ImGuiTable,
    pub TablesLastTimeActive: ImVector_float,
    pub DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool_ImGuiTabBar,
    pub CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
    pub ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
    pub HoverItemDelayId: ImGuiID,
    pub HoverItemDelayIdPreviousFrame: ImGuiID,
    pub HoverItemDelayTimer: f32,
    pub HoverItemDelayClearTimer: f32,
    pub HoverItemUnlockedStationaryId: ImGuiID,
    pub HoverWindowUnlockedStationaryId: ImGuiID,
    pub MouseCursor: ImGuiMouseCursor,
    pub MouseStationaryTimer: f32,
    pub MouseLastValidPos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditCurrentID: ImGuiID,
    pub ColorEditSavedID: ImGuiID,
    pub ColorEditSavedHue: f32,
    pub ColorEditSavedSat: f32,
    pub ColorEditSavedColor: ImU32,
    pub ColorPickerRef: ImVec4,
    pub ComboPreviewData: ImGuiComboPreviewData,
    pub WindowResizeBorderExpectedRect: ImRect,
    pub WindowResizeRelativeMode: bool,
    pub SliderGrabClickOffset: f32,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub DisabledAlphaBackup: f32,
    pub DisabledStackSize: ::std::os::raw::c_short,
    pub LockMarkEdited: ::std::os::raw::c_short,
    pub TooltipOverrideCount: ::std::os::raw::c_short,
    pub ClipboardHandlerData: ImVector_char,
    pub MenusIdSubmittedThisFrame: ImVector_ImGuiID,
    pub TypingSelectState: ImGuiTypingSelectState,
    pub PlatformImeData: ImGuiPlatformImeData,
    pub PlatformImeDataPrev: ImGuiPlatformImeData,
    pub PlatformImeViewport: ImGuiID,
    pub DockContext: ImGuiDockContext,
    pub DockNodeWindowMenuHandler: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            node: *mut ImGuiDockNode,
            tab_bar: *mut ImGuiTabBar,
        ),
    >,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector_ImGuiSettingsHandler,
    pub SettingsWindows: ImChunkStream_ImGuiWindowSettings,
    pub SettingsTables: ImChunkStream_ImGuiTableSettings,
    pub Hooks: ImVector_ImGuiContextHook,
    pub HookIdNext: ImGuiID,
    pub LocalizationTable: [*const ::std::os::raw::c_char; 11usize],
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::std::os::raw::c_char,
    pub LogNextSuffix: *const ::std::os::raw::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub DebugLogFlags: ImGuiDebugLogFlags,
    pub DebugLogBuf: ImGuiTextBuffer,
    pub DebugLogIndex: ImGuiTextIndex,
    pub DebugLogClipperAutoDisableFrames: ImU8,
    pub DebugLocateFrames: ImU8,
    pub DebugBeginReturnValueCullDepth: ImS8,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerMouseButton: ImU8,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub DebugIDStackTool: ImGuiIDStackTool,
    pub DebugAllocInfo: ImGuiDebugAllocInfo,
    pub DebugHoveredDockNode: *mut ImGuiDockNode,
    pub FramerateSecPerFrame: [f32; 60usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameCount: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: ImVector_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiContext"][::std::mem::size_of::<ImGuiContext>() - 13248usize];
    ["Alignment of ImGuiContext"][::std::mem::align_of::<ImGuiContext>() - 8usize];
    ["Offset of field: ImGuiContext::Initialized"]
        [::std::mem::offset_of!(ImGuiContext, Initialized) - 0usize];
    ["Offset of field: ImGuiContext::FontAtlasOwnedByContext"]
        [::std::mem::offset_of!(ImGuiContext, FontAtlasOwnedByContext) - 1usize];
    ["Offset of field: ImGuiContext::IO"][::std::mem::offset_of!(ImGuiContext, IO) - 8usize];
    ["Offset of field: ImGuiContext::PlatformIO"]
        [::std::mem::offset_of!(ImGuiContext, PlatformIO) - 2968usize];
    ["Offset of field: ImGuiContext::Style"]
        [::std::mem::offset_of!(ImGuiContext, Style) - 3084usize];
    ["Offset of field: ImGuiContext::ConfigFlagsCurrFrame"]
        [::std::mem::offset_of!(ImGuiContext, ConfigFlagsCurrFrame) - 4216usize];
    ["Offset of field: ImGuiContext::ConfigFlagsLastFrame"]
        [::std::mem::offset_of!(ImGuiContext, ConfigFlagsLastFrame) - 4220usize];
    ["Offset of field: ImGuiContext::Font"][::std::mem::offset_of!(ImGuiContext, Font) - 4224usize];
    ["Offset of field: ImGuiContext::FontSize"]
        [::std::mem::offset_of!(ImGuiContext, FontSize) - 4228usize];
    ["Offset of field: ImGuiContext::FontBaseSize"]
        [::std::mem::offset_of!(ImGuiContext, FontBaseSize) - 4232usize];
    ["Offset of field: ImGuiContext::DrawListSharedData"]
        [::std::mem::offset_of!(ImGuiContext, DrawListSharedData) - 4236usize];
    ["Offset of field: ImGuiContext::Time"][::std::mem::offset_of!(ImGuiContext, Time) - 4752usize];
    ["Offset of field: ImGuiContext::FrameCount"]
        [::std::mem::offset_of!(ImGuiContext, FrameCount) - 4760usize];
    ["Offset of field: ImGuiContext::FrameCountEnded"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountEnded) - 4764usize];
    ["Offset of field: ImGuiContext::FrameCountPlatformEnded"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountPlatformEnded) - 4768usize];
    ["Offset of field: ImGuiContext::FrameCountRendered"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountRendered) - 4772usize];
    ["Offset of field: ImGuiContext::WithinFrameScope"]
        [::std::mem::offset_of!(ImGuiContext, WithinFrameScope) - 4776usize];
    ["Offset of field: ImGuiContext::WithinFrameScopeWithImplicitWindow"]
        [::std::mem::offset_of!(ImGuiContext, WithinFrameScopeWithImplicitWindow) - 4777usize];
    ["Offset of field: ImGuiContext::WithinEndChild"]
        [::std::mem::offset_of!(ImGuiContext, WithinEndChild) - 4778usize];
    ["Offset of field: ImGuiContext::GcCompactAll"]
        [::std::mem::offset_of!(ImGuiContext, GcCompactAll) - 4779usize];
    ["Offset of field: ImGuiContext::TestEngineHookItems"]
        [::std::mem::offset_of!(ImGuiContext, TestEngineHookItems) - 4780usize];
    ["Offset of field: ImGuiContext::TestEngine"]
        [::std::mem::offset_of!(ImGuiContext, TestEngine) - 4784usize];
    ["Offset of field: ImGuiContext::InputEventsQueue"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsQueue) - 4788usize];
    ["Offset of field: ImGuiContext::InputEventsTrail"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsTrail) - 4800usize];
    ["Offset of field: ImGuiContext::InputEventsNextMouseSource"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsNextMouseSource) - 4812usize];
    ["Offset of field: ImGuiContext::InputEventsNextEventId"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsNextEventId) - 4816usize];
    ["Offset of field: ImGuiContext::Windows"]
        [::std::mem::offset_of!(ImGuiContext, Windows) - 4820usize];
    ["Offset of field: ImGuiContext::WindowsFocusOrder"]
        [::std::mem::offset_of!(ImGuiContext, WindowsFocusOrder) - 4832usize];
    ["Offset of field: ImGuiContext::WindowsTempSortBuffer"]
        [::std::mem::offset_of!(ImGuiContext, WindowsTempSortBuffer) - 4844usize];
    ["Offset of field: ImGuiContext::CurrentWindowStack"]
        [::std::mem::offset_of!(ImGuiContext, CurrentWindowStack) - 4856usize];
    ["Offset of field: ImGuiContext::WindowsById"]
        [::std::mem::offset_of!(ImGuiContext, WindowsById) - 4868usize];
    ["Offset of field: ImGuiContext::WindowsActiveCount"]
        [::std::mem::offset_of!(ImGuiContext, WindowsActiveCount) - 4880usize];
    ["Offset of field: ImGuiContext::WindowsHoverPadding"]
        [::std::mem::offset_of!(ImGuiContext, WindowsHoverPadding) - 4884usize];
    ["Offset of field: ImGuiContext::CurrentWindow"]
        [::std::mem::offset_of!(ImGuiContext, CurrentWindow) - 4892usize];
    ["Offset of field: ImGuiContext::HoveredWindow"]
        [::std::mem::offset_of!(ImGuiContext, HoveredWindow) - 4896usize];
    ["Offset of field: ImGuiContext::HoveredWindowUnderMovingWindow"]
        [::std::mem::offset_of!(ImGuiContext, HoveredWindowUnderMovingWindow) - 4900usize];
    ["Offset of field: ImGuiContext::MovingWindow"]
        [::std::mem::offset_of!(ImGuiContext, MovingWindow) - 4904usize];
    ["Offset of field: ImGuiContext::WheelingWindow"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindow) - 4908usize];
    ["Offset of field: ImGuiContext::WheelingWindowRefMousePos"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowRefMousePos) - 4912usize];
    ["Offset of field: ImGuiContext::WheelingWindowStartFrame"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowStartFrame) - 4920usize];
    ["Offset of field: ImGuiContext::WheelingWindowScrolledFrame"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowScrolledFrame) - 4924usize];
    ["Offset of field: ImGuiContext::WheelingWindowReleaseTimer"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowReleaseTimer) - 4928usize];
    ["Offset of field: ImGuiContext::WheelingWindowWheelRemainder"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowWheelRemainder) - 4932usize];
    ["Offset of field: ImGuiContext::WheelingAxisAvg"]
        [::std::mem::offset_of!(ImGuiContext, WheelingAxisAvg) - 4940usize];
    ["Offset of field: ImGuiContext::DebugHookIdInfo"]
        [::std::mem::offset_of!(ImGuiContext, DebugHookIdInfo) - 4948usize];
    ["Offset of field: ImGuiContext::HoveredId"]
        [::std::mem::offset_of!(ImGuiContext, HoveredId) - 4952usize];
    ["Offset of field: ImGuiContext::HoveredIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdPreviousFrame) - 4956usize];
    ["Offset of field: ImGuiContext::HoveredIdAllowOverlap"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdAllowOverlap) - 4960usize];
    ["Offset of field: ImGuiContext::HoveredIdDisabled"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdDisabled) - 4961usize];
    ["Offset of field: ImGuiContext::HoveredIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdTimer) - 4964usize];
    ["Offset of field: ImGuiContext::HoveredIdNotActiveTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdNotActiveTimer) - 4968usize];
    ["Offset of field: ImGuiContext::ActiveId"]
        [::std::mem::offset_of!(ImGuiContext, ActiveId) - 4972usize];
    ["Offset of field: ImGuiContext::ActiveIdIsAlive"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdIsAlive) - 4976usize];
    ["Offset of field: ImGuiContext::ActiveIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdTimer) - 4980usize];
    ["Offset of field: ImGuiContext::ActiveIdIsJustActivated"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdIsJustActivated) - 4984usize];
    ["Offset of field: ImGuiContext::ActiveIdAllowOverlap"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdAllowOverlap) - 4985usize];
    ["Offset of field: ImGuiContext::ActiveIdNoClearOnFocusLoss"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdNoClearOnFocusLoss) - 4986usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenPressedBefore"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenPressedBefore) - 4987usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenEditedBefore"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenEditedBefore) - 4988usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenEditedThisFrame"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenEditedThisFrame) - 4989usize];
    ["Offset of field: ImGuiContext::ActiveIdClickOffset"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdClickOffset) - 4992usize];
    ["Offset of field: ImGuiContext::ActiveIdWindow"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdWindow) - 5000usize];
    ["Offset of field: ImGuiContext::ActiveIdSource"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdSource) - 5004usize];
    ["Offset of field: ImGuiContext::ActiveIdMouseButton"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdMouseButton) - 5008usize];
    ["Offset of field: ImGuiContext::ActiveIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdPreviousFrame) - 5012usize];
    ["Offset of field: ImGuiContext::ActiveIdPreviousFrameIsAlive"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdPreviousFrameIsAlive) - 5016usize];
    ["Offset of field: ImGuiContext::ActiveIdPreviousFrameHasBeenEditedBefore"][::std::mem::offset_of!(
        ImGuiContext,
        ActiveIdPreviousFrameHasBeenEditedBefore
    ) - 5017usize];
    ["Offset of field: ImGuiContext::ActiveIdPreviousFrameWindow"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdPreviousFrameWindow) - 5020usize];
    ["Offset of field: ImGuiContext::LastActiveId"]
        [::std::mem::offset_of!(ImGuiContext, LastActiveId) - 5024usize];
    ["Offset of field: ImGuiContext::LastActiveIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, LastActiveIdTimer) - 5028usize];
    ["Offset of field: ImGuiContext::KeysOwnerData"]
        [::std::mem::offset_of!(ImGuiContext, KeysOwnerData) - 5032usize];
    ["Offset of field: ImGuiContext::KeysRoutingTable"]
        [::std::mem::offset_of!(ImGuiContext, KeysRoutingTable) - 6880usize];
    ["Offset of field: ImGuiContext::ActiveIdUsingNavDirMask"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdUsingNavDirMask) - 7212usize];
    ["Offset of field: ImGuiContext::ActiveIdUsingAllKeyboardKeys"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdUsingAllKeyboardKeys) - 7216usize];
    ["Offset of field: ImGuiContext::CurrentFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, CurrentFocusScopeId) - 7220usize];
    ["Offset of field: ImGuiContext::CurrentItemFlags"]
        [::std::mem::offset_of!(ImGuiContext, CurrentItemFlags) - 7224usize];
    ["Offset of field: ImGuiContext::DebugLocateId"]
        [::std::mem::offset_of!(ImGuiContext, DebugLocateId) - 7228usize];
    ["Offset of field: ImGuiContext::NextItemData"]
        [::std::mem::offset_of!(ImGuiContext, NextItemData) - 7232usize];
    ["Offset of field: ImGuiContext::LastItemData"]
        [::std::mem::offset_of!(ImGuiContext, LastItemData) - 7264usize];
    ["Offset of field: ImGuiContext::NextWindowData"]
        [::std::mem::offset_of!(ImGuiContext, NextWindowData) - 7324usize];
    ["Offset of field: ImGuiContext::DebugShowGroupRects"]
        [::std::mem::offset_of!(ImGuiContext, DebugShowGroupRects) - 7464usize];
    ["Offset of field: ImGuiContext::ColorStack"]
        [::std::mem::offset_of!(ImGuiContext, ColorStack) - 7468usize];
    ["Offset of field: ImGuiContext::StyleVarStack"]
        [::std::mem::offset_of!(ImGuiContext, StyleVarStack) - 7480usize];
    ["Offset of field: ImGuiContext::FontStack"]
        [::std::mem::offset_of!(ImGuiContext, FontStack) - 7492usize];
    ["Offset of field: ImGuiContext::FocusScopeStack"]
        [::std::mem::offset_of!(ImGuiContext, FocusScopeStack) - 7504usize];
    ["Offset of field: ImGuiContext::ItemFlagsStack"]
        [::std::mem::offset_of!(ImGuiContext, ItemFlagsStack) - 7516usize];
    ["Offset of field: ImGuiContext::GroupStack"]
        [::std::mem::offset_of!(ImGuiContext, GroupStack) - 7528usize];
    ["Offset of field: ImGuiContext::OpenPopupStack"]
        [::std::mem::offset_of!(ImGuiContext, OpenPopupStack) - 7540usize];
    ["Offset of field: ImGuiContext::BeginPopupStack"]
        [::std::mem::offset_of!(ImGuiContext, BeginPopupStack) - 7552usize];
    ["Offset of field: ImGuiContext::NavTreeNodeStack"]
        [::std::mem::offset_of!(ImGuiContext, NavTreeNodeStack) - 7564usize];
    ["Offset of field: ImGuiContext::BeginMenuCount"]
        [::std::mem::offset_of!(ImGuiContext, BeginMenuCount) - 7576usize];
    ["Offset of field: ImGuiContext::Viewports"]
        [::std::mem::offset_of!(ImGuiContext, Viewports) - 7580usize];
    ["Offset of field: ImGuiContext::CurrentDpiScale"]
        [::std::mem::offset_of!(ImGuiContext, CurrentDpiScale) - 7592usize];
    ["Offset of field: ImGuiContext::CurrentViewport"]
        [::std::mem::offset_of!(ImGuiContext, CurrentViewport) - 7596usize];
    ["Offset of field: ImGuiContext::MouseViewport"]
        [::std::mem::offset_of!(ImGuiContext, MouseViewport) - 7600usize];
    ["Offset of field: ImGuiContext::MouseLastHoveredViewport"]
        [::std::mem::offset_of!(ImGuiContext, MouseLastHoveredViewport) - 7604usize];
    ["Offset of field: ImGuiContext::PlatformLastFocusedViewportId"]
        [::std::mem::offset_of!(ImGuiContext, PlatformLastFocusedViewportId) - 7608usize];
    ["Offset of field: ImGuiContext::FallbackMonitor"]
        [::std::mem::offset_of!(ImGuiContext, FallbackMonitor) - 7612usize];
    ["Offset of field: ImGuiContext::ViewportCreatedCount"]
        [::std::mem::offset_of!(ImGuiContext, ViewportCreatedCount) - 7652usize];
    ["Offset of field: ImGuiContext::PlatformWindowsCreatedCount"]
        [::std::mem::offset_of!(ImGuiContext, PlatformWindowsCreatedCount) - 7656usize];
    ["Offset of field: ImGuiContext::ViewportFocusedStampCount"]
        [::std::mem::offset_of!(ImGuiContext, ViewportFocusedStampCount) - 7660usize];
    ["Offset of field: ImGuiContext::NavWindow"]
        [::std::mem::offset_of!(ImGuiContext, NavWindow) - 7664usize];
    ["Offset of field: ImGuiContext::NavId"]
        [::std::mem::offset_of!(ImGuiContext, NavId) - 7668usize];
    ["Offset of field: ImGuiContext::NavFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, NavFocusScopeId) - 7672usize];
    ["Offset of field: ImGuiContext::NavActivateId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateId) - 7676usize];
    ["Offset of field: ImGuiContext::NavActivateDownId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateDownId) - 7680usize];
    ["Offset of field: ImGuiContext::NavActivatePressedId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivatePressedId) - 7684usize];
    ["Offset of field: ImGuiContext::NavActivateFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateFlags) - 7688usize];
    ["Offset of field: ImGuiContext::NavJustMovedToId"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToId) - 7692usize];
    ["Offset of field: ImGuiContext::NavJustMovedToFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToFocusScopeId) - 7696usize];
    ["Offset of field: ImGuiContext::NavJustMovedToKeyMods"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToKeyMods) - 7700usize];
    ["Offset of field: ImGuiContext::NavNextActivateId"]
        [::std::mem::offset_of!(ImGuiContext, NavNextActivateId) - 7704usize];
    ["Offset of field: ImGuiContext::NavNextActivateFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavNextActivateFlags) - 7708usize];
    ["Offset of field: ImGuiContext::NavInputSource"]
        [::std::mem::offset_of!(ImGuiContext, NavInputSource) - 7712usize];
    ["Offset of field: ImGuiContext::NavLayer"]
        [::std::mem::offset_of!(ImGuiContext, NavLayer) - 7716usize];
    ["Offset of field: ImGuiContext::NavLastValidSelectionUserData"]
        [::std::mem::offset_of!(ImGuiContext, NavLastValidSelectionUserData) - 7720usize];
    ["Offset of field: ImGuiContext::NavIdIsAlive"]
        [::std::mem::offset_of!(ImGuiContext, NavIdIsAlive) - 7728usize];
    ["Offset of field: ImGuiContext::NavMousePosDirty"]
        [::std::mem::offset_of!(ImGuiContext, NavMousePosDirty) - 7729usize];
    ["Offset of field: ImGuiContext::NavDisableHighlight"]
        [::std::mem::offset_of!(ImGuiContext, NavDisableHighlight) - 7730usize];
    ["Offset of field: ImGuiContext::NavDisableMouseHover"]
        [::std::mem::offset_of!(ImGuiContext, NavDisableMouseHover) - 7731usize];
    ["Offset of field: ImGuiContext::NavAnyRequest"]
        [::std::mem::offset_of!(ImGuiContext, NavAnyRequest) - 7732usize];
    ["Offset of field: ImGuiContext::NavInitRequest"]
        [::std::mem::offset_of!(ImGuiContext, NavInitRequest) - 7733usize];
    ["Offset of field: ImGuiContext::NavInitRequestFromMove"]
        [::std::mem::offset_of!(ImGuiContext, NavInitRequestFromMove) - 7734usize];
    ["Offset of field: ImGuiContext::NavInitResult"]
        [::std::mem::offset_of!(ImGuiContext, NavInitResult) - 7736usize];
    ["Offset of field: ImGuiContext::NavMoveSubmitted"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveSubmitted) - 7792usize];
    ["Offset of field: ImGuiContext::NavMoveScoringItems"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveScoringItems) - 7793usize];
    ["Offset of field: ImGuiContext::NavMoveForwardToNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveForwardToNextFrame) - 7794usize];
    ["Offset of field: ImGuiContext::NavMoveFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveFlags) - 7796usize];
    ["Offset of field: ImGuiContext::NavMoveScrollFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveScrollFlags) - 7800usize];
    ["Offset of field: ImGuiContext::NavMoveKeyMods"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveKeyMods) - 7804usize];
    ["Offset of field: ImGuiContext::NavMoveDir"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveDir) - 7808usize];
    ["Offset of field: ImGuiContext::NavMoveDirForDebug"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveDirForDebug) - 7812usize];
    ["Offset of field: ImGuiContext::NavMoveClipDir"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveClipDir) - 7816usize];
    ["Offset of field: ImGuiContext::NavScoringRect"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringRect) - 7820usize];
    ["Offset of field: ImGuiContext::NavScoringNoClipRect"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringNoClipRect) - 7836usize];
    ["Offset of field: ImGuiContext::NavScoringDebugCount"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringDebugCount) - 7852usize];
    ["Offset of field: ImGuiContext::NavTabbingDir"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingDir) - 7856usize];
    ["Offset of field: ImGuiContext::NavTabbingCounter"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingCounter) - 7860usize];
    ["Offset of field: ImGuiContext::NavMoveResultLocal"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultLocal) - 7864usize];
    ["Offset of field: ImGuiContext::NavMoveResultLocalVisible"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultLocalVisible) - 7920usize];
    ["Offset of field: ImGuiContext::NavMoveResultOther"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultOther) - 7976usize];
    ["Offset of field: ImGuiContext::NavTabbingResultFirst"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingResultFirst) - 8032usize];
    ["Offset of field: ImGuiContext::ConfigNavWindowingKeyNext"]
        [::std::mem::offset_of!(ImGuiContext, ConfigNavWindowingKeyNext) - 8088usize];
    ["Offset of field: ImGuiContext::ConfigNavWindowingKeyPrev"]
        [::std::mem::offset_of!(ImGuiContext, ConfigNavWindowingKeyPrev) - 8092usize];
    ["Offset of field: ImGuiContext::NavWindowingTarget"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTarget) - 8096usize];
    ["Offset of field: ImGuiContext::NavWindowingTargetAnim"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTargetAnim) - 8100usize];
    ["Offset of field: ImGuiContext::NavWindowingListWindow"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingListWindow) - 8104usize];
    ["Offset of field: ImGuiContext::NavWindowingTimer"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTimer) - 8108usize];
    ["Offset of field: ImGuiContext::NavWindowingHighlightAlpha"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingHighlightAlpha) - 8112usize];
    ["Offset of field: ImGuiContext::NavWindowingToggleLayer"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingToggleLayer) - 8116usize];
    ["Offset of field: ImGuiContext::NavWindowingAccumDeltaPos"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingAccumDeltaPos) - 8120usize];
    ["Offset of field: ImGuiContext::NavWindowingAccumDeltaSize"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingAccumDeltaSize) - 8128usize];
    ["Offset of field: ImGuiContext::DimBgRatio"]
        [::std::mem::offset_of!(ImGuiContext, DimBgRatio) - 8136usize];
    ["Offset of field: ImGuiContext::DragDropActive"]
        [::std::mem::offset_of!(ImGuiContext, DragDropActive) - 8140usize];
    ["Offset of field: ImGuiContext::DragDropWithinSource"]
        [::std::mem::offset_of!(ImGuiContext, DragDropWithinSource) - 8141usize];
    ["Offset of field: ImGuiContext::DragDropWithinTarget"]
        [::std::mem::offset_of!(ImGuiContext, DragDropWithinTarget) - 8142usize];
    ["Offset of field: ImGuiContext::DragDropSourceFlags"]
        [::std::mem::offset_of!(ImGuiContext, DragDropSourceFlags) - 8144usize];
    ["Offset of field: ImGuiContext::DragDropSourceFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, DragDropSourceFrameCount) - 8148usize];
    ["Offset of field: ImGuiContext::DragDropMouseButton"]
        [::std::mem::offset_of!(ImGuiContext, DragDropMouseButton) - 8152usize];
    ["Offset of field: ImGuiContext::DragDropPayload"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayload) - 8156usize];
    ["Offset of field: ImGuiContext::DragDropTargetRect"]
        [::std::mem::offset_of!(ImGuiContext, DragDropTargetRect) - 8212usize];
    ["Offset of field: ImGuiContext::DragDropTargetId"]
        [::std::mem::offset_of!(ImGuiContext, DragDropTargetId) - 8228usize];
    ["Offset of field: ImGuiContext::DragDropAcceptFlags"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptFlags) - 8232usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdCurrRectSurface"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdCurrRectSurface) - 8236usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdCurr"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdCurr) - 8240usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdPrev"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdPrev) - 8244usize];
    ["Offset of field: ImGuiContext::DragDropAcceptFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptFrameCount) - 8248usize];
    ["Offset of field: ImGuiContext::DragDropHoldJustPressedId"]
        [::std::mem::offset_of!(ImGuiContext, DragDropHoldJustPressedId) - 8252usize];
    ["Offset of field: ImGuiContext::DragDropPayloadBufHeap"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayloadBufHeap) - 8256usize];
    ["Offset of field: ImGuiContext::DragDropPayloadBufLocal"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayloadBufLocal) - 8268usize];
    ["Offset of field: ImGuiContext::ClipperTempDataStacked"]
        [::std::mem::offset_of!(ImGuiContext, ClipperTempDataStacked) - 8284usize];
    ["Offset of field: ImGuiContext::ClipperTempData"]
        [::std::mem::offset_of!(ImGuiContext, ClipperTempData) - 8288usize];
    ["Offset of field: ImGuiContext::CurrentTable"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTable) - 8300usize];
    ["Offset of field: ImGuiContext::TablesTempDataStacked"]
        [::std::mem::offset_of!(ImGuiContext, TablesTempDataStacked) - 8304usize];
    ["Offset of field: ImGuiContext::TablesTempData"]
        [::std::mem::offset_of!(ImGuiContext, TablesTempData) - 8308usize];
    ["Offset of field: ImGuiContext::Tables"]
        [::std::mem::offset_of!(ImGuiContext, Tables) - 8320usize];
    ["Offset of field: ImGuiContext::TablesLastTimeActive"]
        [::std::mem::offset_of!(ImGuiContext, TablesLastTimeActive) - 8352usize];
    ["Offset of field: ImGuiContext::DrawChannelsTempMergeBuffer"]
        [::std::mem::offset_of!(ImGuiContext, DrawChannelsTempMergeBuffer) - 8364usize];
    ["Offset of field: ImGuiContext::CurrentTabBar"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTabBar) - 8376usize];
    ["Offset of field: ImGuiContext::TabBars"]
        [::std::mem::offset_of!(ImGuiContext, TabBars) - 8380usize];
    ["Offset of field: ImGuiContext::CurrentTabBarStack"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTabBarStack) - 8412usize];
    ["Offset of field: ImGuiContext::ShrinkWidthBuffer"]
        [::std::mem::offset_of!(ImGuiContext, ShrinkWidthBuffer) - 8424usize];
    ["Offset of field: ImGuiContext::HoverItemDelayId"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayId) - 8436usize];
    ["Offset of field: ImGuiContext::HoverItemDelayIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayIdPreviousFrame) - 8440usize];
    ["Offset of field: ImGuiContext::HoverItemDelayTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayTimer) - 8444usize];
    ["Offset of field: ImGuiContext::HoverItemDelayClearTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayClearTimer) - 8448usize];
    ["Offset of field: ImGuiContext::HoverItemUnlockedStationaryId"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemUnlockedStationaryId) - 8452usize];
    ["Offset of field: ImGuiContext::HoverWindowUnlockedStationaryId"]
        [::std::mem::offset_of!(ImGuiContext, HoverWindowUnlockedStationaryId) - 8456usize];
    ["Offset of field: ImGuiContext::MouseCursor"]
        [::std::mem::offset_of!(ImGuiContext, MouseCursor) - 8460usize];
    ["Offset of field: ImGuiContext::MouseStationaryTimer"]
        [::std::mem::offset_of!(ImGuiContext, MouseStationaryTimer) - 8464usize];
    ["Offset of field: ImGuiContext::MouseLastValidPos"]
        [::std::mem::offset_of!(ImGuiContext, MouseLastValidPos) - 8468usize];
    ["Offset of field: ImGuiContext::InputTextState"]
        [::std::mem::offset_of!(ImGuiContext, InputTextState) - 8476usize];
    ["Offset of field: ImGuiContext::InputTextDeactivatedState"]
        [::std::mem::offset_of!(ImGuiContext, InputTextDeactivatedState) - 12180usize];
    ["Offset of field: ImGuiContext::InputTextPasswordFont"]
        [::std::mem::offset_of!(ImGuiContext, InputTextPasswordFont) - 12196usize];
    ["Offset of field: ImGuiContext::TempInputId"]
        [::std::mem::offset_of!(ImGuiContext, TempInputId) - 12292usize];
    ["Offset of field: ImGuiContext::ColorEditOptions"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditOptions) - 12296usize];
    ["Offset of field: ImGuiContext::ColorEditCurrentID"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditCurrentID) - 12300usize];
    ["Offset of field: ImGuiContext::ColorEditSavedID"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedID) - 12304usize];
    ["Offset of field: ImGuiContext::ColorEditSavedHue"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedHue) - 12308usize];
    ["Offset of field: ImGuiContext::ColorEditSavedSat"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedSat) - 12312usize];
    ["Offset of field: ImGuiContext::ColorEditSavedColor"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedColor) - 12316usize];
    ["Offset of field: ImGuiContext::ColorPickerRef"]
        [::std::mem::offset_of!(ImGuiContext, ColorPickerRef) - 12320usize];
    ["Offset of field: ImGuiContext::ComboPreviewData"]
        [::std::mem::offset_of!(ImGuiContext, ComboPreviewData) - 12336usize];
    ["Offset of field: ImGuiContext::WindowResizeBorderExpectedRect"]
        [::std::mem::offset_of!(ImGuiContext, WindowResizeBorderExpectedRect) - 12384usize];
    ["Offset of field: ImGuiContext::WindowResizeRelativeMode"]
        [::std::mem::offset_of!(ImGuiContext, WindowResizeRelativeMode) - 12400usize];
    ["Offset of field: ImGuiContext::SliderGrabClickOffset"]
        [::std::mem::offset_of!(ImGuiContext, SliderGrabClickOffset) - 12404usize];
    ["Offset of field: ImGuiContext::SliderCurrentAccum"]
        [::std::mem::offset_of!(ImGuiContext, SliderCurrentAccum) - 12408usize];
    ["Offset of field: ImGuiContext::SliderCurrentAccumDirty"]
        [::std::mem::offset_of!(ImGuiContext, SliderCurrentAccumDirty) - 12412usize];
    ["Offset of field: ImGuiContext::DragCurrentAccumDirty"]
        [::std::mem::offset_of!(ImGuiContext, DragCurrentAccumDirty) - 12413usize];
    ["Offset of field: ImGuiContext::DragCurrentAccum"]
        [::std::mem::offset_of!(ImGuiContext, DragCurrentAccum) - 12416usize];
    ["Offset of field: ImGuiContext::DragSpeedDefaultRatio"]
        [::std::mem::offset_of!(ImGuiContext, DragSpeedDefaultRatio) - 12420usize];
    ["Offset of field: ImGuiContext::ScrollbarClickDeltaToGrabCenter"]
        [::std::mem::offset_of!(ImGuiContext, ScrollbarClickDeltaToGrabCenter) - 12424usize];
    ["Offset of field: ImGuiContext::DisabledAlphaBackup"]
        [::std::mem::offset_of!(ImGuiContext, DisabledAlphaBackup) - 12428usize];
    ["Offset of field: ImGuiContext::DisabledStackSize"]
        [::std::mem::offset_of!(ImGuiContext, DisabledStackSize) - 12432usize];
    ["Offset of field: ImGuiContext::LockMarkEdited"]
        [::std::mem::offset_of!(ImGuiContext, LockMarkEdited) - 12434usize];
    ["Offset of field: ImGuiContext::TooltipOverrideCount"]
        [::std::mem::offset_of!(ImGuiContext, TooltipOverrideCount) - 12436usize];
    ["Offset of field: ImGuiContext::ClipboardHandlerData"]
        [::std::mem::offset_of!(ImGuiContext, ClipboardHandlerData) - 12440usize];
    ["Offset of field: ImGuiContext::MenusIdSubmittedThisFrame"]
        [::std::mem::offset_of!(ImGuiContext, MenusIdSubmittedThisFrame) - 12452usize];
    ["Offset of field: ImGuiContext::TypingSelectState"]
        [::std::mem::offset_of!(ImGuiContext, TypingSelectState) - 12464usize];
    ["Offset of field: ImGuiContext::PlatformImeData"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeData) - 12560usize];
    ["Offset of field: ImGuiContext::PlatformImeDataPrev"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeDataPrev) - 12576usize];
    ["Offset of field: ImGuiContext::PlatformImeViewport"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeViewport) - 12592usize];
    ["Offset of field: ImGuiContext::DockContext"]
        [::std::mem::offset_of!(ImGuiContext, DockContext) - 12596usize];
    ["Offset of field: ImGuiContext::DockNodeWindowMenuHandler"]
        [::std::mem::offset_of!(ImGuiContext, DockNodeWindowMenuHandler) - 12636usize];
    ["Offset of field: ImGuiContext::SettingsLoaded"]
        [::std::mem::offset_of!(ImGuiContext, SettingsLoaded) - 12640usize];
    ["Offset of field: ImGuiContext::SettingsDirtyTimer"]
        [::std::mem::offset_of!(ImGuiContext, SettingsDirtyTimer) - 12644usize];
    ["Offset of field: ImGuiContext::SettingsIniData"]
        [::std::mem::offset_of!(ImGuiContext, SettingsIniData) - 12648usize];
    ["Offset of field: ImGuiContext::SettingsHandlers"]
        [::std::mem::offset_of!(ImGuiContext, SettingsHandlers) - 12660usize];
    ["Offset of field: ImGuiContext::SettingsWindows"]
        [::std::mem::offset_of!(ImGuiContext, SettingsWindows) - 12672usize];
    ["Offset of field: ImGuiContext::SettingsTables"]
        [::std::mem::offset_of!(ImGuiContext, SettingsTables) - 12684usize];
    ["Offset of field: ImGuiContext::Hooks"]
        [::std::mem::offset_of!(ImGuiContext, Hooks) - 12696usize];
    ["Offset of field: ImGuiContext::HookIdNext"]
        [::std::mem::offset_of!(ImGuiContext, HookIdNext) - 12708usize];
    ["Offset of field: ImGuiContext::LocalizationTable"]
        [::std::mem::offset_of!(ImGuiContext, LocalizationTable) - 12712usize];
    ["Offset of field: ImGuiContext::LogEnabled"]
        [::std::mem::offset_of!(ImGuiContext, LogEnabled) - 12756usize];
    ["Offset of field: ImGuiContext::LogType"]
        [::std::mem::offset_of!(ImGuiContext, LogType) - 12760usize];
    ["Offset of field: ImGuiContext::LogFile"]
        [::std::mem::offset_of!(ImGuiContext, LogFile) - 12764usize];
    ["Offset of field: ImGuiContext::LogBuffer"]
        [::std::mem::offset_of!(ImGuiContext, LogBuffer) - 12768usize];
    ["Offset of field: ImGuiContext::LogNextPrefix"]
        [::std::mem::offset_of!(ImGuiContext, LogNextPrefix) - 12780usize];
    ["Offset of field: ImGuiContext::LogNextSuffix"]
        [::std::mem::offset_of!(ImGuiContext, LogNextSuffix) - 12784usize];
    ["Offset of field: ImGuiContext::LogLinePosY"]
        [::std::mem::offset_of!(ImGuiContext, LogLinePosY) - 12788usize];
    ["Offset of field: ImGuiContext::LogLineFirstItem"]
        [::std::mem::offset_of!(ImGuiContext, LogLineFirstItem) - 12792usize];
    ["Offset of field: ImGuiContext::LogDepthRef"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthRef) - 12796usize];
    ["Offset of field: ImGuiContext::LogDepthToExpand"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthToExpand) - 12800usize];
    ["Offset of field: ImGuiContext::LogDepthToExpandDefault"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthToExpandDefault) - 12804usize];
    ["Offset of field: ImGuiContext::DebugLogFlags"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogFlags) - 12808usize];
    ["Offset of field: ImGuiContext::DebugLogBuf"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogBuf) - 12812usize];
    ["Offset of field: ImGuiContext::DebugLogIndex"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogIndex) - 12824usize];
    ["Offset of field: ImGuiContext::DebugLogClipperAutoDisableFrames"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogClipperAutoDisableFrames) - 12840usize];
    ["Offset of field: ImGuiContext::DebugLocateFrames"]
        [::std::mem::offset_of!(ImGuiContext, DebugLocateFrames) - 12841usize];
    ["Offset of field: ImGuiContext::DebugBeginReturnValueCullDepth"]
        [::std::mem::offset_of!(ImGuiContext, DebugBeginReturnValueCullDepth) - 12842usize];
    ["Offset of field: ImGuiContext::DebugItemPickerActive"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerActive) - 12843usize];
    ["Offset of field: ImGuiContext::DebugItemPickerMouseButton"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerMouseButton) - 12844usize];
    ["Offset of field: ImGuiContext::DebugItemPickerBreakId"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerBreakId) - 12848usize];
    ["Offset of field: ImGuiContext::DebugMetricsConfig"]
        [::std::mem::offset_of!(ImGuiContext, DebugMetricsConfig) - 12852usize];
    ["Offset of field: ImGuiContext::DebugIDStackTool"]
        [::std::mem::offset_of!(ImGuiContext, DebugIDStackTool) - 12872usize];
    ["Offset of field: ImGuiContext::DebugAllocInfo"]
        [::std::mem::offset_of!(ImGuiContext, DebugAllocInfo) - 12904usize];
    ["Offset of field: ImGuiContext::DebugHoveredDockNode"]
        [::std::mem::offset_of!(ImGuiContext, DebugHoveredDockNode) - 12964usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrame"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrame) - 12968usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameIdx"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameIdx) - 13208usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameCount) - 13212usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameAccum"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameAccum) - 13216usize];
    ["Offset of field: ImGuiContext::WantCaptureMouseNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantCaptureMouseNextFrame) - 13220usize];
    ["Offset of field: ImGuiContext::WantCaptureKeyboardNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantCaptureKeyboardNextFrame) - 13224usize];
    ["Offset of field: ImGuiContext::WantTextInputNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantTextInputNextFrame) - 13228usize];
    ["Offset of field: ImGuiContext::TempBuffer"]
        [::std::mem::offset_of!(ImGuiContext, TempBuffer) - 13232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub IsSetPos: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavIsScrollPushableX: bool,
    pub NavHideHighlightOneFrame: bool,
    pub NavWindowHasScrollY: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowTempData"][::std::mem::size_of::<ImGuiWindowTempData>() - 208usize];
    ["Alignment of ImGuiWindowTempData"][::std::mem::align_of::<ImGuiWindowTempData>() - 4usize];
    ["Offset of field: ImGuiWindowTempData::CursorPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorPos) - 0usize];
    ["Offset of field: ImGuiWindowTempData::CursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorPosPrevLine) - 8usize];
    ["Offset of field: ImGuiWindowTempData::CursorStartPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorStartPos) - 16usize];
    ["Offset of field: ImGuiWindowTempData::CursorMaxPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorMaxPos) - 24usize];
    ["Offset of field: ImGuiWindowTempData::IdealMaxPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IdealMaxPos) - 32usize];
    ["Offset of field: ImGuiWindowTempData::CurrLineSize"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrLineSize) - 40usize];
    ["Offset of field: ImGuiWindowTempData::PrevLineSize"]
        [::std::mem::offset_of!(ImGuiWindowTempData, PrevLineSize) - 48usize];
    ["Offset of field: ImGuiWindowTempData::CurrLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrLineTextBaseOffset) - 56usize];
    ["Offset of field: ImGuiWindowTempData::PrevLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, PrevLineTextBaseOffset) - 60usize];
    ["Offset of field: ImGuiWindowTempData::IsSameLine"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IsSameLine) - 64usize];
    ["Offset of field: ImGuiWindowTempData::IsSetPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IsSetPos) - 65usize];
    ["Offset of field: ImGuiWindowTempData::Indent"]
        [::std::mem::offset_of!(ImGuiWindowTempData, Indent) - 68usize];
    ["Offset of field: ImGuiWindowTempData::ColumnsOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ColumnsOffset) - 72usize];
    ["Offset of field: ImGuiWindowTempData::GroupOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, GroupOffset) - 76usize];
    ["Offset of field: ImGuiWindowTempData::CursorStartPosLossyness"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorStartPosLossyness) - 80usize];
    ["Offset of field: ImGuiWindowTempData::NavLayerCurrent"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayerCurrent) - 88usize];
    ["Offset of field: ImGuiWindowTempData::NavLayersActiveMask"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayersActiveMask) - 92usize];
    ["Offset of field: ImGuiWindowTempData::NavLayersActiveMaskNext"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayersActiveMaskNext) - 94usize];
    ["Offset of field: ImGuiWindowTempData::NavIsScrollPushableX"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavIsScrollPushableX) - 96usize];
    ["Offset of field: ImGuiWindowTempData::NavHideHighlightOneFrame"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavHideHighlightOneFrame) - 97usize];
    ["Offset of field: ImGuiWindowTempData::NavWindowHasScrollY"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavWindowHasScrollY) - 98usize];
    ["Offset of field: ImGuiWindowTempData::MenuBarAppending"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuBarAppending) - 99usize];
    ["Offset of field: ImGuiWindowTempData::MenuBarOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuBarOffset) - 100usize];
    ["Offset of field: ImGuiWindowTempData::MenuColumns"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuColumns) - 108usize];
    ["Offset of field: ImGuiWindowTempData::TreeDepth"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TreeDepth) - 136usize];
    ["Offset of field: ImGuiWindowTempData::TreeJumpToParentOnPopMask"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TreeJumpToParentOnPopMask) - 140usize];
    ["Offset of field: ImGuiWindowTempData::ChildWindows"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ChildWindows) - 144usize];
    ["Offset of field: ImGuiWindowTempData::StateStorage"]
        [::std::mem::offset_of!(ImGuiWindowTempData, StateStorage) - 156usize];
    ["Offset of field: ImGuiWindowTempData::CurrentColumns"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrentColumns) - 160usize];
    ["Offset of field: ImGuiWindowTempData::CurrentTableIdx"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrentTableIdx) - 164usize];
    ["Offset of field: ImGuiWindowTempData::LayoutType"]
        [::std::mem::offset_of!(ImGuiWindowTempData, LayoutType) - 168usize];
    ["Offset of field: ImGuiWindowTempData::ParentLayoutType"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ParentLayoutType) - 172usize];
    ["Offset of field: ImGuiWindowTempData::ItemWidth"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ItemWidth) - 176usize];
    ["Offset of field: ImGuiWindowTempData::TextWrapPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TextWrapPos) - 180usize];
    ["Offset of field: ImGuiWindowTempData::ItemWidthStack"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ItemWidthStack) - 184usize];
    ["Offset of field: ImGuiWindowTempData::TextWrapPosStack"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TextWrapPosStack) - 196usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumns,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiOldColumns"]
        [::std::mem::size_of::<ImVector_ImGuiOldColumns>() - 12usize];
    ["Alignment of ImVector_ImGuiOldColumns"]
        [::std::mem::align_of::<ImVector_ImGuiOldColumns>() - 4usize];
    ["Offset of field: ImVector_ImGuiOldColumns::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumns, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiOldColumns::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumns, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiOldColumns::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiOldColumns, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindow {
    pub Ctx: *mut ImGuiContext,
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub DecoOuterSizeX1: f32,
    pub DecoOuterSizeY1: f32,
    pub DecoOuterSizeX2: f32,
    pub DecoOuterSizeY2: f32,
    pub DecoInnerSizeX1: f32,
    pub DecoInnerSizeY1: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHovered: ::std::os::raw::c_schar,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginCountPreviousFrame: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub PopupId: ImGuiID,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiOldColumns,
    pub FontWindowScale: f32,
    pub FontDpiScale: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub NavPreferredScoringPosRel: [ImVec2; 2usize],
    pub NavRootFocusScopeId: ImGuiID,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindow"][::std::mem::size_of::<ImGuiWindow>() - 988usize];
    ["Alignment of ImGuiWindow"][::std::mem::align_of::<ImGuiWindow>() - 4usize];
    ["Offset of field: ImGuiWindow::Ctx"][::std::mem::offset_of!(ImGuiWindow, Ctx) - 0usize];
    ["Offset of field: ImGuiWindow::Name"][::std::mem::offset_of!(ImGuiWindow, Name) - 4usize];
    ["Offset of field: ImGuiWindow::ID"][::std::mem::offset_of!(ImGuiWindow, ID) - 8usize];
    ["Offset of field: ImGuiWindow::Flags"][::std::mem::offset_of!(ImGuiWindow, Flags) - 12usize];
    ["Offset of field: ImGuiWindow::FlagsPreviousFrame"]
        [::std::mem::offset_of!(ImGuiWindow, FlagsPreviousFrame) - 16usize];
    ["Offset of field: ImGuiWindow::ChildFlags"]
        [::std::mem::offset_of!(ImGuiWindow, ChildFlags) - 20usize];
    ["Offset of field: ImGuiWindow::WindowClass"]
        [::std::mem::offset_of!(ImGuiWindow, WindowClass) - 24usize];
    ["Offset of field: ImGuiWindow::Viewport"]
        [::std::mem::offset_of!(ImGuiWindow, Viewport) - 52usize];
    ["Offset of field: ImGuiWindow::ViewportId"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportId) - 56usize];
    ["Offset of field: ImGuiWindow::ViewportPos"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportPos) - 60usize];
    ["Offset of field: ImGuiWindow::ViewportAllowPlatformMonitorExtend"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportAllowPlatformMonitorExtend) - 68usize];
    ["Offset of field: ImGuiWindow::Pos"][::std::mem::offset_of!(ImGuiWindow, Pos) - 72usize];
    ["Offset of field: ImGuiWindow::Size"][::std::mem::offset_of!(ImGuiWindow, Size) - 80usize];
    ["Offset of field: ImGuiWindow::SizeFull"]
        [::std::mem::offset_of!(ImGuiWindow, SizeFull) - 88usize];
    ["Offset of field: ImGuiWindow::ContentSize"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSize) - 96usize];
    ["Offset of field: ImGuiWindow::ContentSizeIdeal"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSizeIdeal) - 104usize];
    ["Offset of field: ImGuiWindow::ContentSizeExplicit"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSizeExplicit) - 112usize];
    ["Offset of field: ImGuiWindow::WindowPadding"]
        [::std::mem::offset_of!(ImGuiWindow, WindowPadding) - 120usize];
    ["Offset of field: ImGuiWindow::WindowRounding"]
        [::std::mem::offset_of!(ImGuiWindow, WindowRounding) - 128usize];
    ["Offset of field: ImGuiWindow::WindowBorderSize"]
        [::std::mem::offset_of!(ImGuiWindow, WindowBorderSize) - 132usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeX1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeX1) - 136usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeY1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeY1) - 140usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeX2"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeX2) - 144usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeY2"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeY2) - 148usize];
    ["Offset of field: ImGuiWindow::DecoInnerSizeX1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoInnerSizeX1) - 152usize];
    ["Offset of field: ImGuiWindow::DecoInnerSizeY1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoInnerSizeY1) - 156usize];
    ["Offset of field: ImGuiWindow::NameBufLen"]
        [::std::mem::offset_of!(ImGuiWindow, NameBufLen) - 160usize];
    ["Offset of field: ImGuiWindow::MoveId"]
        [::std::mem::offset_of!(ImGuiWindow, MoveId) - 164usize];
    ["Offset of field: ImGuiWindow::TabId"][::std::mem::offset_of!(ImGuiWindow, TabId) - 168usize];
    ["Offset of field: ImGuiWindow::ChildId"]
        [::std::mem::offset_of!(ImGuiWindow, ChildId) - 172usize];
    ["Offset of field: ImGuiWindow::Scroll"]
        [::std::mem::offset_of!(ImGuiWindow, Scroll) - 176usize];
    ["Offset of field: ImGuiWindow::ScrollMax"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollMax) - 184usize];
    ["Offset of field: ImGuiWindow::ScrollTarget"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTarget) - 192usize];
    ["Offset of field: ImGuiWindow::ScrollTargetCenterRatio"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTargetCenterRatio) - 200usize];
    ["Offset of field: ImGuiWindow::ScrollTargetEdgeSnapDist"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTargetEdgeSnapDist) - 208usize];
    ["Offset of field: ImGuiWindow::ScrollbarSizes"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarSizes) - 216usize];
    ["Offset of field: ImGuiWindow::ScrollbarX"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarX) - 224usize];
    ["Offset of field: ImGuiWindow::ScrollbarY"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarY) - 225usize];
    ["Offset of field: ImGuiWindow::ViewportOwned"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportOwned) - 226usize];
    ["Offset of field: ImGuiWindow::Active"]
        [::std::mem::offset_of!(ImGuiWindow, Active) - 227usize];
    ["Offset of field: ImGuiWindow::WasActive"]
        [::std::mem::offset_of!(ImGuiWindow, WasActive) - 228usize];
    ["Offset of field: ImGuiWindow::WriteAccessed"]
        [::std::mem::offset_of!(ImGuiWindow, WriteAccessed) - 229usize];
    ["Offset of field: ImGuiWindow::Collapsed"]
        [::std::mem::offset_of!(ImGuiWindow, Collapsed) - 230usize];
    ["Offset of field: ImGuiWindow::WantCollapseToggle"]
        [::std::mem::offset_of!(ImGuiWindow, WantCollapseToggle) - 231usize];
    ["Offset of field: ImGuiWindow::SkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, SkipItems) - 232usize];
    ["Offset of field: ImGuiWindow::Appearing"]
        [::std::mem::offset_of!(ImGuiWindow, Appearing) - 233usize];
    ["Offset of field: ImGuiWindow::Hidden"]
        [::std::mem::offset_of!(ImGuiWindow, Hidden) - 234usize];
    ["Offset of field: ImGuiWindow::IsFallbackWindow"]
        [::std::mem::offset_of!(ImGuiWindow, IsFallbackWindow) - 235usize];
    ["Offset of field: ImGuiWindow::IsExplicitChild"]
        [::std::mem::offset_of!(ImGuiWindow, IsExplicitChild) - 236usize];
    ["Offset of field: ImGuiWindow::HasCloseButton"]
        [::std::mem::offset_of!(ImGuiWindow, HasCloseButton) - 237usize];
    ["Offset of field: ImGuiWindow::ResizeBorderHovered"]
        [::std::mem::offset_of!(ImGuiWindow, ResizeBorderHovered) - 238usize];
    ["Offset of field: ImGuiWindow::ResizeBorderHeld"]
        [::std::mem::offset_of!(ImGuiWindow, ResizeBorderHeld) - 239usize];
    ["Offset of field: ImGuiWindow::BeginCount"]
        [::std::mem::offset_of!(ImGuiWindow, BeginCount) - 240usize];
    ["Offset of field: ImGuiWindow::BeginCountPreviousFrame"]
        [::std::mem::offset_of!(ImGuiWindow, BeginCountPreviousFrame) - 242usize];
    ["Offset of field: ImGuiWindow::BeginOrderWithinParent"]
        [::std::mem::offset_of!(ImGuiWindow, BeginOrderWithinParent) - 244usize];
    ["Offset of field: ImGuiWindow::BeginOrderWithinContext"]
        [::std::mem::offset_of!(ImGuiWindow, BeginOrderWithinContext) - 246usize];
    ["Offset of field: ImGuiWindow::FocusOrder"]
        [::std::mem::offset_of!(ImGuiWindow, FocusOrder) - 248usize];
    ["Offset of field: ImGuiWindow::PopupId"]
        [::std::mem::offset_of!(ImGuiWindow, PopupId) - 252usize];
    ["Offset of field: ImGuiWindow::AutoFitFramesX"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitFramesX) - 256usize];
    ["Offset of field: ImGuiWindow::AutoFitFramesY"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitFramesY) - 257usize];
    ["Offset of field: ImGuiWindow::AutoFitOnlyGrows"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitOnlyGrows) - 258usize];
    ["Offset of field: ImGuiWindow::AutoPosLastDirection"]
        [::std::mem::offset_of!(ImGuiWindow, AutoPosLastDirection) - 260usize];
    ["Offset of field: ImGuiWindow::HiddenFramesCanSkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesCanSkipItems) - 264usize];
    ["Offset of field: ImGuiWindow::HiddenFramesCannotSkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesCannotSkipItems) - 265usize];
    ["Offset of field: ImGuiWindow::HiddenFramesForRenderOnly"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesForRenderOnly) - 266usize];
    ["Offset of field: ImGuiWindow::DisableInputsFrames"]
        [::std::mem::offset_of!(ImGuiWindow, DisableInputsFrames) - 267usize];
    ["Offset of field: ImGuiWindow::SetWindowPosVal"]
        [::std::mem::offset_of!(ImGuiWindow, SetWindowPosVal) - 272usize];
    ["Offset of field: ImGuiWindow::SetWindowPosPivot"]
        [::std::mem::offset_of!(ImGuiWindow, SetWindowPosPivot) - 280usize];
    ["Offset of field: ImGuiWindow::IDStack"]
        [::std::mem::offset_of!(ImGuiWindow, IDStack) - 288usize];
    ["Offset of field: ImGuiWindow::DC"][::std::mem::offset_of!(ImGuiWindow, DC) - 300usize];
    ["Offset of field: ImGuiWindow::OuterRectClipped"]
        [::std::mem::offset_of!(ImGuiWindow, OuterRectClipped) - 508usize];
    ["Offset of field: ImGuiWindow::InnerRect"]
        [::std::mem::offset_of!(ImGuiWindow, InnerRect) - 524usize];
    ["Offset of field: ImGuiWindow::InnerClipRect"]
        [::std::mem::offset_of!(ImGuiWindow, InnerClipRect) - 540usize];
    ["Offset of field: ImGuiWindow::WorkRect"]
        [::std::mem::offset_of!(ImGuiWindow, WorkRect) - 556usize];
    ["Offset of field: ImGuiWindow::ParentWorkRect"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWorkRect) - 572usize];
    ["Offset of field: ImGuiWindow::ClipRect"]
        [::std::mem::offset_of!(ImGuiWindow, ClipRect) - 588usize];
    ["Offset of field: ImGuiWindow::ContentRegionRect"]
        [::std::mem::offset_of!(ImGuiWindow, ContentRegionRect) - 604usize];
    ["Offset of field: ImGuiWindow::HitTestHoleSize"]
        [::std::mem::offset_of!(ImGuiWindow, HitTestHoleSize) - 620usize];
    ["Offset of field: ImGuiWindow::HitTestHoleOffset"]
        [::std::mem::offset_of!(ImGuiWindow, HitTestHoleOffset) - 624usize];
    ["Offset of field: ImGuiWindow::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiWindow, LastFrameActive) - 628usize];
    ["Offset of field: ImGuiWindow::LastFrameJustFocused"]
        [::std::mem::offset_of!(ImGuiWindow, LastFrameJustFocused) - 632usize];
    ["Offset of field: ImGuiWindow::LastTimeActive"]
        [::std::mem::offset_of!(ImGuiWindow, LastTimeActive) - 636usize];
    ["Offset of field: ImGuiWindow::ItemWidthDefault"]
        [::std::mem::offset_of!(ImGuiWindow, ItemWidthDefault) - 640usize];
    ["Offset of field: ImGuiWindow::StateStorage"]
        [::std::mem::offset_of!(ImGuiWindow, StateStorage) - 644usize];
    ["Offset of field: ImGuiWindow::ColumnsStorage"]
        [::std::mem::offset_of!(ImGuiWindow, ColumnsStorage) - 656usize];
    ["Offset of field: ImGuiWindow::FontWindowScale"]
        [::std::mem::offset_of!(ImGuiWindow, FontWindowScale) - 668usize];
    ["Offset of field: ImGuiWindow::FontDpiScale"]
        [::std::mem::offset_of!(ImGuiWindow, FontDpiScale) - 672usize];
    ["Offset of field: ImGuiWindow::SettingsOffset"]
        [::std::mem::offset_of!(ImGuiWindow, SettingsOffset) - 676usize];
    ["Offset of field: ImGuiWindow::DrawList"]
        [::std::mem::offset_of!(ImGuiWindow, DrawList) - 680usize];
    ["Offset of field: ImGuiWindow::DrawListInst"]
        [::std::mem::offset_of!(ImGuiWindow, DrawListInst) - 684usize];
    ["Offset of field: ImGuiWindow::ParentWindow"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWindow) - 828usize];
    ["Offset of field: ImGuiWindow::ParentWindowInBeginStack"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWindowInBeginStack) - 832usize];
    ["Offset of field: ImGuiWindow::RootWindow"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindow) - 836usize];
    ["Offset of field: ImGuiWindow::RootWindowPopupTree"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowPopupTree) - 840usize];
    ["Offset of field: ImGuiWindow::RootWindowDockTree"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowDockTree) - 844usize];
    ["Offset of field: ImGuiWindow::RootWindowForTitleBarHighlight"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowForTitleBarHighlight) - 848usize];
    ["Offset of field: ImGuiWindow::RootWindowForNav"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowForNav) - 852usize];
    ["Offset of field: ImGuiWindow::NavLastChildNavWindow"]
        [::std::mem::offset_of!(ImGuiWindow, NavLastChildNavWindow) - 856usize];
    ["Offset of field: ImGuiWindow::NavLastIds"]
        [::std::mem::offset_of!(ImGuiWindow, NavLastIds) - 860usize];
    ["Offset of field: ImGuiWindow::NavRectRel"]
        [::std::mem::offset_of!(ImGuiWindow, NavRectRel) - 868usize];
    ["Offset of field: ImGuiWindow::NavPreferredScoringPosRel"]
        [::std::mem::offset_of!(ImGuiWindow, NavPreferredScoringPosRel) - 900usize];
    ["Offset of field: ImGuiWindow::NavRootFocusScopeId"]
        [::std::mem::offset_of!(ImGuiWindow, NavRootFocusScopeId) - 916usize];
    ["Offset of field: ImGuiWindow::MemoryDrawListIdxCapacity"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryDrawListIdxCapacity) - 920usize];
    ["Offset of field: ImGuiWindow::MemoryDrawListVtxCapacity"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryDrawListVtxCapacity) - 924usize];
    ["Offset of field: ImGuiWindow::MemoryCompacted"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryCompacted) - 928usize];
    ["Offset of field: ImGuiWindow::DockOrder"]
        [::std::mem::offset_of!(ImGuiWindow, DockOrder) - 930usize];
    ["Offset of field: ImGuiWindow::DockStyle"]
        [::std::mem::offset_of!(ImGuiWindow, DockStyle) - 932usize];
    ["Offset of field: ImGuiWindow::DockNode"]
        [::std::mem::offset_of!(ImGuiWindow, DockNode) - 956usize];
    ["Offset of field: ImGuiWindow::DockNodeAsHost"]
        [::std::mem::offset_of!(ImGuiWindow, DockNodeAsHost) - 960usize];
    ["Offset of field: ImGuiWindow::DockId"]
        [::std::mem::offset_of!(ImGuiWindow, DockId) - 964usize];
    ["Offset of field: ImGuiWindow::DockTabItemStatusFlags"]
        [::std::mem::offset_of!(ImGuiWindow, DockTabItemStatusFlags) - 968usize];
    ["Offset of field: ImGuiWindow::DockTabItemRect"]
        [::std::mem::offset_of!(ImGuiWindow, DockTabItemRect) - 972usize];
};
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowPosAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowPosAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowSizeAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowSizeAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowCollapsedAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowCollapsedAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowDockAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowDockAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockIsActive_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockIsActive_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockNodeIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockNodeIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabWantClose_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabWantClose_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ =
    4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_SectionMask_: ImGuiTabItemFlagsPrivate_ = 192;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ =
    1048576;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 4194304;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTabItem"][::std::mem::size_of::<ImGuiTabItem>() - 48usize];
    ["Alignment of ImGuiTabItem"][::std::mem::align_of::<ImGuiTabItem>() - 4usize];
    ["Offset of field: ImGuiTabItem::ID"][::std::mem::offset_of!(ImGuiTabItem, ID) - 0usize];
    ["Offset of field: ImGuiTabItem::Flags"][::std::mem::offset_of!(ImGuiTabItem, Flags) - 4usize];
    ["Offset of field: ImGuiTabItem::Window"]
        [::std::mem::offset_of!(ImGuiTabItem, Window) - 8usize];
    ["Offset of field: ImGuiTabItem::LastFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabItem, LastFrameVisible) - 12usize];
    ["Offset of field: ImGuiTabItem::LastFrameSelected"]
        [::std::mem::offset_of!(ImGuiTabItem, LastFrameSelected) - 16usize];
    ["Offset of field: ImGuiTabItem::Offset"]
        [::std::mem::offset_of!(ImGuiTabItem, Offset) - 20usize];
    ["Offset of field: ImGuiTabItem::Width"][::std::mem::offset_of!(ImGuiTabItem, Width) - 24usize];
    ["Offset of field: ImGuiTabItem::ContentWidth"]
        [::std::mem::offset_of!(ImGuiTabItem, ContentWidth) - 28usize];
    ["Offset of field: ImGuiTabItem::RequestedWidth"]
        [::std::mem::offset_of!(ImGuiTabItem, RequestedWidth) - 32usize];
    ["Offset of field: ImGuiTabItem::NameOffset"]
        [::std::mem::offset_of!(ImGuiTabItem, NameOffset) - 36usize];
    ["Offset of field: ImGuiTabItem::BeginOrder"]
        [::std::mem::offset_of!(ImGuiTabItem, BeginOrder) - 40usize];
    ["Offset of field: ImGuiTabItem::IndexDuringLayout"]
        [::std::mem::offset_of!(ImGuiTabItem, IndexDuringLayout) - 42usize];
    ["Offset of field: ImGuiTabItem::WantClose"]
        [::std::mem::offset_of!(ImGuiTabItem, WantClose) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTabItem"][::std::mem::size_of::<ImVector_ImGuiTabItem>() - 12usize];
    ["Alignment of ImVector_ImGuiTabItem"]
        [::std::mem::align_of::<ImVector_ImGuiTabItem>() - 4usize];
    ["Offset of field: ImVector_ImGuiTabItem::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTabItem, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTabItem::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTabItem, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTabItem::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTabItem, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector_ImGuiTabItem,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub SeparatorMinX: f32,
    pub SeparatorMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTabBar"][::std::mem::size_of::<ImGuiTabBar>() - 152usize];
    ["Alignment of ImGuiTabBar"][::std::mem::align_of::<ImGuiTabBar>() - 4usize];
    ["Offset of field: ImGuiTabBar::Tabs"][::std::mem::offset_of!(ImGuiTabBar, Tabs) - 0usize];
    ["Offset of field: ImGuiTabBar::Flags"][::std::mem::offset_of!(ImGuiTabBar, Flags) - 12usize];
    ["Offset of field: ImGuiTabBar::ID"][::std::mem::offset_of!(ImGuiTabBar, ID) - 16usize];
    ["Offset of field: ImGuiTabBar::SelectedTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, SelectedTabId) - 20usize];
    ["Offset of field: ImGuiTabBar::NextSelectedTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, NextSelectedTabId) - 24usize];
    ["Offset of field: ImGuiTabBar::VisibleTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, VisibleTabId) - 28usize];
    ["Offset of field: ImGuiTabBar::CurrFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabBar, CurrFrameVisible) - 32usize];
    ["Offset of field: ImGuiTabBar::PrevFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabBar, PrevFrameVisible) - 36usize];
    ["Offset of field: ImGuiTabBar::BarRect"]
        [::std::mem::offset_of!(ImGuiTabBar, BarRect) - 40usize];
    ["Offset of field: ImGuiTabBar::CurrTabsContentsHeight"]
        [::std::mem::offset_of!(ImGuiTabBar, CurrTabsContentsHeight) - 56usize];
    ["Offset of field: ImGuiTabBar::PrevTabsContentsHeight"]
        [::std::mem::offset_of!(ImGuiTabBar, PrevTabsContentsHeight) - 60usize];
    ["Offset of field: ImGuiTabBar::WidthAllTabs"]
        [::std::mem::offset_of!(ImGuiTabBar, WidthAllTabs) - 64usize];
    ["Offset of field: ImGuiTabBar::WidthAllTabsIdeal"]
        [::std::mem::offset_of!(ImGuiTabBar, WidthAllTabsIdeal) - 68usize];
    ["Offset of field: ImGuiTabBar::ScrollingAnim"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingAnim) - 72usize];
    ["Offset of field: ImGuiTabBar::ScrollingTarget"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingTarget) - 76usize];
    ["Offset of field: ImGuiTabBar::ScrollingTargetDistToVisibility"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingTargetDistToVisibility) - 80usize];
    ["Offset of field: ImGuiTabBar::ScrollingSpeed"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingSpeed) - 84usize];
    ["Offset of field: ImGuiTabBar::ScrollingRectMinX"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingRectMinX) - 88usize];
    ["Offset of field: ImGuiTabBar::ScrollingRectMaxX"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingRectMaxX) - 92usize];
    ["Offset of field: ImGuiTabBar::SeparatorMinX"]
        [::std::mem::offset_of!(ImGuiTabBar, SeparatorMinX) - 96usize];
    ["Offset of field: ImGuiTabBar::SeparatorMaxX"]
        [::std::mem::offset_of!(ImGuiTabBar, SeparatorMaxX) - 100usize];
    ["Offset of field: ImGuiTabBar::ReorderRequestTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, ReorderRequestTabId) - 104usize];
    ["Offset of field: ImGuiTabBar::ReorderRequestOffset"]
        [::std::mem::offset_of!(ImGuiTabBar, ReorderRequestOffset) - 108usize];
    ["Offset of field: ImGuiTabBar::BeginCount"]
        [::std::mem::offset_of!(ImGuiTabBar, BeginCount) - 110usize];
    ["Offset of field: ImGuiTabBar::WantLayout"]
        [::std::mem::offset_of!(ImGuiTabBar, WantLayout) - 111usize];
    ["Offset of field: ImGuiTabBar::VisibleTabWasSubmitted"]
        [::std::mem::offset_of!(ImGuiTabBar, VisibleTabWasSubmitted) - 112usize];
    ["Offset of field: ImGuiTabBar::TabsAddedNew"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsAddedNew) - 113usize];
    ["Offset of field: ImGuiTabBar::TabsActiveCount"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsActiveCount) - 114usize];
    ["Offset of field: ImGuiTabBar::LastTabItemIdx"]
        [::std::mem::offset_of!(ImGuiTabBar, LastTabItemIdx) - 116usize];
    ["Offset of field: ImGuiTabBar::ItemSpacingY"]
        [::std::mem::offset_of!(ImGuiTabBar, ItemSpacingY) - 120usize];
    ["Offset of field: ImGuiTabBar::FramePadding"]
        [::std::mem::offset_of!(ImGuiTabBar, FramePadding) - 124usize];
    ["Offset of field: ImGuiTabBar::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiTabBar, BackupCursorPos) - 132usize];
    ["Offset of field: ImGuiTabBar::TabsNames"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsNames) - 140usize];
};
pub type ImGuiTableColumnIdx = ImS16;
pub type ImGuiTableDrawChannelIdx = ImU16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumn"][::std::mem::size_of::<ImGuiTableColumn>() - 112usize];
    ["Alignment of ImGuiTableColumn"][::std::mem::align_of::<ImGuiTableColumn>() - 4usize];
    ["Offset of field: ImGuiTableColumn::Flags"]
        [::std::mem::offset_of!(ImGuiTableColumn, Flags) - 0usize];
    ["Offset of field: ImGuiTableColumn::WidthGiven"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthGiven) - 4usize];
    ["Offset of field: ImGuiTableColumn::MinX"]
        [::std::mem::offset_of!(ImGuiTableColumn, MinX) - 8usize];
    ["Offset of field: ImGuiTableColumn::MaxX"]
        [::std::mem::offset_of!(ImGuiTableColumn, MaxX) - 12usize];
    ["Offset of field: ImGuiTableColumn::WidthRequest"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthRequest) - 16usize];
    ["Offset of field: ImGuiTableColumn::WidthAuto"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthAuto) - 20usize];
    ["Offset of field: ImGuiTableColumn::StretchWeight"]
        [::std::mem::offset_of!(ImGuiTableColumn, StretchWeight) - 24usize];
    ["Offset of field: ImGuiTableColumn::InitStretchWeightOrWidth"]
        [::std::mem::offset_of!(ImGuiTableColumn, InitStretchWeightOrWidth) - 28usize];
    ["Offset of field: ImGuiTableColumn::ClipRect"]
        [::std::mem::offset_of!(ImGuiTableColumn, ClipRect) - 32usize];
    ["Offset of field: ImGuiTableColumn::UserID"]
        [::std::mem::offset_of!(ImGuiTableColumn, UserID) - 48usize];
    ["Offset of field: ImGuiTableColumn::WorkMinX"]
        [::std::mem::offset_of!(ImGuiTableColumn, WorkMinX) - 52usize];
    ["Offset of field: ImGuiTableColumn::WorkMaxX"]
        [::std::mem::offset_of!(ImGuiTableColumn, WorkMaxX) - 56usize];
    ["Offset of field: ImGuiTableColumn::ItemWidth"]
        [::std::mem::offset_of!(ImGuiTableColumn, ItemWidth) - 60usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXFrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXFrozen) - 64usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXUnfrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXUnfrozen) - 68usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXHeadersUsed"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXHeadersUsed) - 72usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXHeadersIdeal"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXHeadersIdeal) - 76usize];
    ["Offset of field: ImGuiTableColumn::NameOffset"]
        [::std::mem::offset_of!(ImGuiTableColumn, NameOffset) - 80usize];
    ["Offset of field: ImGuiTableColumn::DisplayOrder"]
        [::std::mem::offset_of!(ImGuiTableColumn, DisplayOrder) - 82usize];
    ["Offset of field: ImGuiTableColumn::IndexWithinEnabledSet"]
        [::std::mem::offset_of!(ImGuiTableColumn, IndexWithinEnabledSet) - 84usize];
    ["Offset of field: ImGuiTableColumn::PrevEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTableColumn, PrevEnabledColumn) - 86usize];
    ["Offset of field: ImGuiTableColumn::NextEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTableColumn, NextEnabledColumn) - 88usize];
    ["Offset of field: ImGuiTableColumn::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumn, SortOrder) - 90usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelCurrent"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelCurrent) - 92usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelFrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelFrozen) - 94usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelUnfrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelUnfrozen) - 96usize];
    ["Offset of field: ImGuiTableColumn::IsEnabled"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsEnabled) - 98usize];
    ["Offset of field: ImGuiTableColumn::IsUserEnabled"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsUserEnabled) - 99usize];
    ["Offset of field: ImGuiTableColumn::IsUserEnabledNextFrame"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsUserEnabledNextFrame) - 100usize];
    ["Offset of field: ImGuiTableColumn::IsVisibleX"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsVisibleX) - 101usize];
    ["Offset of field: ImGuiTableColumn::IsVisibleY"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsVisibleY) - 102usize];
    ["Offset of field: ImGuiTableColumn::IsRequestOutput"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsRequestOutput) - 103usize];
    ["Offset of field: ImGuiTableColumn::IsSkipItems"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsSkipItems) - 104usize];
    ["Offset of field: ImGuiTableColumn::IsPreserveWidthAuto"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsPreserveWidthAuto) - 105usize];
    ["Offset of field: ImGuiTableColumn::NavLayerCurrent"]
        [::std::mem::offset_of!(ImGuiTableColumn, NavLayerCurrent) - 106usize];
    ["Offset of field: ImGuiTableColumn::AutoFitQueue"]
        [::std::mem::offset_of!(ImGuiTableColumn, AutoFitQueue) - 107usize];
    ["Offset of field: ImGuiTableColumn::CannotSkipItemsQueue"]
        [::std::mem::offset_of!(ImGuiTableColumn, CannotSkipItemsQueue) - 108usize];
    ["Offset of field: ImGuiTableColumn::SortDirectionsAvailList"]
        [::std::mem::offset_of!(ImGuiTableColumn, SortDirectionsAvailList) - 110usize];
};
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailCount_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailCount_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailMask_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailMask_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableCellData"][::std::mem::size_of::<ImGuiTableCellData>() - 8usize];
    ["Alignment of ImGuiTableCellData"][::std::mem::align_of::<ImGuiTableCellData>() - 4usize];
    ["Offset of field: ImGuiTableCellData::BgColor"]
        [::std::mem::offset_of!(ImGuiTableCellData, BgColor) - 0usize];
    ["Offset of field: ImGuiTableCellData::Column"]
        [::std::mem::offset_of!(ImGuiTableCellData, Column) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableInstanceData {
    pub TableInstanceID: ImGuiID,
    pub LastOuterHeight: f32,
    pub LastTopHeadersRowHeight: f32,
    pub LastFrozenHeight: f32,
    pub HoveredRowLast: ::std::os::raw::c_int,
    pub HoveredRowNext: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableInstanceData"][::std::mem::size_of::<ImGuiTableInstanceData>() - 24usize];
    ["Alignment of ImGuiTableInstanceData"]
        [::std::mem::align_of::<ImGuiTableInstanceData>() - 4usize];
    ["Offset of field: ImGuiTableInstanceData::TableInstanceID"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, TableInstanceID) - 0usize];
    ["Offset of field: ImGuiTableInstanceData::LastOuterHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastOuterHeight) - 4usize];
    ["Offset of field: ImGuiTableInstanceData::LastTopHeadersRowHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastTopHeadersRowHeight) - 8usize];
    ["Offset of field: ImGuiTableInstanceData::LastFrozenHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastFrozenHeight) - 12usize];
    ["Offset of field: ImGuiTableInstanceData::HoveredRowLast"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, HoveredRowLast) - 16usize];
    ["Offset of field: ImGuiTableInstanceData::HoveredRowNext"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, HoveredRowNext) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumn {
    pub Data: *mut ImGuiTableColumn,
    pub DataEnd: *mut ImGuiTableColumn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImSpan_ImGuiTableColumn"][::std::mem::size_of::<ImSpan_ImGuiTableColumn>() - 8usize];
    ["Alignment of ImSpan_ImGuiTableColumn"]
        [::std::mem::align_of::<ImSpan_ImGuiTableColumn>() - 4usize];
    ["Offset of field: ImSpan_ImGuiTableColumn::Data"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableColumn, Data) - 0usize];
    ["Offset of field: ImSpan_ImGuiTableColumn::DataEnd"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableColumn, DataEnd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumnIdx {
    pub Data: *mut ImGuiTableColumnIdx,
    pub DataEnd: *mut ImGuiTableColumnIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImSpan_ImGuiTableColumnIdx"]
        [::std::mem::size_of::<ImSpan_ImGuiTableColumnIdx>() - 8usize];
    ["Alignment of ImSpan_ImGuiTableColumnIdx"]
        [::std::mem::align_of::<ImSpan_ImGuiTableColumnIdx>() - 4usize];
    ["Offset of field: ImSpan_ImGuiTableColumnIdx::Data"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableColumnIdx, Data) - 0usize];
    ["Offset of field: ImSpan_ImGuiTableColumnIdx::DataEnd"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableColumnIdx, DataEnd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableCellData {
    pub Data: *mut ImGuiTableCellData,
    pub DataEnd: *mut ImGuiTableCellData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImSpan_ImGuiTableCellData"]
        [::std::mem::size_of::<ImSpan_ImGuiTableCellData>() - 8usize];
    ["Alignment of ImSpan_ImGuiTableCellData"]
        [::std::mem::align_of::<ImSpan_ImGuiTableCellData>() - 4usize];
    ["Offset of field: ImSpan_ImGuiTableCellData::Data"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableCellData, Data) - 0usize];
    ["Offset of field: ImSpan_ImGuiTableCellData::DataEnd"]
        [::std::mem::offset_of!(ImSpan_ImGuiTableCellData, DataEnd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableInstanceData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableInstanceData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTableInstanceData"]
        [::std::mem::size_of::<ImVector_ImGuiTableInstanceData>() - 12usize];
    ["Alignment of ImVector_ImGuiTableInstanceData"]
        [::std::mem::align_of::<ImVector_ImGuiTableInstanceData>() - 4usize];
    ["Offset of field: ImVector_ImGuiTableInstanceData::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTableInstanceData, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTableInstanceData::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTableInstanceData, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTableInstanceData::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTableInstanceData, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVector_ImGuiTableColumnSortSpecs"]
        [::std::mem::size_of::<ImVector_ImGuiTableColumnSortSpecs>() - 12usize];
    ["Alignment of ImVector_ImGuiTableColumnSortSpecs"]
        [::std::mem::align_of::<ImVector_ImGuiTableColumnSortSpecs>() - 4usize];
    ["Offset of field: ImVector_ImGuiTableColumnSortSpecs::Size"]
        [::std::mem::offset_of!(ImVector_ImGuiTableColumnSortSpecs, Size) - 0usize];
    ["Offset of field: ImVector_ImGuiTableColumnSortSpecs::Capacity"]
        [::std::mem::offset_of!(ImVector_ImGuiTableColumnSortSpecs, Capacity) - 4usize];
    ["Offset of field: ImVector_ImGuiTableColumnSortSpecs::Data"]
        [::std::mem::offset_of!(ImVector_ImGuiTableColumnSortSpecs, Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan_ImGuiTableColumn,
    pub DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
    pub RowCellData: ImSpan_ImGuiTableCellData,
    pub EnabledMaskByDisplayOrder: ImBitArrayPtr,
    pub EnabledMaskByIndex: ImBitArrayPtr,
    pub VisibleMaskByIndex: ImBitArrayPtr,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowCellPaddingY: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub AngledHeadersHeight: f32,
    pub AngledHeadersSlope: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector_ImGuiTableInstanceData,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub AngledHeadersCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub HighlightColumnHeader: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub DisableDefaultContextMenu: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub IsActiveIdAliveBeforeTable: bool,
    pub IsActiveIdInTable: bool,
    pub HasScrollbarYCurr: bool,
    pub HasScrollbarYPrev: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTable"][::std::mem::size_of::<ImGuiTable>() - 512usize];
    ["Alignment of ImGuiTable"][::std::mem::align_of::<ImGuiTable>() - 4usize];
    ["Offset of field: ImGuiTable::ID"][::std::mem::offset_of!(ImGuiTable, ID) - 0usize];
    ["Offset of field: ImGuiTable::Flags"][::std::mem::offset_of!(ImGuiTable, Flags) - 4usize];
    ["Offset of field: ImGuiTable::RawData"][::std::mem::offset_of!(ImGuiTable, RawData) - 8usize];
    ["Offset of field: ImGuiTable::TempData"]
        [::std::mem::offset_of!(ImGuiTable, TempData) - 12usize];
    ["Offset of field: ImGuiTable::Columns"][::std::mem::offset_of!(ImGuiTable, Columns) - 16usize];
    ["Offset of field: ImGuiTable::DisplayOrderToIndex"]
        [::std::mem::offset_of!(ImGuiTable, DisplayOrderToIndex) - 24usize];
    ["Offset of field: ImGuiTable::RowCellData"]
        [::std::mem::offset_of!(ImGuiTable, RowCellData) - 32usize];
    ["Offset of field: ImGuiTable::EnabledMaskByDisplayOrder"]
        [::std::mem::offset_of!(ImGuiTable, EnabledMaskByDisplayOrder) - 40usize];
    ["Offset of field: ImGuiTable::EnabledMaskByIndex"]
        [::std::mem::offset_of!(ImGuiTable, EnabledMaskByIndex) - 44usize];
    ["Offset of field: ImGuiTable::VisibleMaskByIndex"]
        [::std::mem::offset_of!(ImGuiTable, VisibleMaskByIndex) - 48usize];
    ["Offset of field: ImGuiTable::SettingsLoadedFlags"]
        [::std::mem::offset_of!(ImGuiTable, SettingsLoadedFlags) - 52usize];
    ["Offset of field: ImGuiTable::SettingsOffset"]
        [::std::mem::offset_of!(ImGuiTable, SettingsOffset) - 56usize];
    ["Offset of field: ImGuiTable::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiTable, LastFrameActive) - 60usize];
    ["Offset of field: ImGuiTable::ColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsCount) - 64usize];
    ["Offset of field: ImGuiTable::CurrentRow"]
        [::std::mem::offset_of!(ImGuiTable, CurrentRow) - 68usize];
    ["Offset of field: ImGuiTable::CurrentColumn"]
        [::std::mem::offset_of!(ImGuiTable, CurrentColumn) - 72usize];
    ["Offset of field: ImGuiTable::InstanceCurrent"]
        [::std::mem::offset_of!(ImGuiTable, InstanceCurrent) - 76usize];
    ["Offset of field: ImGuiTable::InstanceInteracted"]
        [::std::mem::offset_of!(ImGuiTable, InstanceInteracted) - 78usize];
    ["Offset of field: ImGuiTable::RowPosY1"]
        [::std::mem::offset_of!(ImGuiTable, RowPosY1) - 80usize];
    ["Offset of field: ImGuiTable::RowPosY2"]
        [::std::mem::offset_of!(ImGuiTable, RowPosY2) - 84usize];
    ["Offset of field: ImGuiTable::RowMinHeight"]
        [::std::mem::offset_of!(ImGuiTable, RowMinHeight) - 88usize];
    ["Offset of field: ImGuiTable::RowCellPaddingY"]
        [::std::mem::offset_of!(ImGuiTable, RowCellPaddingY) - 92usize];
    ["Offset of field: ImGuiTable::RowTextBaseline"]
        [::std::mem::offset_of!(ImGuiTable, RowTextBaseline) - 96usize];
    ["Offset of field: ImGuiTable::RowIndentOffsetX"]
        [::std::mem::offset_of!(ImGuiTable, RowIndentOffsetX) - 100usize];
    ["Offset of field: ImGuiTable::RowBgColorCounter"]
        [::std::mem::offset_of!(ImGuiTable, RowBgColorCounter) - 108usize];
    ["Offset of field: ImGuiTable::RowBgColor"]
        [::std::mem::offset_of!(ImGuiTable, RowBgColor) - 112usize];
    ["Offset of field: ImGuiTable::BorderColorStrong"]
        [::std::mem::offset_of!(ImGuiTable, BorderColorStrong) - 120usize];
    ["Offset of field: ImGuiTable::BorderColorLight"]
        [::std::mem::offset_of!(ImGuiTable, BorderColorLight) - 124usize];
    ["Offset of field: ImGuiTable::BorderX1"]
        [::std::mem::offset_of!(ImGuiTable, BorderX1) - 128usize];
    ["Offset of field: ImGuiTable::BorderX2"]
        [::std::mem::offset_of!(ImGuiTable, BorderX2) - 132usize];
    ["Offset of field: ImGuiTable::HostIndentX"]
        [::std::mem::offset_of!(ImGuiTable, HostIndentX) - 136usize];
    ["Offset of field: ImGuiTable::MinColumnWidth"]
        [::std::mem::offset_of!(ImGuiTable, MinColumnWidth) - 140usize];
    ["Offset of field: ImGuiTable::OuterPaddingX"]
        [::std::mem::offset_of!(ImGuiTable, OuterPaddingX) - 144usize];
    ["Offset of field: ImGuiTable::CellPaddingX"]
        [::std::mem::offset_of!(ImGuiTable, CellPaddingX) - 148usize];
    ["Offset of field: ImGuiTable::CellSpacingX1"]
        [::std::mem::offset_of!(ImGuiTable, CellSpacingX1) - 152usize];
    ["Offset of field: ImGuiTable::CellSpacingX2"]
        [::std::mem::offset_of!(ImGuiTable, CellSpacingX2) - 156usize];
    ["Offset of field: ImGuiTable::InnerWidth"]
        [::std::mem::offset_of!(ImGuiTable, InnerWidth) - 160usize];
    ["Offset of field: ImGuiTable::ColumnsGivenWidth"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsGivenWidth) - 164usize];
    ["Offset of field: ImGuiTable::ColumnsAutoFitWidth"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsAutoFitWidth) - 168usize];
    ["Offset of field: ImGuiTable::ColumnsStretchSumWeights"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsStretchSumWeights) - 172usize];
    ["Offset of field: ImGuiTable::ResizedColumnNextWidth"]
        [::std::mem::offset_of!(ImGuiTable, ResizedColumnNextWidth) - 176usize];
    ["Offset of field: ImGuiTable::ResizeLockMinContentsX2"]
        [::std::mem::offset_of!(ImGuiTable, ResizeLockMinContentsX2) - 180usize];
    ["Offset of field: ImGuiTable::RefScale"]
        [::std::mem::offset_of!(ImGuiTable, RefScale) - 184usize];
    ["Offset of field: ImGuiTable::AngledHeadersHeight"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersHeight) - 188usize];
    ["Offset of field: ImGuiTable::AngledHeadersSlope"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersSlope) - 192usize];
    ["Offset of field: ImGuiTable::OuterRect"]
        [::std::mem::offset_of!(ImGuiTable, OuterRect) - 196usize];
    ["Offset of field: ImGuiTable::InnerRect"]
        [::std::mem::offset_of!(ImGuiTable, InnerRect) - 212usize];
    ["Offset of field: ImGuiTable::WorkRect"]
        [::std::mem::offset_of!(ImGuiTable, WorkRect) - 228usize];
    ["Offset of field: ImGuiTable::InnerClipRect"]
        [::std::mem::offset_of!(ImGuiTable, InnerClipRect) - 244usize];
    ["Offset of field: ImGuiTable::BgClipRect"]
        [::std::mem::offset_of!(ImGuiTable, BgClipRect) - 260usize];
    ["Offset of field: ImGuiTable::Bg0ClipRectForDrawCmd"]
        [::std::mem::offset_of!(ImGuiTable, Bg0ClipRectForDrawCmd) - 276usize];
    ["Offset of field: ImGuiTable::Bg2ClipRectForDrawCmd"]
        [::std::mem::offset_of!(ImGuiTable, Bg2ClipRectForDrawCmd) - 292usize];
    ["Offset of field: ImGuiTable::HostClipRect"]
        [::std::mem::offset_of!(ImGuiTable, HostClipRect) - 308usize];
    ["Offset of field: ImGuiTable::HostBackupInnerClipRect"]
        [::std::mem::offset_of!(ImGuiTable, HostBackupInnerClipRect) - 324usize];
    ["Offset of field: ImGuiTable::OuterWindow"]
        [::std::mem::offset_of!(ImGuiTable, OuterWindow) - 340usize];
    ["Offset of field: ImGuiTable::InnerWindow"]
        [::std::mem::offset_of!(ImGuiTable, InnerWindow) - 344usize];
    ["Offset of field: ImGuiTable::ColumnsNames"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsNames) - 348usize];
    ["Offset of field: ImGuiTable::DrawSplitter"]
        [::std::mem::offset_of!(ImGuiTable, DrawSplitter) - 360usize];
    ["Offset of field: ImGuiTable::InstanceDataFirst"]
        [::std::mem::offset_of!(ImGuiTable, InstanceDataFirst) - 364usize];
    ["Offset of field: ImGuiTable::InstanceDataExtra"]
        [::std::mem::offset_of!(ImGuiTable, InstanceDataExtra) - 388usize];
    ["Offset of field: ImGuiTable::SortSpecsSingle"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsSingle) - 400usize];
    ["Offset of field: ImGuiTable::SortSpecsMulti"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsMulti) - 412usize];
    ["Offset of field: ImGuiTable::SortSpecs"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecs) - 424usize];
    ["Offset of field: ImGuiTable::SortSpecsCount"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsCount) - 436usize];
    ["Offset of field: ImGuiTable::ColumnsEnabledCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsEnabledCount) - 438usize];
    ["Offset of field: ImGuiTable::ColumnsEnabledFixedCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsEnabledFixedCount) - 440usize];
    ["Offset of field: ImGuiTable::DeclColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, DeclColumnsCount) - 442usize];
    ["Offset of field: ImGuiTable::AngledHeadersCount"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersCount) - 444usize];
    ["Offset of field: ImGuiTable::HoveredColumnBody"]
        [::std::mem::offset_of!(ImGuiTable, HoveredColumnBody) - 446usize];
    ["Offset of field: ImGuiTable::HoveredColumnBorder"]
        [::std::mem::offset_of!(ImGuiTable, HoveredColumnBorder) - 448usize];
    ["Offset of field: ImGuiTable::HighlightColumnHeader"]
        [::std::mem::offset_of!(ImGuiTable, HighlightColumnHeader) - 450usize];
    ["Offset of field: ImGuiTable::AutoFitSingleColumn"]
        [::std::mem::offset_of!(ImGuiTable, AutoFitSingleColumn) - 452usize];
    ["Offset of field: ImGuiTable::ResizedColumn"]
        [::std::mem::offset_of!(ImGuiTable, ResizedColumn) - 454usize];
    ["Offset of field: ImGuiTable::LastResizedColumn"]
        [::std::mem::offset_of!(ImGuiTable, LastResizedColumn) - 456usize];
    ["Offset of field: ImGuiTable::HeldHeaderColumn"]
        [::std::mem::offset_of!(ImGuiTable, HeldHeaderColumn) - 458usize];
    ["Offset of field: ImGuiTable::ReorderColumn"]
        [::std::mem::offset_of!(ImGuiTable, ReorderColumn) - 460usize];
    ["Offset of field: ImGuiTable::ReorderColumnDir"]
        [::std::mem::offset_of!(ImGuiTable, ReorderColumnDir) - 462usize];
    ["Offset of field: ImGuiTable::LeftMostEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTable, LeftMostEnabledColumn) - 464usize];
    ["Offset of field: ImGuiTable::RightMostEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTable, RightMostEnabledColumn) - 466usize];
    ["Offset of field: ImGuiTable::LeftMostStretchedColumn"]
        [::std::mem::offset_of!(ImGuiTable, LeftMostStretchedColumn) - 468usize];
    ["Offset of field: ImGuiTable::RightMostStretchedColumn"]
        [::std::mem::offset_of!(ImGuiTable, RightMostStretchedColumn) - 470usize];
    ["Offset of field: ImGuiTable::ContextPopupColumn"]
        [::std::mem::offset_of!(ImGuiTable, ContextPopupColumn) - 472usize];
    ["Offset of field: ImGuiTable::FreezeRowsRequest"]
        [::std::mem::offset_of!(ImGuiTable, FreezeRowsRequest) - 474usize];
    ["Offset of field: ImGuiTable::FreezeRowsCount"]
        [::std::mem::offset_of!(ImGuiTable, FreezeRowsCount) - 476usize];
    ["Offset of field: ImGuiTable::FreezeColumnsRequest"]
        [::std::mem::offset_of!(ImGuiTable, FreezeColumnsRequest) - 478usize];
    ["Offset of field: ImGuiTable::FreezeColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, FreezeColumnsCount) - 480usize];
    ["Offset of field: ImGuiTable::RowCellDataCurrent"]
        [::std::mem::offset_of!(ImGuiTable, RowCellDataCurrent) - 482usize];
    ["Offset of field: ImGuiTable::DummyDrawChannel"]
        [::std::mem::offset_of!(ImGuiTable, DummyDrawChannel) - 484usize];
    ["Offset of field: ImGuiTable::Bg2DrawChannelCurrent"]
        [::std::mem::offset_of!(ImGuiTable, Bg2DrawChannelCurrent) - 486usize];
    ["Offset of field: ImGuiTable::Bg2DrawChannelUnfrozen"]
        [::std::mem::offset_of!(ImGuiTable, Bg2DrawChannelUnfrozen) - 488usize];
    ["Offset of field: ImGuiTable::IsLayoutLocked"]
        [::std::mem::offset_of!(ImGuiTable, IsLayoutLocked) - 490usize];
    ["Offset of field: ImGuiTable::IsInsideRow"]
        [::std::mem::offset_of!(ImGuiTable, IsInsideRow) - 491usize];
    ["Offset of field: ImGuiTable::IsInitializing"]
        [::std::mem::offset_of!(ImGuiTable, IsInitializing) - 492usize];
    ["Offset of field: ImGuiTable::IsSortSpecsDirty"]
        [::std::mem::offset_of!(ImGuiTable, IsSortSpecsDirty) - 493usize];
    ["Offset of field: ImGuiTable::IsUsingHeaders"]
        [::std::mem::offset_of!(ImGuiTable, IsUsingHeaders) - 494usize];
    ["Offset of field: ImGuiTable::IsContextPopupOpen"]
        [::std::mem::offset_of!(ImGuiTable, IsContextPopupOpen) - 495usize];
    ["Offset of field: ImGuiTable::DisableDefaultContextMenu"]
        [::std::mem::offset_of!(ImGuiTable, DisableDefaultContextMenu) - 496usize];
    ["Offset of field: ImGuiTable::IsSettingsRequestLoad"]
        [::std::mem::offset_of!(ImGuiTable, IsSettingsRequestLoad) - 497usize];
    ["Offset of field: ImGuiTable::IsSettingsDirty"]
        [::std::mem::offset_of!(ImGuiTable, IsSettingsDirty) - 498usize];
    ["Offset of field: ImGuiTable::IsDefaultDisplayOrder"]
        [::std::mem::offset_of!(ImGuiTable, IsDefaultDisplayOrder) - 499usize];
    ["Offset of field: ImGuiTable::IsResetAllRequest"]
        [::std::mem::offset_of!(ImGuiTable, IsResetAllRequest) - 500usize];
    ["Offset of field: ImGuiTable::IsResetDisplayOrderRequest"]
        [::std::mem::offset_of!(ImGuiTable, IsResetDisplayOrderRequest) - 501usize];
    ["Offset of field: ImGuiTable::IsUnfrozenRows"]
        [::std::mem::offset_of!(ImGuiTable, IsUnfrozenRows) - 502usize];
    ["Offset of field: ImGuiTable::IsDefaultSizingPolicy"]
        [::std::mem::offset_of!(ImGuiTable, IsDefaultSizingPolicy) - 503usize];
    ["Offset of field: ImGuiTable::IsActiveIdAliveBeforeTable"]
        [::std::mem::offset_of!(ImGuiTable, IsActiveIdAliveBeforeTable) - 504usize];
    ["Offset of field: ImGuiTable::IsActiveIdInTable"]
        [::std::mem::offset_of!(ImGuiTable, IsActiveIdInTable) - 505usize];
    ["Offset of field: ImGuiTable::HasScrollbarYCurr"]
        [::std::mem::offset_of!(ImGuiTable, HasScrollbarYCurr) - 506usize];
    ["Offset of field: ImGuiTable::HasScrollbarYPrev"]
        [::std::mem::offset_of!(ImGuiTable, HasScrollbarYPrev) - 507usize];
    ["Offset of field: ImGuiTable::MemoryCompacted"]
        [::std::mem::offset_of!(ImGuiTable, MemoryCompacted) - 508usize];
    ["Offset of field: ImGuiTable::HostSkipItems"]
        [::std::mem::offset_of!(ImGuiTable, HostSkipItems) - 509usize];
};
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LastRowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LastRowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub AngledheadersExtraWidth: f32,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableTempData"][::std::mem::size_of::<ImGuiTableTempData>() - 108usize];
    ["Alignment of ImGuiTableTempData"][::std::mem::align_of::<ImGuiTableTempData>() - 4usize];
    ["Offset of field: ImGuiTableTempData::TableIndex"]
        [::std::mem::offset_of!(ImGuiTableTempData, TableIndex) - 0usize];
    ["Offset of field: ImGuiTableTempData::LastTimeActive"]
        [::std::mem::offset_of!(ImGuiTableTempData, LastTimeActive) - 4usize];
    ["Offset of field: ImGuiTableTempData::AngledheadersExtraWidth"]
        [::std::mem::offset_of!(ImGuiTableTempData, AngledheadersExtraWidth) - 8usize];
    ["Offset of field: ImGuiTableTempData::UserOuterSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, UserOuterSize) - 12usize];
    ["Offset of field: ImGuiTableTempData::DrawSplitter"]
        [::std::mem::offset_of!(ImGuiTableTempData, DrawSplitter) - 20usize];
    ["Offset of field: ImGuiTableTempData::HostBackupWorkRect"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupWorkRect) - 40usize];
    ["Offset of field: ImGuiTableTempData::HostBackupParentWorkRect"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupParentWorkRect) - 56usize];
    ["Offset of field: ImGuiTableTempData::HostBackupPrevLineSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupPrevLineSize) - 72usize];
    ["Offset of field: ImGuiTableTempData::HostBackupCurrLineSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupCurrLineSize) - 80usize];
    ["Offset of field: ImGuiTableTempData::HostBackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupCursorMaxPos) - 88usize];
    ["Offset of field: ImGuiTableTempData::HostBackupColumnsOffset"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupColumnsOffset) - 96usize];
    ["Offset of field: ImGuiTableTempData::HostBackupItemWidth"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupItemWidth) - 100usize];
    ["Offset of field: ImGuiTableTempData::HostBackupItemWidthStackSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupItemWidthStackSize) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumnSettings"]
        [::std::mem::size_of::<ImGuiTableColumnSettings>() - 16usize];
    ["Alignment of ImGuiTableColumnSettings"]
        [::std::mem::align_of::<ImGuiTableColumnSettings>() - 4usize];
    ["Offset of field: ImGuiTableColumnSettings::WidthOrWeight"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, WidthOrWeight) - 0usize];
    ["Offset of field: ImGuiTableColumnSettings::UserID"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, UserID) - 4usize];
    ["Offset of field: ImGuiTableColumnSettings::Index"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, Index) - 8usize];
    ["Offset of field: ImGuiTableColumnSettings::DisplayOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, DisplayOrder) - 10usize];
    ["Offset of field: ImGuiTableColumnSettings::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, SortOrder) - 12usize];
};
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsEnabled_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsEnabled_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsStretch_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsStretch_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImU8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableSettings"][::std::mem::size_of::<ImGuiTableSettings>() - 20usize];
    ["Alignment of ImGuiTableSettings"][::std::mem::align_of::<ImGuiTableSettings>() - 4usize];
    ["Offset of field: ImGuiTableSettings::ID"]
        [::std::mem::offset_of!(ImGuiTableSettings, ID) - 0usize];
    ["Offset of field: ImGuiTableSettings::SaveFlags"]
        [::std::mem::offset_of!(ImGuiTableSettings, SaveFlags) - 4usize];
    ["Offset of field: ImGuiTableSettings::RefScale"]
        [::std::mem::offset_of!(ImGuiTableSettings, RefScale) - 8usize];
    ["Offset of field: ImGuiTableSettings::ColumnsCount"]
        [::std::mem::offset_of!(ImGuiTableSettings, ColumnsCount) - 12usize];
    ["Offset of field: ImGuiTableSettings::ColumnsCountMax"]
        [::std::mem::offset_of!(ImGuiTableSettings, ColumnsCountMax) - 14usize];
    ["Offset of field: ImGuiTableSettings::WantApply"]
        [::std::mem::offset_of!(ImGuiTableSettings, WantApply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    pub FontBuilder_Build:
        ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontBuilderIO"][::std::mem::size_of::<ImFontBuilderIO>() - 4usize];
    ["Alignment of ImFontBuilderIO"][::std::mem::align_of::<ImFontBuilderIO>() - 4usize];
    ["Offset of field: ImFontBuilderIO::FontBuilder_Build"]
        [::std::mem::offset_of!(ImFontBuilderIO, FontBuilder_Build) - 0usize];
};
unsafe extern "C" {
    pub fn ImVec2_ImVec2_Nil() -> *mut ImVec2;
}
unsafe extern "C" {
    pub fn ImVec2_destroy(self_: *mut ImVec2);
}
unsafe extern "C" {
    pub fn ImVec2_ImVec2_Float(_x: f32, _y: f32) -> *mut ImVec2;
}
unsafe extern "C" {
    pub fn ImVec4_ImVec4_Nil() -> *mut ImVec4;
}
unsafe extern "C" {
    pub fn ImVec4_destroy(self_: *mut ImVec4);
}
unsafe extern "C" {
    pub fn ImVec4_ImVec4_Float(_x: f32, _y: f32, _z: f32, _w: f32) -> *mut ImVec4;
}
unsafe extern "C" {
    pub fn igCreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
unsafe extern "C" {
    pub fn igDestroyContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igGetCurrentContext() -> *mut ImGuiContext;
}
unsafe extern "C" {
    pub fn igSetCurrentContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igGetIO() -> *mut ImGuiIO;
}
unsafe extern "C" {
    pub fn igGetStyle() -> *mut ImGuiStyle;
}
unsafe extern "C" {
    pub fn igNewFrame();
}
unsafe extern "C" {
    pub fn igEndFrame();
}
unsafe extern "C" {
    pub fn igRender();
}
unsafe extern "C" {
    pub fn igGetDrawData() -> *mut ImDrawData;
}
unsafe extern "C" {
    pub fn igShowDemoWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igShowMetricsWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igShowDebugLogWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igShowIDStackToolWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igShowAboutWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igShowStyleEditor(ref_: *mut ImGuiStyle);
}
unsafe extern "C" {
    pub fn igShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn igShowFontSelector(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igShowUserGuide();
}
unsafe extern "C" {
    pub fn igGetVersion() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igStyleColorsDark(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    pub fn igStyleColorsLight(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    pub fn igStyleColorsClassic(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    pub fn igBegin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEnd();
}
unsafe extern "C" {
    pub fn igBeginChild_Str(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginChild_ID(
        id: ImGuiID,
        size: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndChild();
}
unsafe extern "C" {
    pub fn igIsWindowAppearing() -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowCollapsed() -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    pub fn igGetWindowDrawList() -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igGetWindowDpiScale() -> f32;
}
unsafe extern "C" {
    pub fn igGetWindowPos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetWindowSize(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetWindowWidth() -> f32;
}
unsafe extern "C" {
    pub fn igGetWindowHeight() -> f32;
}
unsafe extern "C" {
    pub fn igGetWindowViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    pub fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
unsafe extern "C" {
    pub fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igSetNextWindowContentSize(size: ImVec2);
}
unsafe extern "C" {
    pub fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetNextWindowFocus();
}
unsafe extern "C" {
    pub fn igSetNextWindowScroll(scroll: ImVec2);
}
unsafe extern "C" {
    pub fn igSetNextWindowBgAlpha(alpha: f32);
}
unsafe extern "C" {
    pub fn igSetNextWindowViewport(viewport_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igSetWindowPos_Vec2(pos: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowSize_Vec2(size: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowCollapsed_Bool(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowFocus_Nil();
}
unsafe extern "C" {
    pub fn igSetWindowFontScale(scale: f32);
}
unsafe extern "C" {
    pub fn igSetWindowPos_Str(name: *const ::std::os::raw::c_char, pos: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowSize_Str(name: *const ::std::os::raw::c_char, size: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowCollapsed_Str(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    pub fn igSetWindowFocus_Str(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igGetContentRegionAvail(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetContentRegionMax(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetWindowContentRegionMin(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetWindowContentRegionMax(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetScrollX() -> f32;
}
unsafe extern "C" {
    pub fn igGetScrollY() -> f32;
}
unsafe extern "C" {
    pub fn igSetScrollX_Float(scroll_x: f32);
}
unsafe extern "C" {
    pub fn igSetScrollY_Float(scroll_y: f32);
}
unsafe extern "C" {
    pub fn igGetScrollMaxX() -> f32;
}
unsafe extern "C" {
    pub fn igGetScrollMaxY() -> f32;
}
unsafe extern "C" {
    pub fn igSetScrollHereX(center_x_ratio: f32);
}
unsafe extern "C" {
    pub fn igSetScrollHereY(center_y_ratio: f32);
}
unsafe extern "C" {
    pub fn igSetScrollFromPosX_Float(local_x: f32, center_x_ratio: f32);
}
unsafe extern "C" {
    pub fn igSetScrollFromPosY_Float(local_y: f32, center_y_ratio: f32);
}
unsafe extern "C" {
    pub fn igPushFont(font: *mut ImFont);
}
unsafe extern "C" {
    pub fn igPopFont();
}
unsafe extern "C" {
    pub fn igPushStyleColor_U32(idx: ImGuiCol, col: ImU32);
}
unsafe extern "C" {
    pub fn igPushStyleColor_Vec4(idx: ImGuiCol, col: ImVec4);
}
unsafe extern "C" {
    pub fn igPopStyleColor(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igPushStyleVar_Float(idx: ImGuiStyleVar, val: f32);
}
unsafe extern "C" {
    pub fn igPushStyleVar_Vec2(idx: ImGuiStyleVar, val: ImVec2);
}
unsafe extern "C" {
    pub fn igPopStyleVar(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igPushTabStop(tab_stop: bool);
}
unsafe extern "C" {
    pub fn igPopTabStop();
}
unsafe extern "C" {
    pub fn igPushButtonRepeat(repeat: bool);
}
unsafe extern "C" {
    pub fn igPopButtonRepeat();
}
unsafe extern "C" {
    pub fn igPushItemWidth(item_width: f32);
}
unsafe extern "C" {
    pub fn igPopItemWidth();
}
unsafe extern "C" {
    pub fn igSetNextItemWidth(item_width: f32);
}
unsafe extern "C" {
    pub fn igCalcItemWidth() -> f32;
}
unsafe extern "C" {
    pub fn igPushTextWrapPos(wrap_local_pos_x: f32);
}
unsafe extern "C" {
    pub fn igPopTextWrapPos();
}
unsafe extern "C" {
    pub fn igGetFont() -> *mut ImFont;
}
unsafe extern "C" {
    pub fn igGetFontSize() -> f32;
}
unsafe extern "C" {
    pub fn igGetFontTexUvWhitePixel(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetColorU32_Col(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
unsafe extern "C" {
    pub fn igGetColorU32_Vec4(col: ImVec4) -> ImU32;
}
unsafe extern "C" {
    pub fn igGetColorU32_U32(col: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn igGetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
unsafe extern "C" {
    pub fn igGetCursorScreenPos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igSetCursorScreenPos(pos: ImVec2);
}
unsafe extern "C" {
    pub fn igGetCursorPos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetCursorPosX() -> f32;
}
unsafe extern "C" {
    pub fn igGetCursorPosY() -> f32;
}
unsafe extern "C" {
    pub fn igSetCursorPos(local_pos: ImVec2);
}
unsafe extern "C" {
    pub fn igSetCursorPosX(local_x: f32);
}
unsafe extern "C" {
    pub fn igSetCursorPosY(local_y: f32);
}
unsafe extern "C" {
    pub fn igGetCursorStartPos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igSeparator();
}
unsafe extern "C" {
    pub fn igSameLine(offset_from_start_x: f32, spacing: f32);
}
unsafe extern "C" {
    pub fn igNewLine();
}
unsafe extern "C" {
    pub fn igSpacing();
}
unsafe extern "C" {
    pub fn igDummy(size: ImVec2);
}
unsafe extern "C" {
    pub fn igIndent(indent_w: f32);
}
unsafe extern "C" {
    pub fn igUnindent(indent_w: f32);
}
unsafe extern "C" {
    pub fn igBeginGroup();
}
unsafe extern "C" {
    pub fn igEndGroup();
}
unsafe extern "C" {
    pub fn igAlignTextToFramePadding();
}
unsafe extern "C" {
    pub fn igGetTextLineHeight() -> f32;
}
unsafe extern "C" {
    pub fn igGetTextLineHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    pub fn igGetFrameHeight() -> f32;
}
unsafe extern "C" {
    pub fn igGetFrameHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    pub fn igPushID_Str(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igPushID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igPushID_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn igPushID_Int(int_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igPopID();
}
unsafe extern "C" {
    pub fn igGetID_Str(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetID_Ptr(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igTextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igTextColored(col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igTextColoredV(col: ImVec4, fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igTextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igTextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igTextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igTextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igLabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn igLabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn igBulletText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igBulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igSeparatorText(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igButton(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igSmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn igInvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
unsafe extern "C" {
    pub fn igCheckbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
unsafe extern "C" {
    pub fn igCheckboxFlags_IntPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCheckboxFlags_UintPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igRadioButton_Bool(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
unsafe extern "C" {
    pub fn igRadioButton_IntPtr(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igBullet();
}
unsafe extern "C" {
    pub fn igImage(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
unsafe extern "C" {
    pub fn igImageButton(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        image_size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndCombo();
}
unsafe extern "C" {
    pub fn igCombo_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCombo_Str(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCombo_FnStrPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igVSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igVSliderInt(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igVSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSetColorEditOptions(flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    pub fn igTreeNode_Str(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNode_StrStr(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNode_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeV_Str(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeEx_Str(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeEx_StrStr(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeEx_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeExV_Str(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeExV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreePush_Str(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igTreePush_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn igTreePop();
}
unsafe extern "C" {
    pub fn igGetTreeNodeToLabelSpacing() -> f32;
}
unsafe extern "C" {
    pub fn igCollapsingHeader_TreeNodeFlags(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCollapsingHeader_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSelectable_Bool(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSelectable_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginListBox(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igEndListBox();
}
unsafe extern "C" {
    pub fn igListBox_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igListBox_FnStrPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igPlotLines_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igPlotLines_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    pub fn igPlotHistogram_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igPlotHistogram_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    pub fn igValue_Bool(prefix: *const ::std::os::raw::c_char, b: bool);
}
unsafe extern "C" {
    pub fn igValue_Int(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igValue_Uint(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn igValue_Float(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igBeginMenuBar() -> bool;
}
unsafe extern "C" {
    pub fn igEndMenuBar();
}
unsafe extern "C" {
    pub fn igBeginMainMenuBar() -> bool;
}
unsafe extern "C" {
    pub fn igEndMainMenuBar();
}
unsafe extern "C" {
    pub fn igBeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
unsafe extern "C" {
    pub fn igEndMenu();
}
unsafe extern "C" {
    pub fn igMenuItem_Bool(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igMenuItem_BoolPtr(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginTooltip() -> bool;
}
unsafe extern "C" {
    pub fn igEndTooltip();
}
unsafe extern "C" {
    pub fn igSetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igSetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igBeginItemTooltip() -> bool;
}
unsafe extern "C" {
    pub fn igSetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igSetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igBeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags) -> bool;
}
unsafe extern "C" {
    pub fn igBeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndPopup();
}
unsafe extern "C" {
    pub fn igOpenPopup_Str(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    pub fn igOpenPopup_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    pub fn igOpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
unsafe extern "C" {
    pub fn igCloseCurrentPopup();
}
unsafe extern "C" {
    pub fn igBeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igIsPopupOpen_Str(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
unsafe extern "C" {
    pub fn igBeginTable(
        str_id: *const ::std::os::raw::c_char,
        column: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndTable();
}
unsafe extern "C" {
    pub fn igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
unsafe extern "C" {
    pub fn igTableNextColumn() -> bool;
}
unsafe extern "C" {
    pub fn igTableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn igTableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
unsafe extern "C" {
    pub fn igTableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igTableHeader(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igTableHeadersRow();
}
unsafe extern "C" {
    pub fn igTableAngledHeadersRow();
}
unsafe extern "C" {
    pub fn igTableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
unsafe extern "C" {
    pub fn igTableGetColumnCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTableGetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTableGetRowIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTableGetColumnName_Int(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igTableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
unsafe extern "C" {
    pub fn igTableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
unsafe extern "C" {
    pub fn igTableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igColumns(count: ::std::os::raw::c_int, id: *const ::std::os::raw::c_char, border: bool);
}
unsafe extern "C" {
    pub fn igNextColumn();
}
unsafe extern "C" {
    pub fn igGetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igGetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn igSetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
unsafe extern "C" {
    pub fn igGetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn igSetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
unsafe extern "C" {
    pub fn igGetColumnsCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igBeginTabBar(str_id: *const ::std::os::raw::c_char, flags: ImGuiTabBarFlags) -> bool;
}
unsafe extern "C" {
    pub fn igEndTabBar();
}
unsafe extern "C" {
    pub fn igBeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndTabItem();
}
unsafe extern "C" {
    pub fn igTabItemButton(label: *const ::std::os::raw::c_char, flags: ImGuiTabItemFlags) -> bool;
}
unsafe extern "C" {
    pub fn igSetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDockSpace(
        id: ImGuiID,
        size: ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igDockSpaceOverViewport(
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igSetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetNextWindowClass(window_class: *const ImGuiWindowClass);
}
unsafe extern "C" {
    pub fn igGetWindowDockID() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igIsWindowDocked() -> bool;
}
unsafe extern "C" {
    pub fn igLogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igLogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igLogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igLogFinish();
}
unsafe extern "C" {
    pub fn igLogButtons();
}
unsafe extern "C" {
    pub fn igLogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igBeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
unsafe extern "C" {
    pub fn igSetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igEndDragDropSource();
}
unsafe extern "C" {
    pub fn igBeginDragDropTarget() -> bool;
}
unsafe extern "C" {
    pub fn igAcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
unsafe extern "C" {
    pub fn igEndDragDropTarget();
}
unsafe extern "C" {
    pub fn igGetDragDropPayload() -> *const ImGuiPayload;
}
unsafe extern "C" {
    pub fn igBeginDisabled(disabled: bool);
}
unsafe extern "C" {
    pub fn igEndDisabled();
}
unsafe extern "C" {
    pub fn igPushClipRect(
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    pub fn igPopClipRect();
}
unsafe extern "C" {
    pub fn igSetItemDefaultFocus();
}
unsafe extern "C" {
    pub fn igSetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igSetNextItemAllowOverlap();
}
unsafe extern "C" {
    pub fn igIsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    pub fn igIsItemActive() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemFocused() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    pub fn igIsItemVisible() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemEdited() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemActivated() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemDeactivated() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemDeactivatedAfterEdit() -> bool;
}
unsafe extern "C" {
    pub fn igIsItemToggledOpen() -> bool;
}
unsafe extern "C" {
    pub fn igIsAnyItemHovered() -> bool;
}
unsafe extern "C" {
    pub fn igIsAnyItemActive() -> bool;
}
unsafe extern "C" {
    pub fn igIsAnyItemFocused() -> bool;
}
unsafe extern "C" {
    pub fn igGetItemID() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetItemRectMin(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetItemRectMax(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetItemRectSize(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetMainViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    pub fn igGetBackgroundDrawList_Nil() -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igGetForegroundDrawList_Nil() -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igGetBackgroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igGetForegroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igIsRectVisible_Nil(size: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igIsRectVisible_Vec2(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igGetTime() -> f64;
}
unsafe extern "C" {
    pub fn igGetFrameCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igGetDrawListSharedData() -> *mut ImDrawListSharedData;
}
unsafe extern "C" {
    pub fn igGetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igSetStateStorage(storage: *mut ImGuiStorage);
}
unsafe extern "C" {
    pub fn igGetStateStorage() -> *mut ImGuiStorage;
}
unsafe extern "C" {
    pub fn igCalcTextSize(
        pOut: *mut ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    );
}
unsafe extern "C" {
    pub fn igColorConvertU32ToFloat4(pOut: *mut ImVec4, in_: ImU32);
}
unsafe extern "C" {
    pub fn igColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
unsafe extern "C" {
    pub fn igColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
unsafe extern "C" {
    pub fn igColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
unsafe extern "C" {
    pub fn igIsKeyDown_Nil(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyPressed_Bool(key: ImGuiKey, repeat: bool) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyReleased_Nil(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyChordPressed_Nil(key_chord: ImGuiKeyChord) -> bool;
}
unsafe extern "C" {
    pub fn igGetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igGetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igSetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
unsafe extern "C" {
    pub fn igIsMouseDown_Nil(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseClicked_Bool(button: ImGuiMouseButton, repeat: bool) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseReleased_Nil(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseDoubleClicked_Nil(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    pub fn igGetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
unsafe extern "C" {
    pub fn igIsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igIsAnyMouseDown() -> bool;
}
unsafe extern "C" {
    pub fn igGetMousePos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igGetMousePosOnOpeningCurrentPopup(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
unsafe extern "C" {
    pub fn igGetMouseDragDelta(pOut: *mut ImVec2, button: ImGuiMouseButton, lock_threshold: f32);
}
unsafe extern "C" {
    pub fn igResetMouseDragDelta(button: ImGuiMouseButton);
}
unsafe extern "C" {
    pub fn igGetMouseCursor() -> ImGuiMouseCursor;
}
unsafe extern "C" {
    pub fn igSetMouseCursor(cursor_type: ImGuiMouseCursor);
}
unsafe extern "C" {
    pub fn igSetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
unsafe extern "C" {
    pub fn igGetClipboardText() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igSetClipboardText(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igLoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igLoadIniSettingsFromMemory(ini_data: *const ::std::os::raw::c_char, ini_size: usize);
}
unsafe extern "C" {
    pub fn igSaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igSaveIniSettingsToMemory(out_ini_size: *mut usize) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igDebugTextEncoding(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igGetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igMemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn igMemFree(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn igGetPlatformIO() -> *mut ImGuiPlatformIO;
}
unsafe extern "C" {
    pub fn igUpdatePlatformWindows();
}
unsafe extern "C" {
    pub fn igRenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igDestroyPlatformWindows();
}
unsafe extern "C" {
    pub fn igFindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    pub fn igFindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    pub fn ImGuiStyle_ImGuiStyle() -> *mut ImGuiStyle;
}
unsafe extern "C" {
    pub fn ImGuiStyle_destroy(self_: *mut ImGuiStyle);
}
unsafe extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddKeyEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddKeyAnalogEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddMousePosEvent(self_: *mut ImGuiIO, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddMouseButtonEvent(
        self_: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
unsafe extern "C" {
    pub fn ImGuiIO_AddMouseWheelEvent(self_: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddMouseSourceEvent(self_: *mut ImGuiIO, source: ImGuiMouseSource);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddMouseViewportEvent(self_: *mut ImGuiIO, id: ImGuiID);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddFocusEvent(self_: *mut ImGuiIO, focused: bool);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
unsafe extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImGuiIO_SetKeyEventNativeData(
        self_: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImGuiIO_SetAppAcceptingEvents(self_: *mut ImGuiIO, accepting_events: bool);
}
unsafe extern "C" {
    pub fn ImGuiIO_ClearEventsQueue(self_: *mut ImGuiIO);
}
unsafe extern "C" {
    pub fn ImGuiIO_ClearInputKeys(self_: *mut ImGuiIO);
}
unsafe extern "C" {
    pub fn ImGuiIO_ImGuiIO() -> *mut ImGuiIO;
}
unsafe extern "C" {
    pub fn ImGuiIO_destroy(self_: *mut ImGuiIO);
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() -> *mut ImGuiInputTextCallbackData;
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_destroy(self_: *mut ImGuiInputTextCallbackData);
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
unsafe extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(self_: *mut ImGuiInputTextCallbackData) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiWindowClass_ImGuiWindowClass() -> *mut ImGuiWindowClass;
}
unsafe extern "C" {
    pub fn ImGuiWindowClass_destroy(self_: *mut ImGuiWindowClass);
}
unsafe extern "C" {
    pub fn ImGuiPayload_ImGuiPayload() -> *mut ImGuiPayload;
}
unsafe extern "C" {
    pub fn ImGuiPayload_destroy(self_: *mut ImGuiPayload);
}
unsafe extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
unsafe extern "C" {
    pub fn ImGuiPayload_IsDataType(
        self_: *mut ImGuiPayload,
        type_: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *mut ImGuiPayload) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *mut ImGuiPayload) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() -> *mut ImGuiTableColumnSortSpecs;
}
unsafe extern "C" {
    pub fn ImGuiTableColumnSortSpecs_destroy(self_: *mut ImGuiTableColumnSortSpecs);
}
unsafe extern "C" {
    pub fn ImGuiTableSortSpecs_ImGuiTableSortSpecs() -> *mut ImGuiTableSortSpecs;
}
unsafe extern "C" {
    pub fn ImGuiTableSortSpecs_destroy(self_: *mut ImGuiTableSortSpecs);
}
unsafe extern "C" {
    pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() -> *mut ImGuiOnceUponAFrame;
}
unsafe extern "C" {
    pub fn ImGuiOnceUponAFrame_destroy(self_: *mut ImGuiOnceUponAFrame);
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        default_filter: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextFilter;
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_destroy(self_: *mut ImGuiTextFilter);
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_Draw(
        self_: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *mut ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
unsafe extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *mut ImGuiTextFilter) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Nil() -> *mut ImGuiTextRange;
}
unsafe extern "C" {
    pub fn ImGuiTextRange_destroy(self_: *mut ImGuiTextRange);
}
unsafe extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Str(
        _b: *const ::std::os::raw::c_char,
        _e: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextRange;
}
unsafe extern "C" {
    pub fn ImGuiTextRange_empty(self_: *mut ImGuiTextRange) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTextRange_split(
        self_: *mut ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector_ImGuiTextRange,
    );
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_ImGuiTextBuffer() -> *mut ImGuiTextBuffer;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_destroy(self_: *mut ImGuiTextBuffer);
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *mut ImGuiTextBuffer) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *mut ImGuiTextBuffer) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_appendfv(
        self_: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Int(
        _key: ImGuiID,
        _val: ::std::os::raw::c_int,
    ) -> *mut ImGuiStoragePair;
}
unsafe extern "C" {
    pub fn ImGuiStoragePair_destroy(self_: *mut ImGuiStoragePair);
}
unsafe extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Float(
        _key: ImGuiID,
        _val: f32,
    ) -> *mut ImGuiStoragePair;
}
unsafe extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Ptr(
        _key: ImGuiID,
        _val: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiStoragePair;
}
unsafe extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetBool(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetBoolRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetFloatRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
unsafe extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImGuiListClipper_ImGuiListClipper() -> *mut ImGuiListClipper;
}
unsafe extern "C" {
    pub fn ImGuiListClipper_destroy(self_: *mut ImGuiListClipper);
}
unsafe extern "C" {
    pub fn ImGuiListClipper_Begin(
        self_: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
unsafe extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
unsafe extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiListClipper_IncludeItemByIndex(
        self_: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        self_: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImColor_ImColor_Nil() -> *mut ImColor;
}
unsafe extern "C" {
    pub fn ImColor_destroy(self_: *mut ImColor);
}
unsafe extern "C" {
    pub fn ImColor_ImColor_Float(r: f32, g: f32, b: f32, a: f32) -> *mut ImColor;
}
unsafe extern "C" {
    pub fn ImColor_ImColor_Vec4(col: ImVec4) -> *mut ImColor;
}
unsafe extern "C" {
    pub fn ImColor_ImColor_Int(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    ) -> *mut ImColor;
}
unsafe extern "C" {
    pub fn ImColor_ImColor_U32(rgba: ImU32) -> *mut ImColor;
}
unsafe extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
unsafe extern "C" {
    pub fn ImColor_HSV(pOut: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
unsafe extern "C" {
    pub fn ImDrawCmd_ImDrawCmd() -> *mut ImDrawCmd;
}
unsafe extern "C" {
    pub fn ImDrawCmd_destroy(self_: *mut ImDrawCmd);
}
unsafe extern "C" {
    pub fn ImDrawCmd_GetTexID(self_: *mut ImDrawCmd) -> ImTextureID;
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_ImDrawListSplitter() -> *mut ImDrawListSplitter;
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_destroy(self_: *mut ImDrawListSplitter);
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_ImDrawList(shared_data: *mut ImDrawListSharedData) -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn ImDrawList_destroy(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
unsafe extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_GetClipRectMin(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_GetClipRectMax(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_AddLine(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddRect(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddQuadFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddTriangleFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddCircle(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddEllipse(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius_x: f32,
        radius_y: f32,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddEllipseFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius_x: f32,
        radius_y: f32,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddText_Vec2(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddText_FontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddBezierCubic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddBezierQuadratic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
unsafe extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
unsafe extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
unsafe extern "C" {
    pub fn ImDrawList_PathStroke(
        self_: *mut ImDrawList,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathEllipticalArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius_x: f32,
        radius_y: f32,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathBezierCubicCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *mut ImDrawList) -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImDrawList_PrimReserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PrimUnreserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
unsafe extern "C" {
    pub fn ImDrawList_PrimRectUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
unsafe extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
unsafe extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
unsafe extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__TryMergeDrawCmds(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        self_: *mut ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImDrawList__PathArcToFastEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawList__PathArcToN(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawData_ImDrawData() -> *mut ImDrawData;
}
unsafe extern "C" {
    pub fn ImDrawData_destroy(self_: *mut ImDrawData);
}
unsafe extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
unsafe extern "C" {
    pub fn ImDrawData_AddDrawList(self_: *mut ImDrawData, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
unsafe extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
unsafe extern "C" {
    pub fn ImFontConfig_ImFontConfig() -> *mut ImFontConfig;
}
unsafe extern "C" {
    pub fn ImFontConfig_destroy(self_: *mut ImFontConfig);
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() -> *mut ImFontGlyphRangesBuilder;
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_destroy(self_: *mut ImFontGlyphRangesBuilder);
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize) -> bool;
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize);
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
unsafe extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
unsafe extern "C" {
    pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect() -> *mut ImFontAtlasCustomRect;
}
unsafe extern "C" {
    pub fn ImFontAtlasCustomRect_destroy(self_: *mut ImFontAtlasCustomRect);
}
unsafe extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *mut ImFontAtlasCustomRect) -> bool;
}
unsafe extern "C" {
    pub fn ImFontAtlas_ImFontAtlas() -> *mut ImFontAtlas;
}
unsafe extern "C" {
    pub fn ImFontAtlas_destroy(self_: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFont(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFontDefault(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *mut ImFontAtlas) -> bool;
}
unsafe extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesGreek(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        self_: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::std::os::raw::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
unsafe extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *mut ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
unsafe extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImFont_ImFont() -> *mut ImFont;
}
unsafe extern "C" {
    pub fn ImFont_destroy(self_: *mut ImFont);
}
unsafe extern "C" {
    pub fn ImFont_FindGlyph(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
unsafe extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
unsafe extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *mut ImFont, c: ImWchar) -> f32;
}
unsafe extern "C" {
    pub fn ImFont_IsLoaded(self_: *mut ImFont) -> bool;
}
unsafe extern "C" {
    pub fn ImFont_GetDebugName(self_: *mut ImFont) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImFont_CalcTextSizeA(
        pOut: *mut ImVec2,
        self_: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *mut ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImFont_RenderChar(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
unsafe extern "C" {
    pub fn ImFont_RenderText(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
unsafe extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
unsafe extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
unsafe extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
unsafe extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
unsafe extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
unsafe extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiViewport_ImGuiViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    pub fn ImGuiViewport_destroy(self_: *mut ImGuiViewport);
}
unsafe extern "C" {
    pub fn ImGuiViewport_GetCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
unsafe extern "C" {
    pub fn ImGuiViewport_GetWorkCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
unsafe extern "C" {
    pub fn ImGuiPlatformIO_ImGuiPlatformIO() -> *mut ImGuiPlatformIO;
}
unsafe extern "C" {
    pub fn ImGuiPlatformIO_destroy(self_: *mut ImGuiPlatformIO);
}
unsafe extern "C" {
    pub fn ImGuiPlatformMonitor_ImGuiPlatformMonitor() -> *mut ImGuiPlatformMonitor;
}
unsafe extern "C" {
    pub fn ImGuiPlatformMonitor_destroy(self_: *mut ImGuiPlatformMonitor);
}
unsafe extern "C" {
    pub fn ImGuiPlatformImeData_ImGuiPlatformImeData() -> *mut ImGuiPlatformImeData;
}
unsafe extern "C" {
    pub fn ImGuiPlatformImeData_destroy(self_: *mut ImGuiPlatformImeData);
}
unsafe extern "C" {
    pub fn igGetKeyIndex(key: ImGuiKey) -> ImGuiKey;
}
unsafe extern "C" {
    pub fn igImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igImQsort(
        base: *mut ::std::os::raw::c_void,
        count: usize,
        size_of_element: usize,
        compare_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn igImIsPowerOfTwo_Int(v: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn igImIsPowerOfTwo_U64(v: ImU64) -> bool;
}
unsafe extern "C" {
    pub fn igImUpperPowerOfTwo(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: usize,
    );
}
unsafe extern "C" {
    pub fn igImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut usize,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
unsafe extern "C" {
    pub fn igImToUpper(c: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImCharIsBlankA(c: ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn igImCharIsBlankW(c: ::std::os::raw::c_uint) -> bool;
}
unsafe extern "C" {
    pub fn igImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImFormatStringToTempBuffer(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn igImFormatStringToTempBufferV(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn igImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImParseFormatSanitizeForPrinting(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    );
}
unsafe extern "C" {
    pub fn igImParseFormatSanitizeForScanning(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextCharToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImTextStrToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextStrFromUtf8(
        out_buf: *mut ImWchar,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImTextFindPreviousUtf8Codepoint(
        in_text_start: *const ::std::os::raw::c_char,
        in_text_curr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
unsafe extern "C" {
    pub fn igImFileClose(file: ImFileHandle) -> bool;
}
unsafe extern "C" {
    pub fn igImFileGetSize(file: ImFileHandle) -> ImU64;
}
unsafe extern "C" {
    pub fn igImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
unsafe extern "C" {
    pub fn igImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
unsafe extern "C" {
    pub fn igImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn igImPow_Float(x: f32, y: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImPow_double(x: f64, y: f64) -> f64;
}
unsafe extern "C" {
    pub fn igImLog_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImLog_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn igImAbs_Int(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImAbs_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImAbs_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn igImSign_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImSign_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn igImRsqrt_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImRsqrt_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn igImMin(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
unsafe extern "C" {
    pub fn igImMax(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
unsafe extern "C" {
    pub fn igImClamp(pOut: *mut ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2);
}
unsafe extern "C" {
    pub fn igImLerp_Vec2Float(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: f32);
}
unsafe extern "C" {
    pub fn igImLerp_Vec2Vec2(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: ImVec2);
}
unsafe extern "C" {
    pub fn igImLerp_Vec4(pOut: *mut ImVec4, a: ImVec4, b: ImVec4, t: f32);
}
unsafe extern "C" {
    pub fn igImSaturate(f: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImLengthSqr_Vec2(lhs: ImVec2) -> f32;
}
unsafe extern "C" {
    pub fn igImLengthSqr_Vec4(lhs: ImVec4) -> f32;
}
unsafe extern "C" {
    pub fn igImInvLength(lhs: ImVec2, fail_value: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImTrunc_Float(f: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImTrunc_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
unsafe extern "C" {
    pub fn igImFloor_Float(f: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImFloor_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
unsafe extern "C" {
    pub fn igImModPositive(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igImDot(a: ImVec2, b: ImVec2) -> f32;
}
unsafe extern "C" {
    pub fn igImRotate(pOut: *mut ImVec2, v: ImVec2, cos_a: f32, sin_a: f32);
}
unsafe extern "C" {
    pub fn igImLinearSweep(current: f32, target: f32, speed: f32) -> f32;
}
unsafe extern "C" {
    pub fn igImMul(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
unsafe extern "C" {
    pub fn igImIsFloatAboveGuaranteedIntegerPrecision(f: f32) -> bool;
}
unsafe extern "C" {
    pub fn igImExponentialMovingAverage(avg: f32, sample: f32, n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn igImBezierCubicCalc(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        t: f32,
    );
}
unsafe extern "C" {
    pub fn igImBezierCubicClosestPoint(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igImBezierCubicClosestPointCasteljau(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        tess_tol: f32,
    );
}
unsafe extern "C" {
    pub fn igImBezierQuadraticCalc(pOut: *mut ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: f32);
}
unsafe extern "C" {
    pub fn igImLineClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, p: ImVec2);
}
unsafe extern "C" {
    pub fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igImTriangleClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2);
}
unsafe extern "C" {
    pub fn igImTriangleBarycentricCoords(
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        p: ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
unsafe extern "C" {
    pub fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) -> f32;
}
unsafe extern "C" {
    pub fn ImVec1_ImVec1_Nil() -> *mut ImVec1;
}
unsafe extern "C" {
    pub fn ImVec1_destroy(self_: *mut ImVec1);
}
unsafe extern "C" {
    pub fn ImVec1_ImVec1_Float(_x: f32) -> *mut ImVec1;
}
unsafe extern "C" {
    pub fn ImVec2ih_ImVec2ih_Nil() -> *mut ImVec2ih;
}
unsafe extern "C" {
    pub fn ImVec2ih_destroy(self_: *mut ImVec2ih);
}
unsafe extern "C" {
    pub fn ImVec2ih_ImVec2ih_short(
        _x: ::std::os::raw::c_short,
        _y: ::std::os::raw::c_short,
    ) -> *mut ImVec2ih;
}
unsafe extern "C" {
    pub fn ImVec2ih_ImVec2ih_Vec2(rhs: ImVec2) -> *mut ImVec2ih;
}
unsafe extern "C" {
    pub fn ImRect_ImRect_Nil() -> *mut ImRect;
}
unsafe extern "C" {
    pub fn ImRect_destroy(self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_ImRect_Vec2(min: ImVec2, max: ImVec2) -> *mut ImRect;
}
unsafe extern "C" {
    pub fn ImRect_ImRect_Vec4(v: ImVec4) -> *mut ImRect;
}
unsafe extern "C" {
    pub fn ImRect_ImRect_Float(x1: f32, y1: f32, x2: f32, y2: f32) -> *mut ImRect;
}
unsafe extern "C" {
    pub fn ImRect_GetCenter(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_GetSize(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_GetWidth(self_: *mut ImRect) -> f32;
}
unsafe extern "C" {
    pub fn ImRect_GetHeight(self_: *mut ImRect) -> f32;
}
unsafe extern "C" {
    pub fn ImRect_GetArea(self_: *mut ImRect) -> f32;
}
unsafe extern "C" {
    pub fn ImRect_GetTL(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_GetTR(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_GetBL(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_GetBR(pOut: *mut ImVec2, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_Contains_Vec2(self_: *mut ImRect, p: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn ImRect_Contains_Rect(self_: *mut ImRect, r: ImRect) -> bool;
}
unsafe extern "C" {
    pub fn ImRect_ContainsWithPad(self_: *mut ImRect, p: ImVec2, pad: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn ImRect_Overlaps(self_: *mut ImRect, r: ImRect) -> bool;
}
unsafe extern "C" {
    pub fn ImRect_Add_Vec2(self_: *mut ImRect, p: ImVec2);
}
unsafe extern "C" {
    pub fn ImRect_Add_Rect(self_: *mut ImRect, r: ImRect);
}
unsafe extern "C" {
    pub fn ImRect_Expand_Float(self_: *mut ImRect, amount: f32);
}
unsafe extern "C" {
    pub fn ImRect_Expand_Vec2(self_: *mut ImRect, amount: ImVec2);
}
unsafe extern "C" {
    pub fn ImRect_Translate(self_: *mut ImRect, d: ImVec2);
}
unsafe extern "C" {
    pub fn ImRect_TranslateX(self_: *mut ImRect, dx: f32);
}
unsafe extern "C" {
    pub fn ImRect_TranslateY(self_: *mut ImRect, dy: f32);
}
unsafe extern "C" {
    pub fn ImRect_ClipWith(self_: *mut ImRect, r: ImRect);
}
unsafe extern "C" {
    pub fn ImRect_ClipWithFull(self_: *mut ImRect, r: ImRect);
}
unsafe extern "C" {
    pub fn ImRect_Floor(self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn ImRect_IsInverted(self_: *mut ImRect) -> bool;
}
unsafe extern "C" {
    pub fn ImRect_ToVec4(pOut: *mut ImVec4, self_: *mut ImRect);
}
unsafe extern "C" {
    pub fn igImBitArrayGetStorageSizeInBytes(bitcount: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn igImBitArrayClearAllBits(arr: *mut ImU32, bitcount: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igImBitArrayTestBit(arr: *const ImU32, n: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn igImBitArrayClearBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igImBitArraySetBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igImBitArraySetBitRange(
        arr: *mut ImU32,
        n: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImBitVector_Create(self_: *mut ImBitVector, sz: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImBitVector_Clear(self_: *mut ImBitVector);
}
unsafe extern "C" {
    pub fn ImBitVector_TestBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImBitVector_SetBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImBitVector_ClearBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImGuiTextIndex_clear(self_: *mut ImGuiTextIndex);
}
unsafe extern "C" {
    pub fn ImGuiTextIndex_size(self_: *mut ImGuiTextIndex) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiTextIndex_get_line_begin(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiTextIndex_get_line_end(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiTextIndex_append(
        self_: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImDrawListSharedData_ImDrawListSharedData() -> *mut ImDrawListSharedData;
}
unsafe extern "C" {
    pub fn ImDrawListSharedData_destroy(self_: *mut ImDrawListSharedData);
}
unsafe extern "C" {
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(
        self_: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
unsafe extern "C" {
    pub fn ImDrawDataBuilder_ImDrawDataBuilder() -> *mut ImDrawDataBuilder;
}
unsafe extern "C" {
    pub fn ImDrawDataBuilder_destroy(self_: *mut ImDrawDataBuilder);
}
unsafe extern "C" {
    pub fn ImGuiDataVarInfo_GetVarPtr(
        self_: *mut ImGuiDataVarInfo,
        parent: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Int(
        idx: ImGuiStyleVar,
        v: ::std::os::raw::c_int,
    ) -> *mut ImGuiStyleMod;
}
unsafe extern "C" {
    pub fn ImGuiStyleMod_destroy(self_: *mut ImGuiStyleMod);
}
unsafe extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Float(idx: ImGuiStyleVar, v: f32) -> *mut ImGuiStyleMod;
}
unsafe extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Vec2(idx: ImGuiStyleVar, v: ImVec2) -> *mut ImGuiStyleMod;
}
unsafe extern "C" {
    pub fn ImGuiComboPreviewData_ImGuiComboPreviewData() -> *mut ImGuiComboPreviewData;
}
unsafe extern "C" {
    pub fn ImGuiComboPreviewData_destroy(self_: *mut ImGuiComboPreviewData);
}
unsafe extern "C" {
    pub fn ImGuiMenuColumns_ImGuiMenuColumns() -> *mut ImGuiMenuColumns;
}
unsafe extern "C" {
    pub fn ImGuiMenuColumns_destroy(self_: *mut ImGuiMenuColumns);
}
unsafe extern "C" {
    pub fn ImGuiMenuColumns_Update(
        self_: *mut ImGuiMenuColumns,
        spacing: f32,
        window_reappearing: bool,
    );
}
unsafe extern "C" {
    pub fn ImGuiMenuColumns_DeclColumns(
        self_: *mut ImGuiMenuColumns,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32;
}
unsafe extern "C" {
    pub fn ImGuiMenuColumns_CalcNextTotalWidth(self_: *mut ImGuiMenuColumns, update_offsets: bool);
}
unsafe extern "C" {
    pub fn ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(
    ) -> *mut ImGuiInputTextDeactivatedState;
}
unsafe extern "C" {
    pub fn ImGuiInputTextDeactivatedState_destroy(self_: *mut ImGuiInputTextDeactivatedState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextDeactivatedState_ClearFreeMemory(
        self_: *mut ImGuiInputTextDeactivatedState,
    );
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_ImGuiInputTextState() -> *mut ImGuiInputTextState;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_destroy(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_ClearText(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_ClearFreeMemory(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_GetUndoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_GetRedoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_OnKeyPressed(
        self_: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_CursorAnimReset(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_CursorClamp(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_HasSelection(self_: *mut ImGuiInputTextState) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_ClearSelection(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_GetCursorPos(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_GetSelectionStart(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_GetSelectionEnd(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImGuiInputTextState_SelectAll(self_: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn ImGuiPopupData_ImGuiPopupData() -> *mut ImGuiPopupData;
}
unsafe extern "C" {
    pub fn ImGuiPopupData_destroy(self_: *mut ImGuiPopupData);
}
unsafe extern "C" {
    pub fn ImGuiNextWindowData_ImGuiNextWindowData() -> *mut ImGuiNextWindowData;
}
unsafe extern "C" {
    pub fn ImGuiNextWindowData_destroy(self_: *mut ImGuiNextWindowData);
}
unsafe extern "C" {
    pub fn ImGuiNextWindowData_ClearFlags(self_: *mut ImGuiNextWindowData);
}
unsafe extern "C" {
    pub fn ImGuiNextItemData_ImGuiNextItemData() -> *mut ImGuiNextItemData;
}
unsafe extern "C" {
    pub fn ImGuiNextItemData_destroy(self_: *mut ImGuiNextItemData);
}
unsafe extern "C" {
    pub fn ImGuiNextItemData_ClearFlags(self_: *mut ImGuiNextItemData);
}
unsafe extern "C" {
    pub fn ImGuiLastItemData_ImGuiLastItemData() -> *mut ImGuiLastItemData;
}
unsafe extern "C" {
    pub fn ImGuiLastItemData_destroy(self_: *mut ImGuiLastItemData);
}
unsafe extern "C" {
    pub fn ImGuiStackSizes_ImGuiStackSizes() -> *mut ImGuiStackSizes;
}
unsafe extern "C" {
    pub fn ImGuiStackSizes_destroy(self_: *mut ImGuiStackSizes);
}
unsafe extern "C" {
    pub fn ImGuiStackSizes_SetToContextState(self_: *mut ImGuiStackSizes, ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn ImGuiStackSizes_CompareWithContextState(
        self_: *mut ImGuiStackSizes,
        ctx: *mut ImGuiContext,
    );
}
unsafe extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiPtrOrIndex;
}
unsafe extern "C" {
    pub fn ImGuiPtrOrIndex_destroy(self_: *mut ImGuiPtrOrIndex);
}
unsafe extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(
        index: ::std::os::raw::c_int,
    ) -> *mut ImGuiPtrOrIndex;
}
unsafe extern "C" {
    pub fn ImGuiInputEvent_ImGuiInputEvent() -> *mut ImGuiInputEvent;
}
unsafe extern "C" {
    pub fn ImGuiInputEvent_destroy(self_: *mut ImGuiInputEvent);
}
unsafe extern "C" {
    pub fn ImGuiKeyRoutingData_ImGuiKeyRoutingData() -> *mut ImGuiKeyRoutingData;
}
unsafe extern "C" {
    pub fn ImGuiKeyRoutingData_destroy(self_: *mut ImGuiKeyRoutingData);
}
unsafe extern "C" {
    pub fn ImGuiKeyRoutingTable_ImGuiKeyRoutingTable() -> *mut ImGuiKeyRoutingTable;
}
unsafe extern "C" {
    pub fn ImGuiKeyRoutingTable_destroy(self_: *mut ImGuiKeyRoutingTable);
}
unsafe extern "C" {
    pub fn ImGuiKeyRoutingTable_Clear(self_: *mut ImGuiKeyRoutingTable);
}
unsafe extern "C" {
    pub fn ImGuiKeyOwnerData_ImGuiKeyOwnerData() -> *mut ImGuiKeyOwnerData;
}
unsafe extern "C" {
    pub fn ImGuiKeyOwnerData_destroy(self_: *mut ImGuiKeyOwnerData);
}
unsafe extern "C" {
    pub fn ImGuiListClipperRange_FromIndices(
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
unsafe extern "C" {
    pub fn ImGuiListClipperRange_FromPositions(
        y1: f32,
        y2: f32,
        off_min: ::std::os::raw::c_int,
        off_max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
unsafe extern "C" {
    pub fn ImGuiListClipperData_ImGuiListClipperData() -> *mut ImGuiListClipperData;
}
unsafe extern "C" {
    pub fn ImGuiListClipperData_destroy(self_: *mut ImGuiListClipperData);
}
unsafe extern "C" {
    pub fn ImGuiListClipperData_Reset(
        self_: *mut ImGuiListClipperData,
        clipper: *mut ImGuiListClipper,
    );
}
unsafe extern "C" {
    pub fn ImGuiNavItemData_ImGuiNavItemData() -> *mut ImGuiNavItemData;
}
unsafe extern "C" {
    pub fn ImGuiNavItemData_destroy(self_: *mut ImGuiNavItemData);
}
unsafe extern "C" {
    pub fn ImGuiNavItemData_Clear(self_: *mut ImGuiNavItemData);
}
unsafe extern "C" {
    pub fn ImGuiTypingSelectState_ImGuiTypingSelectState() -> *mut ImGuiTypingSelectState;
}
unsafe extern "C" {
    pub fn ImGuiTypingSelectState_destroy(self_: *mut ImGuiTypingSelectState);
}
unsafe extern "C" {
    pub fn ImGuiTypingSelectState_Clear(self_: *mut ImGuiTypingSelectState);
}
unsafe extern "C" {
    pub fn ImGuiOldColumnData_ImGuiOldColumnData() -> *mut ImGuiOldColumnData;
}
unsafe extern "C" {
    pub fn ImGuiOldColumnData_destroy(self_: *mut ImGuiOldColumnData);
}
unsafe extern "C" {
    pub fn ImGuiOldColumns_ImGuiOldColumns() -> *mut ImGuiOldColumns;
}
unsafe extern "C" {
    pub fn ImGuiOldColumns_destroy(self_: *mut ImGuiOldColumns);
}
unsafe extern "C" {
    pub fn ImGuiDockNode_ImGuiDockNode(id: ImGuiID) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_destroy(self_: *mut ImGuiDockNode);
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsRootNode(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsDockSpace(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsFloatingNode(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsCentralNode(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsHiddenTabBar(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsNoTabBar(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsSplitNode(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsLeafNode(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_IsEmpty(self_: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn ImGuiDockNode_Rect(pOut: *mut ImRect, self_: *mut ImGuiDockNode);
}
unsafe extern "C" {
    pub fn ImGuiDockNode_SetLocalFlags(self_: *mut ImGuiDockNode, flags: ImGuiDockNodeFlags);
}
unsafe extern "C" {
    pub fn ImGuiDockNode_UpdateMergedFlags(self_: *mut ImGuiDockNode);
}
unsafe extern "C" {
    pub fn ImGuiDockContext_ImGuiDockContext() -> *mut ImGuiDockContext;
}
unsafe extern "C" {
    pub fn ImGuiDockContext_destroy(self_: *mut ImGuiDockContext);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_ImGuiViewportP() -> *mut ImGuiViewportP;
}
unsafe extern "C" {
    pub fn ImGuiViewportP_destroy(self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_ClearRequestFlags(self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectPos(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
    );
}
unsafe extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectSize(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
        off_max: ImVec2,
    );
}
unsafe extern "C" {
    pub fn ImGuiViewportP_UpdateWorkRect(self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_GetMainRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_GetWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiViewportP_GetBuildWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn ImGuiWindowSettings_ImGuiWindowSettings() -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    pub fn ImGuiWindowSettings_destroy(self_: *mut ImGuiWindowSettings);
}
unsafe extern "C" {
    pub fn ImGuiWindowSettings_GetName(
        self_: *mut ImGuiWindowSettings,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImGuiSettingsHandler_ImGuiSettingsHandler() -> *mut ImGuiSettingsHandler;
}
unsafe extern "C" {
    pub fn ImGuiSettingsHandler_destroy(self_: *mut ImGuiSettingsHandler);
}
unsafe extern "C" {
    pub fn ImGuiDebugAllocInfo_ImGuiDebugAllocInfo() -> *mut ImGuiDebugAllocInfo;
}
unsafe extern "C" {
    pub fn ImGuiDebugAllocInfo_destroy(self_: *mut ImGuiDebugAllocInfo);
}
unsafe extern "C" {
    pub fn ImGuiStackLevelInfo_ImGuiStackLevelInfo() -> *mut ImGuiStackLevelInfo;
}
unsafe extern "C" {
    pub fn ImGuiStackLevelInfo_destroy(self_: *mut ImGuiStackLevelInfo);
}
unsafe extern "C" {
    pub fn ImGuiIDStackTool_ImGuiIDStackTool() -> *mut ImGuiIDStackTool;
}
unsafe extern "C" {
    pub fn ImGuiIDStackTool_destroy(self_: *mut ImGuiIDStackTool);
}
unsafe extern "C" {
    pub fn ImGuiContextHook_ImGuiContextHook() -> *mut ImGuiContextHook;
}
unsafe extern "C" {
    pub fn ImGuiContextHook_destroy(self_: *mut ImGuiContextHook);
}
unsafe extern "C" {
    pub fn ImGuiContext_ImGuiContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
unsafe extern "C" {
    pub fn ImGuiContext_destroy(self_: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn ImGuiWindow_ImGuiWindow(
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn ImGuiWindow_destroy(self_: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn ImGuiWindow_GetID_Str(
        self_: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn ImGuiWindow_GetID_Ptr(
        self_: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn ImGuiWindow_GetID_Int(self_: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
unsafe extern "C" {
    pub fn ImGuiWindow_GetIDFromRectangle(self_: *mut ImGuiWindow, r_abs: ImRect) -> ImGuiID;
}
unsafe extern "C" {
    pub fn ImGuiWindow_Rect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn ImGuiWindow_CalcFontSize(self_: *mut ImGuiWindow) -> f32;
}
unsafe extern "C" {
    pub fn ImGuiWindow_TitleBarHeight(self_: *mut ImGuiWindow) -> f32;
}
unsafe extern "C" {
    pub fn ImGuiWindow_TitleBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn ImGuiWindow_MenuBarHeight(self_: *mut ImGuiWindow) -> f32;
}
unsafe extern "C" {
    pub fn ImGuiWindow_MenuBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn ImGuiTabItem_ImGuiTabItem() -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    pub fn ImGuiTabItem_destroy(self_: *mut ImGuiTabItem);
}
unsafe extern "C" {
    pub fn ImGuiTabBar_ImGuiTabBar() -> *mut ImGuiTabBar;
}
unsafe extern "C" {
    pub fn ImGuiTabBar_destroy(self_: *mut ImGuiTabBar);
}
unsafe extern "C" {
    pub fn ImGuiTableColumn_ImGuiTableColumn() -> *mut ImGuiTableColumn;
}
unsafe extern "C" {
    pub fn ImGuiTableColumn_destroy(self_: *mut ImGuiTableColumn);
}
unsafe extern "C" {
    pub fn ImGuiTableInstanceData_ImGuiTableInstanceData() -> *mut ImGuiTableInstanceData;
}
unsafe extern "C" {
    pub fn ImGuiTableInstanceData_destroy(self_: *mut ImGuiTableInstanceData);
}
unsafe extern "C" {
    pub fn ImGuiTable_ImGuiTable() -> *mut ImGuiTable;
}
unsafe extern "C" {
    pub fn ImGuiTable_destroy(self_: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn ImGuiTableTempData_ImGuiTableTempData() -> *mut ImGuiTableTempData;
}
unsafe extern "C" {
    pub fn ImGuiTableTempData_destroy(self_: *mut ImGuiTableTempData);
}
unsafe extern "C" {
    pub fn ImGuiTableColumnSettings_ImGuiTableColumnSettings() -> *mut ImGuiTableColumnSettings;
}
unsafe extern "C" {
    pub fn ImGuiTableColumnSettings_destroy(self_: *mut ImGuiTableColumnSettings);
}
unsafe extern "C" {
    pub fn ImGuiTableSettings_ImGuiTableSettings() -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    pub fn ImGuiTableSettings_destroy(self_: *mut ImGuiTableSettings);
}
unsafe extern "C" {
    pub fn ImGuiTableSettings_GetColumnSettings(
        self_: *mut ImGuiTableSettings,
    ) -> *mut ImGuiTableColumnSettings;
}
unsafe extern "C" {
    pub fn igGetCurrentWindowRead() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igGetCurrentWindow() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igFindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igFindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igUpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    pub fn igCalcWindowNextAutoFitSize(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igIsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
        popup_hierarchy: bool,
        dock_hierarchy: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowWithinBeginStackOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
unsafe extern "C" {
    pub fn igSetWindowPos_WindowPtr(window: *mut ImGuiWindow, pos: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowSize_WindowPtr(window: *mut ImGuiWindow, size: ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igSetWindowCollapsed_WindowPtr(
        window: *mut ImGuiWindow,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    pub fn igSetWindowHitTestHole(window: *mut ImGuiWindow, pos: ImVec2, size: ImVec2);
}
unsafe extern "C" {
    pub fn igSetWindowHiddendAndSkipItemsForCurrentFrame(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igWindowRectAbsToRel(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
unsafe extern "C" {
    pub fn igWindowRectRelToAbs(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
unsafe extern "C" {
    pub fn igWindowPosRelToAbs(pOut: *mut ImVec2, window: *mut ImGuiWindow, p: ImVec2);
}
unsafe extern "C" {
    pub fn igFocusWindow(window: *mut ImGuiWindow, flags: ImGuiFocusRequestFlags);
}
unsafe extern "C" {
    pub fn igFocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
        filter_viewport: *mut ImGuiViewport,
        flags: ImGuiFocusRequestFlags,
    );
}
unsafe extern "C" {
    pub fn igBringWindowToFocusFront(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igBringWindowToDisplayFront(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igBringWindowToDisplayBack(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igBringWindowToDisplayBehind(window: *mut ImGuiWindow, above_window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igFindWindowDisplayIndex(window: *mut ImGuiWindow) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igFindBottomMostVisibleWindowWithinBeginStack(
        window: *mut ImGuiWindow,
    ) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igSetCurrentFont(font: *mut ImFont);
}
unsafe extern "C" {
    pub fn igGetDefaultFont() -> *mut ImFont;
}
unsafe extern "C" {
    pub fn igGetForegroundDrawList_WindowPtr(window: *mut ImGuiWindow) -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn igAddDrawListToDrawDataEx(
        draw_data: *mut ImDrawData,
        out_list: *mut ImVector_ImDrawListPtr,
        draw_list: *mut ImDrawList,
    );
}
unsafe extern "C" {
    pub fn igInitialize();
}
unsafe extern "C" {
    pub fn igShutdown();
}
unsafe extern "C" {
    pub fn igUpdateInputEvents(trickle_fast_inputs: bool);
}
unsafe extern "C" {
    pub fn igUpdateHoveredWindowAndCaptureFlags();
}
unsafe extern "C" {
    pub fn igStartMouseMovingWindow(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igStartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock: bool,
    );
}
unsafe extern "C" {
    pub fn igUpdateMouseMovingWindowNewFrame();
}
unsafe extern "C" {
    pub fn igUpdateMouseMovingWindowEndFrame();
}
unsafe extern "C" {
    pub fn igAddContextHook(context: *mut ImGuiContext, hook: *const ImGuiContextHook) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igRemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
unsafe extern "C" {
    pub fn igCallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
unsafe extern "C" {
    pub fn igTranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: ImVec2,
        new_pos: ImVec2,
    );
}
unsafe extern "C" {
    pub fn igScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
unsafe extern "C" {
    pub fn igDestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn igSetWindowViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn igSetCurrentViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn igGetViewportPlatformMonitor(
        viewport: *mut ImGuiViewport,
    ) -> *const ImGuiPlatformMonitor;
}
unsafe extern "C" {
    pub fn igFindHoveredViewportFromPlatformWindowStack(
        mouse_platform_pos: ImVec2,
    ) -> *mut ImGuiViewportP;
}
unsafe extern "C" {
    pub fn igMarkIniSettingsDirty_Nil();
}
unsafe extern "C" {
    pub fn igMarkIniSettingsDirty_WindowPtr(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igClearIniSettings();
}
unsafe extern "C" {
    pub fn igAddSettingsHandler(handler: *const ImGuiSettingsHandler);
}
unsafe extern "C" {
    pub fn igRemoveSettingsHandler(type_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igFindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
unsafe extern "C" {
    pub fn igCreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    pub fn igFindWindowSettingsByID(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    pub fn igFindWindowSettingsByWindow(window: *mut ImGuiWindow) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    pub fn igClearWindowSettings(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igLocalizeRegisterEntries(entries: *const ImGuiLocEntry, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igLocalizeGetMsg(key: ImGuiLocKey) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igSetScrollX_WindowPtr(window: *mut ImGuiWindow, scroll_x: f32);
}
unsafe extern "C" {
    pub fn igSetScrollY_WindowPtr(window: *mut ImGuiWindow, scroll_y: f32);
}
unsafe extern "C" {
    pub fn igSetScrollFromPosX_WindowPtr(
        window: *mut ImGuiWindow,
        local_x: f32,
        center_x_ratio: f32,
    );
}
unsafe extern "C" {
    pub fn igSetScrollFromPosY_WindowPtr(
        window: *mut ImGuiWindow,
        local_y: f32,
        center_y_ratio: f32,
    );
}
unsafe extern "C" {
    pub fn igScrollToItem(flags: ImGuiScrollFlags);
}
unsafe extern "C" {
    pub fn igScrollToRect(window: *mut ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags);
}
unsafe extern "C" {
    pub fn igScrollToRectEx(
        pOut: *mut ImVec2,
        window: *mut ImGuiWindow,
        rect: ImRect,
        flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    pub fn igScrollToBringRectIntoView(window: *mut ImGuiWindow, rect: ImRect);
}
unsafe extern "C" {
    pub fn igGetItemStatusFlags() -> ImGuiItemStatusFlags;
}
unsafe extern "C" {
    pub fn igGetItemFlags() -> ImGuiItemFlags;
}
unsafe extern "C" {
    pub fn igGetActiveID() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetFocusID() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igSetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igSetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igClearActiveID();
}
unsafe extern "C" {
    pub fn igGetHoveredID() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igSetHoveredID(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igKeepAliveID(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igMarkItemEdited(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igPushOverrideID(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igGetIDWithSeed_Str(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetIDWithSeed_Int(n: ::std::os::raw::c_int, seed: ImGuiID) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igItemSize_Vec2(size: ImVec2, text_baseline_y: f32);
}
unsafe extern "C" {
    pub fn igItemSize_Rect(bb: ImRect, text_baseline_y: f32);
}
unsafe extern "C" {
    pub fn igItemAdd(
        bb: ImRect,
        id: ImGuiID,
        nav_bb: *const ImRect,
        extra_flags: ImGuiItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igItemHoverable(bb: ImRect, id: ImGuiID, item_flags: ImGuiItemFlags) -> bool;
}
unsafe extern "C" {
    pub fn igIsWindowContentHoverable(window: *mut ImGuiWindow, flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    pub fn igIsClippedEx(bb: ImRect, id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igSetLastItemData(
        item_id: ImGuiID,
        in_flags: ImGuiItemFlags,
        status_flags: ImGuiItemStatusFlags,
        item_rect: ImRect,
    );
}
unsafe extern "C" {
    pub fn igCalcItemSize(pOut: *mut ImVec2, size: ImVec2, default_w: f32, default_h: f32);
}
unsafe extern "C" {
    pub fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) -> f32;
}
unsafe extern "C" {
    pub fn igPushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
unsafe extern "C" {
    pub fn igIsItemToggledSelection() -> bool;
}
unsafe extern "C" {
    pub fn igGetContentRegionMaxAbs(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn igShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
unsafe extern "C" {
    pub fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
unsafe extern "C" {
    pub fn igPopItemFlag();
}
unsafe extern "C" {
    pub fn igGetStyleVarInfo(idx: ImGuiStyleVar) -> *const ImGuiDataVarInfo;
}
unsafe extern "C" {
    pub fn igLogBegin(type_: ImGuiLogType, auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igLogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igLogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igLogSetNextTextDecoration(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igBeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    pub fn igClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
unsafe extern "C" {
    pub fn igClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
unsafe extern "C" {
    pub fn igClosePopupsExceptModals();
}
unsafe extern "C" {
    pub fn igIsPopupOpen_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
unsafe extern "C" {
    pub fn igBeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
unsafe extern "C" {
    pub fn igBeginTooltipEx(
        tooltip_flags: ImGuiTooltipFlags,
        extra_window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginTooltipHidden() -> bool;
}
unsafe extern "C" {
    pub fn igGetPopupAllowedExtentRect(pOut: *mut ImRect, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igGetTopMostPopupModal() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igGetTopMostAndVisiblePopupModal() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igFindBlockingModal(window: *mut ImGuiWindow) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    pub fn igFindBestWindowPosForPopup(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igFindBestWindowPosForPopupEx(
        pOut: *mut ImVec2,
        ref_pos: ImVec2,
        size: ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: ImRect,
        r_avoid: ImRect,
        policy: ImGuiPopupPositionPolicy,
    );
}
unsafe extern "C" {
    pub fn igBeginViewportSideBar(
        name: *const ::std::os::raw::c_char,
        viewport: *mut ImGuiViewport,
        dir: ImGuiDir,
        size: f32,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginMenuEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igMenuItemEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igBeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags) -> bool;
}
unsafe extern "C" {
    pub fn igBeginComboPreview() -> bool;
}
unsafe extern "C" {
    pub fn igEndComboPreview();
}
unsafe extern "C" {
    pub fn igNavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
unsafe extern "C" {
    pub fn igNavInitRequestApplyResult();
}
unsafe extern "C" {
    pub fn igNavMoveRequestButNoResultYet() -> bool;
}
unsafe extern "C" {
    pub fn igNavMoveRequestSubmit(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    pub fn igNavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    pub fn igNavMoveRequestResolveWithLastItem(result: *mut ImGuiNavItemData);
}
unsafe extern "C" {
    pub fn igNavMoveRequestResolveWithPastTreeNode(
        result: *mut ImGuiNavItemData,
        tree_node_data: *mut ImGuiNavTreeNodeData,
    );
}
unsafe extern "C" {
    pub fn igNavMoveRequestCancel();
}
unsafe extern "C" {
    pub fn igNavMoveRequestApplyResult();
}
unsafe extern "C" {
    pub fn igNavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
unsafe extern "C" {
    pub fn igNavClearPreferredPosForAxis(axis: ImGuiAxis);
}
unsafe extern "C" {
    pub fn igNavRestoreHighlightAfterMove();
}
unsafe extern "C" {
    pub fn igNavUpdateCurrentWindowIsScrollPushableX();
}
unsafe extern "C" {
    pub fn igSetNavWindow(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igSetNavID(
        id: ImGuiID,
        nav_layer: ImGuiNavLayer,
        focus_scope_id: ImGuiID,
        rect_rel: ImRect,
    );
}
unsafe extern "C" {
    pub fn igFocusItem();
}
unsafe extern "C" {
    pub fn igActivateItemByID(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igIsNamedKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsNamedKeyOrModKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsLegacyKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyboardKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsGamepadKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igIsAliasKey(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    pub fn igConvertShortcutMod(key_chord: ImGuiKeyChord) -> ImGuiKeyChord;
}
unsafe extern "C" {
    pub fn igConvertSingleModFlagToKey(ctx: *mut ImGuiContext, key: ImGuiKey) -> ImGuiKey;
}
unsafe extern "C" {
    pub fn igGetKeyData_ContextPtr(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyData;
}
unsafe extern "C" {
    pub fn igGetKeyData_Key(key: ImGuiKey) -> *mut ImGuiKeyData;
}
unsafe extern "C" {
    pub fn igGetKeyChordName(
        key_chord: ImGuiKeyChord,
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igMouseButtonToKey(button: ImGuiMouseButton) -> ImGuiKey;
}
unsafe extern "C" {
    pub fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
unsafe extern "C" {
    pub fn igGetKeyMagnitude2d(
        pOut: *mut ImVec2,
        key_left: ImGuiKey,
        key_right: ImGuiKey,
        key_up: ImGuiKey,
        key_down: ImGuiKey,
    );
}
unsafe extern "C" {
    pub fn igGetNavTweakPressedAmount(axis: ImGuiAxis) -> f32;
}
unsafe extern "C" {
    pub fn igCalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igGetTypematicRepeatRate(
        flags: ImGuiInputFlags,
        repeat_delay: *mut f32,
        repeat_rate: *mut f32,
    );
}
unsafe extern "C" {
    pub fn igTeleportMousePos(pos: ImVec2);
}
unsafe extern "C" {
    pub fn igSetActiveIdUsingAllKeyboardKeys();
}
unsafe extern "C" {
    pub fn igIsActiveIdUsingNavDir(dir: ImGuiDir) -> bool;
}
unsafe extern "C" {
    pub fn igGetKeyOwner(key: ImGuiKey) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igSetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    pub fn igSetKeyOwnersForKeyChord(key: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    pub fn igSetItemKeyOwner(key: ImGuiKey, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    pub fn igTestKeyOwner(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igGetKeyOwnerData(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyOwnerData;
}
unsafe extern "C" {
    pub fn igIsKeyDown_ID(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyPressed_ID(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyReleased_ID(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseDown_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseClicked_ID(
        button: ImGuiMouseButton,
        owner_id: ImGuiID,
        flags: ImGuiInputFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseReleased_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igIsMouseDoubleClicked_ID(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igIsKeyChordPressed_ID(
        key_chord: ImGuiKeyChord,
        owner_id: ImGuiID,
        flags: ImGuiInputFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igShortcut(key_chord: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags) -> bool;
}
unsafe extern "C" {
    pub fn igSetShortcutRouting(
        key_chord: ImGuiKeyChord,
        owner_id: ImGuiID,
        flags: ImGuiInputFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igGetShortcutRoutingData(key_chord: ImGuiKeyChord) -> *mut ImGuiKeyRoutingData;
}
unsafe extern "C" {
    pub fn igDockContextInitialize(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextShutdown(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
unsafe extern "C" {
    pub fn igDockContextRebuildNodes(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextEndFrame(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn igDockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igDockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
unsafe extern "C" {
    pub fn igDockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igDockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
unsafe extern "C" {
    pub fn igDockContextProcessUndockWindow(
        ctx: *mut ImGuiContext,
        window: *mut ImGuiWindow,
        clear_persistent_docking_ref: bool,
    );
}
unsafe extern "C" {
    pub fn igDockContextProcessUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
unsafe extern "C" {
    pub fn igDockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload_window: *mut ImGuiWindow,
        payload_node: *mut ImGuiDockNode,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDockContextFindNodeByID(ctx: *mut ImGuiContext, id: ImGuiID) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn igDockNodeWindowMenuHandler_Default(
        ctx: *mut ImGuiContext,
        node: *mut ImGuiDockNode,
        tab_bar: *mut ImGuiTabBar,
    );
}
unsafe extern "C" {
    pub fn igDockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn igDockNodeEndAmendTabBar();
}
unsafe extern "C" {
    pub fn igDockNodeGetRootNode(node: *mut ImGuiDockNode) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn igDockNodeIsInHierarchyOf(node: *mut ImGuiDockNode, parent: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn igDockNodeGetDepth(node: *const ImGuiDockNode) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igDockNodeGetWindowMenuButtonId(node: *const ImGuiDockNode) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetWindowDockNode() -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn igGetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
unsafe extern "C" {
    pub fn igBeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
unsafe extern "C" {
    pub fn igBeginDockableDragDropSource(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igBeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igSetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
unsafe extern "C" {
    pub fn igDockBuilderDockWindow(window_name: *const ::std::os::raw::c_char, node_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igDockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn igDockBuilderGetCentralNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    pub fn igDockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igDockBuilderRemoveNode(node_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igDockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
unsafe extern "C" {
    pub fn igDockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igDockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
unsafe extern "C" {
    pub fn igDockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
unsafe extern "C" {
    pub fn igDockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igDockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector_const_charPtr,
    );
}
unsafe extern "C" {
    pub fn igDockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector_ImGuiID,
    );
}
unsafe extern "C" {
    pub fn igDockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igDockBuilderFinish(node_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igPushFocusScope(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igPopFocusScope();
}
unsafe extern "C" {
    pub fn igGetCurrentFocusScope() -> ImGuiID;
}
unsafe extern "C" {
    pub fn igIsDragDropActive() -> bool;
}
unsafe extern "C" {
    pub fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igClearDragDrop();
}
unsafe extern "C" {
    pub fn igIsDragDropPayloadBeingAccepted() -> bool;
}
unsafe extern "C" {
    pub fn igRenderDragDropTargetRect(bb: ImRect);
}
unsafe extern "C" {
    pub fn igGetTypingSelectRequest(flags: ImGuiTypingSelectFlags)
        -> *mut ImGuiTypingSelectRequest;
}
unsafe extern "C" {
    pub fn igTypingSelectFindMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTypingSelectFindNextSingleCharMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTypingSelectFindBestLeadingMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igSetWindowClipRectBeforeSetChannel(window: *mut ImGuiWindow, clip_rect: ImRect);
}
unsafe extern "C" {
    pub fn igBeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
unsafe extern "C" {
    pub fn igEndColumns();
}
unsafe extern "C" {
    pub fn igPushColumnClipRect(column_index: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igPushColumnsBackground();
}
unsafe extern "C" {
    pub fn igPopColumnsBackground();
}
unsafe extern "C" {
    pub fn igGetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igFindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID) -> *mut ImGuiOldColumns;
}
unsafe extern "C" {
    pub fn igGetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
unsafe extern "C" {
    pub fn igGetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
unsafe extern "C" {
    pub fn igTableOpenContextMenu(column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igTableSetColumnWidth(column_n: ::std::os::raw::c_int, width: f32);
}
unsafe extern "C" {
    pub fn igTableSetColumnSortDirection(
        column_n: ::std::os::raw::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
unsafe extern "C" {
    pub fn igTableGetHoveredColumn() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTableGetHoveredRow() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTableGetHeaderRowHeight() -> f32;
}
unsafe extern "C" {
    pub fn igTableGetHeaderAngledMaxLabelWidth() -> f32;
}
unsafe extern "C" {
    pub fn igTablePushBackgroundChannel();
}
unsafe extern "C" {
    pub fn igTablePopBackgroundChannel();
}
unsafe extern "C" {
    pub fn igTableAngledHeadersRowEx(angle: f32, label_width: f32);
}
unsafe extern "C" {
    pub fn igGetCurrentTable() -> *mut ImGuiTable;
}
unsafe extern "C" {
    pub fn igTableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
unsafe extern "C" {
    pub fn igBeginTableEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igTableBeginApplyRequests(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableSetupDrawChannels(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableUpdateLayout(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableUpdateBorders(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableDrawBorders(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableDrawDefaultContextMenu(
        table: *mut ImGuiTable,
        flags_for_section_to_display: ImGuiTableFlags,
    );
}
unsafe extern "C" {
    pub fn igTableBeginContextMenuPopup(table: *mut ImGuiTable) -> bool;
}
unsafe extern "C" {
    pub fn igTableMergeDrawChannels(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGetInstanceData(
        table: *mut ImGuiTable,
        instance_no: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableInstanceData;
}
unsafe extern "C" {
    pub fn igTableGetInstanceID(
        table: *mut ImGuiTable,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igTableSortSpecsSanitize(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableSortSpecsBuild(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGetColumnNextSortDirection(column: *mut ImGuiTableColumn) -> ImGuiSortDirection;
}
unsafe extern "C" {
    pub fn igTableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
unsafe extern "C" {
    pub fn igTableGetColumnWidthAuto(table: *mut ImGuiTable, column: *mut ImGuiTableColumn) -> f32;
}
unsafe extern "C" {
    pub fn igTableBeginRow(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableEndRow(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableBeginCell(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igTableEndCell(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGetCellBgRect(
        pOut: *mut ImRect,
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igTableGetColumnName_TablePtr(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igTableGetColumnResizeID(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igTableGetMaxColumnWidth(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> f32;
}
unsafe extern "C" {
    pub fn igTableSetColumnWidthAutoSingle(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn igTableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableRemove(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGcCompactTransientBuffers_TablePtr(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGcCompactTransientBuffers_TableTempDataPtr(table: *mut ImGuiTableTempData);
}
unsafe extern "C" {
    pub fn igTableGcCompactSettings();
}
unsafe extern "C" {
    pub fn igTableLoadSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableSaveSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableResetSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igTableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    pub fn igTableSettingsAddSettingsHandler();
}
unsafe extern "C" {
    pub fn igTableSettingsCreate(
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    pub fn igTableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    pub fn igGetCurrentTabBar() -> *mut ImGuiTabBar;
}
unsafe extern "C" {
    pub fn igBeginTabBarEx(tab_bar: *mut ImGuiTabBar, bb: ImRect, flags: ImGuiTabBarFlags) -> bool;
}
unsafe extern "C" {
    pub fn igTabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    pub fn igTabBarFindTabByOrder(
        tab_bar: *mut ImGuiTabBar,
        order: ::std::os::raw::c_int,
    ) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    pub fn igTabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    pub fn igTabBarGetCurrentTab(tab_bar: *mut ImGuiTabBar) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    pub fn igTabBarGetTabOrder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igTabBarGetTabName(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igTabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    pub fn igTabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igTabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
unsafe extern "C" {
    pub fn igTabBarQueueFocus(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
unsafe extern "C" {
    pub fn igTabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        offset: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn igTabBarQueueReorderFromMousePos(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        mouse_pos: ImVec2,
    );
}
unsafe extern "C" {
    pub fn igTabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
unsafe extern "C" {
    pub fn igTabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTabItemCalcSize_Str(
        pOut: *mut ImVec2,
        label: *const ::std::os::raw::c_char,
        has_close_button_or_unsaved_marker: bool,
    );
}
unsafe extern "C" {
    pub fn igTabItemCalcSize_WindowPtr(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igTabItemBackground(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn igTabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
unsafe extern "C" {
    pub fn igRenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
unsafe extern "C" {
    pub fn igRenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
unsafe extern "C" {
    pub fn igRenderTextClipped(
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
unsafe extern "C" {
    pub fn igRenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
unsafe extern "C" {
    pub fn igRenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
unsafe extern "C" {
    pub fn igRenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        border: bool,
        rounding: f32,
    );
}
unsafe extern "C" {
    pub fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
unsafe extern "C" {
    pub fn igRenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    pub fn igRenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
unsafe extern "C" {
    pub fn igFindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn igRenderMouseCursor(
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
unsafe extern "C" {
    pub fn igRenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
unsafe extern "C" {
    pub fn igRenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
unsafe extern "C" {
    pub fn igRenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
unsafe extern "C" {
    pub fn igRenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
unsafe extern "C" {
    pub fn igRenderArrowDockMenu(draw_list: *mut ImDrawList, p_min: ImVec2, sz: f32, col: ImU32);
}
unsafe extern "C" {
    pub fn igRenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
unsafe extern "C" {
    pub fn igRenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
unsafe extern "C" {
    pub fn igCalcRoundingFlagsForRectInRect(
        r_in: ImRect,
        r_outer: ImRect,
        threshold: f32,
    ) -> ImDrawFlags;
}
unsafe extern "C" {
    pub fn igTextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
unsafe extern "C" {
    pub fn igButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        image_size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSeparatorEx(flags: ImGuiSeparatorFlags, thickness: f32);
}
unsafe extern "C" {
    pub fn igSeparatorTextEx(
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
        extra_width: f32,
    );
}
unsafe extern "C" {
    pub fn igCheckboxFlags_S64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImS64,
        flags_value: ImS64,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCheckboxFlags_U64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImU64,
        flags_value: ImU64,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igCloseButton(id: ImGuiID, pos: ImVec2) -> bool;
}
unsafe extern "C" {
    pub fn igCollapseButton(id: ImGuiID, pos: ImVec2, dock_node: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    pub fn igScrollbar(axis: ImGuiAxis);
}
unsafe extern "C" {
    pub fn igScrollbarEx(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut ImS64,
        avail_v: ImS64,
        contents_v: ImS64,
        flags: ImDrawFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igGetWindowScrollbarRect(pOut: *mut ImRect, window: *mut ImGuiWindow, axis: ImGuiAxis);
}
unsafe extern "C" {
    pub fn igGetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetWindowResizeCornerID(window: *mut ImGuiWindow, n: ::std::os::raw::c_int)
        -> ImGuiID;
}
unsafe extern "C" {
    pub fn igGetWindowResizeBorderID(window: *mut ImGuiWindow, dir: ImGuiDir) -> ImGuiID;
}
unsafe extern "C" {
    pub fn igButtonBehavior(
        bb: ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSliderBehavior(
        bb: ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igSplitterBehavior(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
        bg_col: ImU32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTreePushOverrideID(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igTreeNodeSetOpen(id: ImGuiID, open: bool);
}
unsafe extern "C" {
    pub fn igTreeNodeUpdateNextOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
unsafe extern "C" {
    pub fn igSetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
unsafe extern "C" {
    pub fn igDataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
unsafe extern "C" {
    pub fn igDataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igDataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igDataTypeApplyFromText(
        buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igDataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igDataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igInputTextDeactivateHook(id: ImGuiID);
}
unsafe extern "C" {
    pub fn igTempInputText(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTempInputScalar(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn igTempInputIsActive(id: ImGuiID) -> bool;
}
unsafe extern "C" {
    pub fn igGetInputTextState(id: ImGuiID) -> *mut ImGuiInputTextState;
}
unsafe extern "C" {
    pub fn igColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
unsafe extern "C" {
    pub fn igColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    pub fn igColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    pub fn igPlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        size_arg: ImVec2,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn igShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
unsafe extern "C" {
    pub fn igShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        clamp: bool,
    );
}
unsafe extern "C" {
    pub fn igShadeVertsTransformPos(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        pivot_in: ImVec2,
        cos_a: f32,
        sin_a: f32,
        pivot_out: ImVec2,
    );
}
unsafe extern "C" {
    pub fn igGcCompactTransientMiscBuffers();
}
unsafe extern "C" {
    pub fn igGcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igGcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    pub fn igDebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn igDebugLogV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn igDebugAllocHook(
        info: *mut ImGuiDebugAllocInfo,
        frame_count: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn igErrorCheckEndFrameRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igErrorCheckEndWindowRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igErrorCheckUsingSetCursorPosToExtendParentBoundaries();
}
unsafe extern "C" {
    pub fn igDebugDrawCursorPos(col: ImU32);
}
unsafe extern "C" {
    pub fn igDebugDrawLineExtents(col: ImU32);
}
unsafe extern "C" {
    pub fn igDebugDrawItemRect(col: ImU32);
}
unsafe extern "C" {
    pub fn igDebugLocateItem(target_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igDebugLocateItemOnHover(target_id: ImGuiID);
}
unsafe extern "C" {
    pub fn igDebugLocateItemResolveWithLastItem();
}
unsafe extern "C" {
    pub fn igDebugStartItemPicker();
}
unsafe extern "C" {
    pub fn igShowFontAtlas(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn igDebugHookIdInfo(
        id: ImGuiID,
        data_type: ImGuiDataType,
        data_id: *const ::std::os::raw::c_void,
        data_id_end: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igDebugNodeColumns(columns: *mut ImGuiOldColumns);
}
unsafe extern "C" {
    pub fn igDebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igDebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
unsafe extern "C" {
    pub fn igDebugNodeFont(font: *mut ImFont);
}
unsafe extern "C" {
    pub fn igDebugNodeFontGlyph(font: *mut ImFont, glyph: *const ImFontGlyph);
}
unsafe extern "C" {
    pub fn igDebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDebugNodeTable(table: *mut ImGuiTable);
}
unsafe extern "C" {
    pub fn igDebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
unsafe extern "C" {
    pub fn igDebugNodeInputTextState(state: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    pub fn igDebugNodeTypingSelectState(state: *mut ImGuiTypingSelectState);
}
unsafe extern "C" {
    pub fn igDebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn igDebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
unsafe extern "C" {
    pub fn igDebugNodeWindowsList(
        windows: *mut ImVector_ImGuiWindowPtr,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn igDebugNodeWindowsListByBeginStackParent(
        windows: *mut *mut ImGuiWindow,
        windows_size: ::std::os::raw::c_int,
        parent_in_begin_stack: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    pub fn igDebugNodeViewport(viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    pub fn igDebugRenderKeyboardPreview(draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    pub fn igDebugRenderViewportThumbnail(
        draw_list: *mut ImDrawList,
        viewport: *mut ImGuiViewportP,
        bb: ImRect,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasGetBuilderForStbTruetype() -> *const ImFontBuilderIO;
}
unsafe extern "C" {
    pub fn igImFontAtlasUpdateConfigDataPointers(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildRender8bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildRender32bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
unsafe extern "C" {
    pub fn igImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = "hand written functions"]
    pub fn igLogText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn ImGuiTextBuffer_appendf(
        buffer: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn igGET_FLT_MAX() -> f32;
}
unsafe extern "C" {
    pub fn igGET_FLT_MIN() -> f32;
}
unsafe extern "C" {
    pub fn ImVector_ImWchar_create() -> *mut ImVector_ImWchar;
}
unsafe extern "C" {
    pub fn ImVector_ImWchar_destroy(self_: *mut ImVector_ImWchar);
}
unsafe extern "C" {
    pub fn ImVector_ImWchar_Init(p: *mut ImVector_ImWchar);
}
unsafe extern "C" {
    pub fn ImVector_ImWchar_UnInit(p: *mut ImVector_ImWchar);
}
pub const SIMGUI_INVALID_ID: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_image_t {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_image_t"][::std::mem::size_of::<simgui_image_t>() - 4usize];
    ["Alignment of simgui_image_t"][::std::mem::align_of::<simgui_image_t>() - 4usize];
    ["Offset of field: simgui_image_t::id"][::std::mem::offset_of!(simgui_image_t, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_image_desc_t {
    pub image: sg_image,
    pub sampler: sg_sampler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_image_desc_t"][::std::mem::size_of::<simgui_image_desc_t>() - 8usize];
    ["Alignment of simgui_image_desc_t"][::std::mem::align_of::<simgui_image_desc_t>() - 4usize];
    ["Offset of field: simgui_image_desc_t::image"]
        [::std::mem::offset_of!(simgui_image_desc_t, image) - 0usize];
    ["Offset of field: simgui_image_desc_t::sampler"]
        [::std::mem::offset_of!(simgui_image_desc_t, sampler) - 4usize];
};
pub const simgui_log_item_t_SIMGUI_LOGITEM_OK: simgui_log_item_t = 0;
pub const simgui_log_item_t_SIMGUI_LOGITEM_MALLOC_FAILED: simgui_log_item_t = 1;
pub const simgui_log_item_t_SIMGUI_LOGITEM_IMAGE_POOL_EXHAUSTED: simgui_log_item_t = 2;
pub type simgui_log_item_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_allocator_t {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_allocator_t"][::std::mem::size_of::<simgui_allocator_t>() - 12usize];
    ["Alignment of simgui_allocator_t"][::std::mem::align_of::<simgui_allocator_t>() - 4usize];
    ["Offset of field: simgui_allocator_t::alloc_fn"]
        [::std::mem::offset_of!(simgui_allocator_t, alloc_fn) - 0usize];
    ["Offset of field: simgui_allocator_t::free_fn"]
        [::std::mem::offset_of!(simgui_allocator_t, free_fn) - 4usize];
    ["Offset of field: simgui_allocator_t::user_data"]
        [::std::mem::offset_of!(simgui_allocator_t, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_logger_t {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_logger_t"][::std::mem::size_of::<simgui_logger_t>() - 8usize];
    ["Alignment of simgui_logger_t"][::std::mem::align_of::<simgui_logger_t>() - 4usize];
    ["Offset of field: simgui_logger_t::func"]
        [::std::mem::offset_of!(simgui_logger_t, func) - 0usize];
    ["Offset of field: simgui_logger_t::user_data"]
        [::std::mem::offset_of!(simgui_logger_t, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_desc_t {
    pub max_vertices: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub ini_filename: *const ::std::os::raw::c_char,
    pub no_default_font: bool,
    pub disable_paste_override: bool,
    pub disable_set_mouse_cursor: bool,
    pub disable_windows_resize_from_edges: bool,
    pub write_alpha_channel: bool,
    pub allocator: simgui_allocator_t,
    pub logger: simgui_logger_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_desc_t"][::std::mem::size_of::<simgui_desc_t>() - 52usize];
    ["Alignment of simgui_desc_t"][::std::mem::align_of::<simgui_desc_t>() - 4usize];
    ["Offset of field: simgui_desc_t::max_vertices"]
        [::std::mem::offset_of!(simgui_desc_t, max_vertices) - 0usize];
    ["Offset of field: simgui_desc_t::image_pool_size"]
        [::std::mem::offset_of!(simgui_desc_t, image_pool_size) - 4usize];
    ["Offset of field: simgui_desc_t::color_format"]
        [::std::mem::offset_of!(simgui_desc_t, color_format) - 8usize];
    ["Offset of field: simgui_desc_t::depth_format"]
        [::std::mem::offset_of!(simgui_desc_t, depth_format) - 12usize];
    ["Offset of field: simgui_desc_t::sample_count"]
        [::std::mem::offset_of!(simgui_desc_t, sample_count) - 16usize];
    ["Offset of field: simgui_desc_t::ini_filename"]
        [::std::mem::offset_of!(simgui_desc_t, ini_filename) - 20usize];
    ["Offset of field: simgui_desc_t::no_default_font"]
        [::std::mem::offset_of!(simgui_desc_t, no_default_font) - 24usize];
    ["Offset of field: simgui_desc_t::disable_paste_override"]
        [::std::mem::offset_of!(simgui_desc_t, disable_paste_override) - 25usize];
    ["Offset of field: simgui_desc_t::disable_set_mouse_cursor"]
        [::std::mem::offset_of!(simgui_desc_t, disable_set_mouse_cursor) - 26usize];
    ["Offset of field: simgui_desc_t::disable_windows_resize_from_edges"]
        [::std::mem::offset_of!(simgui_desc_t, disable_windows_resize_from_edges) - 27usize];
    ["Offset of field: simgui_desc_t::write_alpha_channel"]
        [::std::mem::offset_of!(simgui_desc_t, write_alpha_channel) - 28usize];
    ["Offset of field: simgui_desc_t::allocator"]
        [::std::mem::offset_of!(simgui_desc_t, allocator) - 32usize];
    ["Offset of field: simgui_desc_t::logger"]
        [::std::mem::offset_of!(simgui_desc_t, logger) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_frame_desc_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub delta_time: f64,
    pub dpi_scale: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_frame_desc_t"][::std::mem::size_of::<simgui_frame_desc_t>() - 24usize];
    ["Alignment of simgui_frame_desc_t"][::std::mem::align_of::<simgui_frame_desc_t>() - 8usize];
    ["Offset of field: simgui_frame_desc_t::width"]
        [::std::mem::offset_of!(simgui_frame_desc_t, width) - 0usize];
    ["Offset of field: simgui_frame_desc_t::height"]
        [::std::mem::offset_of!(simgui_frame_desc_t, height) - 4usize];
    ["Offset of field: simgui_frame_desc_t::delta_time"]
        [::std::mem::offset_of!(simgui_frame_desc_t, delta_time) - 8usize];
    ["Offset of field: simgui_frame_desc_t::dpi_scale"]
        [::std::mem::offset_of!(simgui_frame_desc_t, dpi_scale) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct simgui_font_tex_desc_t {
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of simgui_font_tex_desc_t"][::std::mem::size_of::<simgui_font_tex_desc_t>() - 8usize];
    ["Alignment of simgui_font_tex_desc_t"]
        [::std::mem::align_of::<simgui_font_tex_desc_t>() - 4usize];
    ["Offset of field: simgui_font_tex_desc_t::min_filter"]
        [::std::mem::offset_of!(simgui_font_tex_desc_t, min_filter) - 0usize];
    ["Offset of field: simgui_font_tex_desc_t::mag_filter"]
        [::std::mem::offset_of!(simgui_font_tex_desc_t, mag_filter) - 4usize];
};
unsafe extern "C" {
    pub fn simgui_setup(desc: *const simgui_desc_t);
}
unsafe extern "C" {
    pub fn simgui_new_frame(desc: *const simgui_frame_desc_t);
}
unsafe extern "C" {
    pub fn simgui_render();
}
unsafe extern "C" {
    pub fn simgui_make_image(desc: *const simgui_image_desc_t) -> simgui_image_t;
}
unsafe extern "C" {
    pub fn simgui_destroy_image(img: simgui_image_t);
}
unsafe extern "C" {
    pub fn simgui_query_image_desc(img: simgui_image_t) -> simgui_image_desc_t;
}
unsafe extern "C" {
    pub fn simgui_imtextureid(img: simgui_image_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn simgui_image_from_imtextureid(
        imtextureid: *mut ::std::os::raw::c_void,
    ) -> simgui_image_t;
}
unsafe extern "C" {
    pub fn simgui_add_focus_event(focus: bool);
}
unsafe extern "C" {
    pub fn simgui_add_mouse_pos_event(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn simgui_add_touch_pos_event(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn simgui_add_mouse_button_event(mouse_button: ::std::os::raw::c_int, down: bool);
}
unsafe extern "C" {
    pub fn simgui_add_mouse_wheel_event(wheel_x: f32, wheel_y: f32);
}
unsafe extern "C" {
    pub fn simgui_add_key_event(
        map_keycode: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
        keycode: ::std::os::raw::c_int,
        down: bool,
    );
}
unsafe extern "C" {
    pub fn simgui_add_input_character(c: u32);
}
unsafe extern "C" {
    pub fn simgui_add_input_characters_utf8(c: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn simgui_add_touch_button_event(mouse_button: ::std::os::raw::c_int, down: bool);
}
unsafe extern "C" {
    pub fn simgui_handle_event(ev: *const sapp_event) -> bool;
}
unsafe extern "C" {
    pub fn simgui_map_keycode(keycode: sapp_keycode) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn simgui_shutdown();
}
unsafe extern "C" {
    pub fn simgui_create_fonts_texture(desc: *const simgui_font_tex_desc_t);
}
unsafe extern "C" {
    pub fn simgui_destroy_fonts_texture();
}
pub const sgp_error_SGP_NO_ERROR: sgp_error = 0;
pub const sgp_error_SGP_ERROR_SOKOL_INVALID: sgp_error = 1;
pub const sgp_error_SGP_ERROR_VERTICES_FULL: sgp_error = 2;
pub const sgp_error_SGP_ERROR_UNIFORMS_FULL: sgp_error = 3;
pub const sgp_error_SGP_ERROR_COMMANDS_FULL: sgp_error = 4;
pub const sgp_error_SGP_ERROR_VERTICES_OVERFLOW: sgp_error = 5;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_OVERFLOW: sgp_error = 6;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_UNDERFLOW: sgp_error = 7;
pub const sgp_error_SGP_ERROR_STATE_STACK_OVERFLOW: sgp_error = 8;
pub const sgp_error_SGP_ERROR_STATE_STACK_UNDERFLOW: sgp_error = 9;
pub const sgp_error_SGP_ERROR_ALLOC_FAILED: sgp_error = 10;
pub const sgp_error_SGP_ERROR_MAKE_VERTEX_BUFFER_FAILED: sgp_error = 11;
pub const sgp_error_SGP_ERROR_MAKE_WHITE_IMAGE_FAILED: sgp_error = 12;
pub const sgp_error_SGP_ERROR_MAKE_NEAREST_SAMPLER_FAILED: sgp_error = 13;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_SHADER_FAILED: sgp_error = 14;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_PIPELINE_FAILED: sgp_error = 15;
pub type sgp_error = ::std::os::raw::c_int;
pub const sgp_blend_mode_SGP_BLENDMODE_NONE: sgp_blend_mode = 0;
pub const sgp_blend_mode_SGP_BLENDMODE_BLEND: sgp_blend_mode = 1;
pub const sgp_blend_mode_SGP_BLENDMODE_ADD: sgp_blend_mode = 2;
pub const sgp_blend_mode_SGP_BLENDMODE_MOD: sgp_blend_mode = 3;
pub const sgp_blend_mode_SGP_BLENDMODE_MUL: sgp_blend_mode = 4;
pub const sgp_blend_mode__SGP_BLENDMODE_NUM: sgp_blend_mode = 5;
pub type sgp_blend_mode = ::std::os::raw::c_int;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COORD: sgp_vs_attr_location = 0;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COLOR: sgp_vs_attr_location = 1;
pub type sgp_vs_attr_location = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_isize {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_isize"][::std::mem::size_of::<sgp_isize>() - 8usize];
    ["Alignment of sgp_isize"][::std::mem::align_of::<sgp_isize>() - 4usize];
    ["Offset of field: sgp_isize::w"][::std::mem::offset_of!(sgp_isize, w) - 0usize];
    ["Offset of field: sgp_isize::h"][::std::mem::offset_of!(sgp_isize, h) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_irect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_irect"][::std::mem::size_of::<sgp_irect>() - 16usize];
    ["Alignment of sgp_irect"][::std::mem::align_of::<sgp_irect>() - 4usize];
    ["Offset of field: sgp_irect::x"][::std::mem::offset_of!(sgp_irect, x) - 0usize];
    ["Offset of field: sgp_irect::y"][::std::mem::offset_of!(sgp_irect, y) - 4usize];
    ["Offset of field: sgp_irect::w"][::std::mem::offset_of!(sgp_irect, w) - 8usize];
    ["Offset of field: sgp_irect::h"][::std::mem::offset_of!(sgp_irect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_rect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_rect"][::std::mem::size_of::<sgp_rect>() - 16usize];
    ["Alignment of sgp_rect"][::std::mem::align_of::<sgp_rect>() - 4usize];
    ["Offset of field: sgp_rect::x"][::std::mem::offset_of!(sgp_rect, x) - 0usize];
    ["Offset of field: sgp_rect::y"][::std::mem::offset_of!(sgp_rect, y) - 4usize];
    ["Offset of field: sgp_rect::w"][::std::mem::offset_of!(sgp_rect, w) - 8usize];
    ["Offset of field: sgp_rect::h"][::std::mem::offset_of!(sgp_rect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textured_rect {
    pub dst: sgp_rect,
    pub src: sgp_rect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textured_rect"][::std::mem::size_of::<sgp_textured_rect>() - 32usize];
    ["Alignment of sgp_textured_rect"][::std::mem::align_of::<sgp_textured_rect>() - 4usize];
    ["Offset of field: sgp_textured_rect::dst"]
        [::std::mem::offset_of!(sgp_textured_rect, dst) - 0usize];
    ["Offset of field: sgp_textured_rect::src"]
        [::std::mem::offset_of!(sgp_textured_rect, src) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vec2"][::std::mem::size_of::<sgp_vec2>() - 8usize];
    ["Alignment of sgp_vec2"][::std::mem::align_of::<sgp_vec2>() - 4usize];
    ["Offset of field: sgp_vec2::x"][::std::mem::offset_of!(sgp_vec2, x) - 0usize];
    ["Offset of field: sgp_vec2::y"][::std::mem::offset_of!(sgp_vec2, y) - 4usize];
};
pub type sgp_point = sgp_vec2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_line {
    pub a: sgp_point,
    pub b: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_line"][::std::mem::size_of::<sgp_line>() - 16usize];
    ["Alignment of sgp_line"][::std::mem::align_of::<sgp_line>() - 4usize];
    ["Offset of field: sgp_line::a"][::std::mem::offset_of!(sgp_line, a) - 0usize];
    ["Offset of field: sgp_line::b"][::std::mem::offset_of!(sgp_line, b) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_triangle {
    pub a: sgp_point,
    pub b: sgp_point,
    pub c: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_triangle"][::std::mem::size_of::<sgp_triangle>() - 24usize];
    ["Alignment of sgp_triangle"][::std::mem::align_of::<sgp_triangle>() - 4usize];
    ["Offset of field: sgp_triangle::a"][::std::mem::offset_of!(sgp_triangle, a) - 0usize];
    ["Offset of field: sgp_triangle::b"][::std::mem::offset_of!(sgp_triangle, b) - 8usize];
    ["Offset of field: sgp_triangle::c"][::std::mem::offset_of!(sgp_triangle, c) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_mat2x3 {
    pub v: [[f32; 3usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_mat2x3"][::std::mem::size_of::<sgp_mat2x3>() - 24usize];
    ["Alignment of sgp_mat2x3"][::std::mem::align_of::<sgp_mat2x3>() - 4usize];
    ["Offset of field: sgp_mat2x3::v"][::std::mem::offset_of!(sgp_mat2x3, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color"][::std::mem::size_of::<sgp_color>() - 16usize];
    ["Alignment of sgp_color"][::std::mem::align_of::<sgp_color>() - 4usize];
    ["Offset of field: sgp_color::r"][::std::mem::offset_of!(sgp_color, r) - 0usize];
    ["Offset of field: sgp_color::g"][::std::mem::offset_of!(sgp_color, g) - 4usize];
    ["Offset of field: sgp_color::b"][::std::mem::offset_of!(sgp_color, b) - 8usize];
    ["Offset of field: sgp_color::a"][::std::mem::offset_of!(sgp_color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color_ub4 {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color_ub4"][::std::mem::size_of::<sgp_color_ub4>() - 4usize];
    ["Alignment of sgp_color_ub4"][::std::mem::align_of::<sgp_color_ub4>() - 1usize];
    ["Offset of field: sgp_color_ub4::r"][::std::mem::offset_of!(sgp_color_ub4, r) - 0usize];
    ["Offset of field: sgp_color_ub4::g"][::std::mem::offset_of!(sgp_color_ub4, g) - 1usize];
    ["Offset of field: sgp_color_ub4::b"][::std::mem::offset_of!(sgp_color_ub4, b) - 2usize];
    ["Offset of field: sgp_color_ub4::a"][::std::mem::offset_of!(sgp_color_ub4, a) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vertex {
    pub position: sgp_vec2,
    pub texcoord: sgp_vec2,
    pub color: sgp_color_ub4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vertex"][::std::mem::size_of::<sgp_vertex>() - 20usize];
    ["Alignment of sgp_vertex"][::std::mem::align_of::<sgp_vertex>() - 4usize];
    ["Offset of field: sgp_vertex::position"]
        [::std::mem::offset_of!(sgp_vertex, position) - 0usize];
    ["Offset of field: sgp_vertex::texcoord"]
        [::std::mem::offset_of!(sgp_vertex, texcoord) - 8usize];
    ["Offset of field: sgp_vertex::color"][::std::mem::offset_of!(sgp_vertex, color) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_uniform {
    pub size: u32,
    pub content: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_uniform"][::std::mem::size_of::<sgp_uniform>() - 20usize];
    ["Alignment of sgp_uniform"][::std::mem::align_of::<sgp_uniform>() - 4usize];
    ["Offset of field: sgp_uniform::size"][::std::mem::offset_of!(sgp_uniform, size) - 0usize];
    ["Offset of field: sgp_uniform::content"]
        [::std::mem::offset_of!(sgp_uniform, content) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textures_uniform {
    pub count: u32,
    pub images: [sg_image; 4usize],
    pub samplers: [sg_sampler; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textures_uniform"][::std::mem::size_of::<sgp_textures_uniform>() - 36usize];
    ["Alignment of sgp_textures_uniform"][::std::mem::align_of::<sgp_textures_uniform>() - 4usize];
    ["Offset of field: sgp_textures_uniform::count"]
        [::std::mem::offset_of!(sgp_textures_uniform, count) - 0usize];
    ["Offset of field: sgp_textures_uniform::images"]
        [::std::mem::offset_of!(sgp_textures_uniform, images) - 4usize];
    ["Offset of field: sgp_textures_uniform::samplers"]
        [::std::mem::offset_of!(sgp_textures_uniform, samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_state {
    pub frame_size: sgp_isize,
    pub viewport: sgp_irect,
    pub scissor: sgp_irect,
    pub proj: sgp_mat2x3,
    pub transform: sgp_mat2x3,
    pub mvp: sgp_mat2x3,
    pub thickness: f32,
    pub color: sgp_color_ub4,
    pub textures: sgp_textures_uniform,
    pub uniform: sgp_uniform,
    pub blend_mode: sgp_blend_mode,
    pub pipeline: sg_pipeline,
    pub _base_vertex: u32,
    pub _base_uniform: u32,
    pub _base_command: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_state"][::std::mem::size_of::<sgp_state>() - 196usize];
    ["Alignment of sgp_state"][::std::mem::align_of::<sgp_state>() - 4usize];
    ["Offset of field: sgp_state::frame_size"]
        [::std::mem::offset_of!(sgp_state, frame_size) - 0usize];
    ["Offset of field: sgp_state::viewport"][::std::mem::offset_of!(sgp_state, viewport) - 8usize];
    ["Offset of field: sgp_state::scissor"][::std::mem::offset_of!(sgp_state, scissor) - 24usize];
    ["Offset of field: sgp_state::proj"][::std::mem::offset_of!(sgp_state, proj) - 40usize];
    ["Offset of field: sgp_state::transform"]
        [::std::mem::offset_of!(sgp_state, transform) - 64usize];
    ["Offset of field: sgp_state::mvp"][::std::mem::offset_of!(sgp_state, mvp) - 88usize];
    ["Offset of field: sgp_state::thickness"]
        [::std::mem::offset_of!(sgp_state, thickness) - 112usize];
    ["Offset of field: sgp_state::color"][::std::mem::offset_of!(sgp_state, color) - 116usize];
    ["Offset of field: sgp_state::textures"]
        [::std::mem::offset_of!(sgp_state, textures) - 120usize];
    ["Offset of field: sgp_state::uniform"][::std::mem::offset_of!(sgp_state, uniform) - 156usize];
    ["Offset of field: sgp_state::blend_mode"]
        [::std::mem::offset_of!(sgp_state, blend_mode) - 176usize];
    ["Offset of field: sgp_state::pipeline"]
        [::std::mem::offset_of!(sgp_state, pipeline) - 180usize];
    ["Offset of field: sgp_state::_base_vertex"]
        [::std::mem::offset_of!(sgp_state, _base_vertex) - 184usize];
    ["Offset of field: sgp_state::_base_uniform"]
        [::std::mem::offset_of!(sgp_state, _base_uniform) - 188usize];
    ["Offset of field: sgp_state::_base_command"]
        [::std::mem::offset_of!(sgp_state, _base_command) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_desc {
    pub max_vertices: u32,
    pub max_commands: u32,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_desc"][::std::mem::size_of::<sgp_desc>() - 20usize];
    ["Alignment of sgp_desc"][::std::mem::align_of::<sgp_desc>() - 4usize];
    ["Offset of field: sgp_desc::max_vertices"]
        [::std::mem::offset_of!(sgp_desc, max_vertices) - 0usize];
    ["Offset of field: sgp_desc::max_commands"]
        [::std::mem::offset_of!(sgp_desc, max_commands) - 4usize];
    ["Offset of field: sgp_desc::color_format"]
        [::std::mem::offset_of!(sgp_desc, color_format) - 8usize];
    ["Offset of field: sgp_desc::depth_format"]
        [::std::mem::offset_of!(sgp_desc, depth_format) - 12usize];
    ["Offset of field: sgp_desc::sample_count"]
        [::std::mem::offset_of!(sgp_desc, sample_count) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_pipeline_desc {
    pub shader: sg_shader,
    pub primitive_type: sg_primitive_type,
    pub blend_mode: sgp_blend_mode,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub has_vs_color: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_pipeline_desc"][::std::mem::size_of::<sgp_pipeline_desc>() - 28usize];
    ["Alignment of sgp_pipeline_desc"][::std::mem::align_of::<sgp_pipeline_desc>() - 4usize];
    ["Offset of field: sgp_pipeline_desc::shader"]
        [::std::mem::offset_of!(sgp_pipeline_desc, shader) - 0usize];
    ["Offset of field: sgp_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sgp_pipeline_desc, primitive_type) - 4usize];
    ["Offset of field: sgp_pipeline_desc::blend_mode"]
        [::std::mem::offset_of!(sgp_pipeline_desc, blend_mode) - 8usize];
    ["Offset of field: sgp_pipeline_desc::color_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, color_format) - 12usize];
    ["Offset of field: sgp_pipeline_desc::depth_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, depth_format) - 16usize];
    ["Offset of field: sgp_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sgp_pipeline_desc, sample_count) - 20usize];
    ["Offset of field: sgp_pipeline_desc::has_vs_color"]
        [::std::mem::offset_of!(sgp_pipeline_desc, has_vs_color) - 24usize];
};
unsafe extern "C" {
    pub fn sgp_setup(desc: *const sgp_desc);
}
unsafe extern "C" {
    pub fn sgp_shutdown();
}
unsafe extern "C" {
    pub fn sgp_is_valid() -> bool;
}
unsafe extern "C" {
    pub fn sgp_get_last_error() -> sgp_error;
}
unsafe extern "C" {
    pub fn sgp_get_error_message(error: sgp_error) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sgp_make_pipeline(desc: *const sgp_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sgp_begin(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_flush();
}
unsafe extern "C" {
    pub fn sgp_end();
}
unsafe extern "C" {
    pub fn sgp_project(left: f32, right: f32, top: f32, bottom: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_project();
}
unsafe extern "C" {
    pub fn sgp_push_transform();
}
unsafe extern "C" {
    pub fn sgp_pop_transform();
}
unsafe extern "C" {
    pub fn sgp_reset_transform();
}
unsafe extern "C" {
    pub fn sgp_translate(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate(theta: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate_at(theta: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_scale(sx: f32, sy: f32);
}
unsafe extern "C" {
    pub fn sgp_scale_at(sx: f32, sy: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_set_pipeline(pipeline: sg_pipeline);
}
unsafe extern "C" {
    pub fn sgp_reset_pipeline();
}
unsafe extern "C" {
    pub fn sgp_set_uniform(data: *const ::std::os::raw::c_void, size: u32);
}
unsafe extern "C" {
    pub fn sgp_reset_uniform();
}
unsafe extern "C" {
    pub fn sgp_set_blend_mode(blend_mode: sgp_blend_mode);
}
unsafe extern "C" {
    pub fn sgp_reset_blend_mode();
}
unsafe extern "C" {
    pub fn sgp_set_color(r: f32, g: f32, b: f32, a: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_color();
}
unsafe extern "C" {
    pub fn sgp_set_image(channel: ::std::os::raw::c_int, image: sg_image);
}
unsafe extern "C" {
    pub fn sgp_unset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_reset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_set_sampler(channel: ::std::os::raw::c_int, sampler: sg_sampler);
}
unsafe extern "C" {
    pub fn sgp_reset_sampler(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_viewport();
}
unsafe extern "C" {
    pub fn sgp_scissor(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_scissor();
}
unsafe extern "C" {
    pub fn sgp_reset_state();
}
unsafe extern "C" {
    pub fn sgp_clear();
}
unsafe extern "C" {
    pub fn sgp_draw(primitive_type: sg_primitive_type, vertices: *const sgp_vertex, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_points(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_point(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines(lines: *const sgp_line, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_line(ax: f32, ay: f32, bx: f32, by: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles(triangles: *const sgp_triangle, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangle(ax: f32, ay: f32, bx: f32, by: f32, cx: f32, cy: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rects(rects: *const sgp_rect, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rect(x: f32, y: f32, w: f32, h: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rects(
        channel: ::std::os::raw::c_int,
        rects: *const sgp_textured_rect,
        count: u32,
    );
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rect(
        channel: ::std::os::raw::c_int,
        dest_rect: sgp_rect,
        src_rect: sgp_rect,
    );
}
unsafe extern "C" {
    pub fn sgp_query_state() -> *mut sgp_state;
}
unsafe extern "C" {
    pub fn sgp_query_desc() -> sgp_desc;
}
pub const STBI_default: _bindgen_ty_6 = 0;
pub const STBI_grey: _bindgen_ty_6 = 1;
pub const STBI_grey_alpha: _bindgen_ty_6 = 2;
pub const STBI_rgb: _bindgen_ty_6 = 3;
pub const STBI_rgb_alpha: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
unsafe extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn wcstod(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
unsafe extern "C" {
    pub fn _wcstod_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstol(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wcstol_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoll(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoll_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _wcstoul_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoull_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstold(_String: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
unsafe extern "C" {
    pub fn _wcstold_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(_String: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
unsafe extern "C" {
    pub fn _wcstof_l(_String: *const u16, _EndPtr: *mut *mut u16, _Locale: _locale_t) -> f32;
}
unsafe extern "C" {
    pub fn _wtof(_String: *const u16) -> f64;
}
unsafe extern "C" {
    pub fn _wtof_l(_String: *const u16, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtoi(_String: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtoi_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtol(_String: *const u16) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtol_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtoll(_String: *const u16) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoll_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wtoi64(_String: *const u16) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoi64_l(_String: *const u16, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoui64(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoui64_l(
        _String: *const u16,
        _EndPtr: *mut *mut u16,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wfullpath(_Buffer: *mut u16, _Path: *const u16, _BufferCount: usize) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut u16,
        _BufferCount: usize,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut u16,
        _Drive: *const u16,
        _Dir: *const u16,
        _Filename: *const u16,
        _Ext: *const u16,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _Dir: *mut u16,
        _Filename: *mut u16,
        _Ext: *mut u16,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const u16,
        _Drive: *mut u16,
        _DriveCount: usize,
        _Dir: *mut u16,
        _DirCount: usize,
        _Filename: *mut u16,
        _FilenameCount: usize,
        _Ext: *mut u16,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut u16,
        _BufferCount: *mut usize,
        _VarName: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wgetenv(_VarName: *const u16) -> *mut u16;
}
unsafe extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut u16,
        _BufferCount: usize,
        _VarName: *const u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wputenv(_EnvString: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wputenv_s(_Name: *const u16, _Value: *const u16) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const u16,
        _VarName: *const u16,
        _Buffer: *mut u16,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv(_Filename: *const u16, _VarName: *const u16, _ResultPath: *mut u16);
}
unsafe extern "C" {
    pub fn _wsystem(_Command: *const u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const u16,
        arg2: *const u16,
        arg3: *const u16,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
unsafe extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut u16;
}
unsafe extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut u16) -> errno_t;
}
unsafe extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
unsafe extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
unsafe extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut u16,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn mbstowcs(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut u16,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut u16,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: u16,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: u16,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const u16,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const u16,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut u16;
}
unsafe extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut u16;
}
unsafe extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub type stbi_uc = ::std::os::raw::c_uchar;
pub type stbi_us = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbi_io_callbacks {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, n: ::std::os::raw::c_int),
    >,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbi_io_callbacks"][::std::mem::size_of::<stbi_io_callbacks>() - 12usize];
    ["Alignment of stbi_io_callbacks"][::std::mem::align_of::<stbi_io_callbacks>() - 4usize];
    ["Offset of field: stbi_io_callbacks::read"]
        [::std::mem::offset_of!(stbi_io_callbacks, read) - 0usize];
    ["Offset of field: stbi_io_callbacks::skip"]
        [::std::mem::offset_of!(stbi_io_callbacks, skip) - 4usize];
    ["Offset of field: stbi_io_callbacks::eof"]
        [::std::mem::offset_of!(stbi_io_callbacks, eof) - 8usize];
};
unsafe extern "C" {
    pub fn stbi_load_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_gif_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        delays: *mut *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        z: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
        req_comp: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_from_file_16(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_failure_reason() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_image_free(retval_from_stbi_load: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn stbi_info_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load_thread(
        flag_true_if_should_unpremultiply: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb_thread(
        flag_true_if_should_convert: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize_headerflag(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
        parse_header: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
