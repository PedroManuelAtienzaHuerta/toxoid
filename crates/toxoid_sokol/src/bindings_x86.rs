/* automatically generated by rust-bindgen 0.71.1 */

pub const SOKOL_APP_INCLUDED: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SOKOL_LOG_INCLUDED: u32 = 1;
pub const SOKOL_TIME_INCLUDED: u32 = 1;
pub const SOKOL_GFX_INCLUDED: u32 = 1;
pub const SOKOL_GP_INCLUDED: u32 = 1;
pub const SGP_BATCH_OPTIMIZER_DEPTH: u32 = 8;
pub const SGP_UNIFORM_CONTENT_SLOTS: u32 = 4;
pub const SGP_TEXTURE_SLOTS: u32 = 4;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 2] = b"_\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const STBI_VERSION: u32 = 1;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
pub type __vcrt_bool = bool;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __report_gsfailure() -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const SAPP_MAX_TOUCHPOINTS: _bindgen_ty_1 = 8;
pub const SAPP_MAX_MOUSEBUTTONS: _bindgen_ty_1 = 3;
pub const SAPP_MAX_KEYCODES: _bindgen_ty_1 = 512;
pub const SAPP_MAX_ICONIMAGES: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const sapp_event_type_SAPP_EVENTTYPE_INVALID: sapp_event_type = 0;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_DOWN: sapp_event_type = 1;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_UP: sapp_event_type = 2;
pub const sapp_event_type_SAPP_EVENTTYPE_CHAR: sapp_event_type = 3;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_DOWN: sapp_event_type = 4;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_UP: sapp_event_type = 5;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_SCROLL: sapp_event_type = 6;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_MOVE: sapp_event_type = 7;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_ENTER: sapp_event_type = 8;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_LEAVE: sapp_event_type = 9;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_BEGAN: sapp_event_type = 10;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_MOVED: sapp_event_type = 11;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_ENDED: sapp_event_type = 12;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_CANCELLED: sapp_event_type = 13;
pub const sapp_event_type_SAPP_EVENTTYPE_RESIZED: sapp_event_type = 14;
pub const sapp_event_type_SAPP_EVENTTYPE_ICONIFIED: sapp_event_type = 15;
pub const sapp_event_type_SAPP_EVENTTYPE_RESTORED: sapp_event_type = 16;
pub const sapp_event_type_SAPP_EVENTTYPE_FOCUSED: sapp_event_type = 17;
pub const sapp_event_type_SAPP_EVENTTYPE_UNFOCUSED: sapp_event_type = 18;
pub const sapp_event_type_SAPP_EVENTTYPE_SUSPENDED: sapp_event_type = 19;
pub const sapp_event_type_SAPP_EVENTTYPE_RESUMED: sapp_event_type = 20;
pub const sapp_event_type_SAPP_EVENTTYPE_QUIT_REQUESTED: sapp_event_type = 21;
pub const sapp_event_type_SAPP_EVENTTYPE_CLIPBOARD_PASTED: sapp_event_type = 22;
pub const sapp_event_type_SAPP_EVENTTYPE_FILES_DROPPED: sapp_event_type = 23;
pub const sapp_event_type__SAPP_EVENTTYPE_NUM: sapp_event_type = 24;
pub const sapp_event_type__SAPP_EVENTTYPE_FORCE_U32: sapp_event_type = 2147483647;
pub type sapp_event_type = ::std::os::raw::c_int;
pub const sapp_keycode_SAPP_KEYCODE_INVALID: sapp_keycode = 0;
pub const sapp_keycode_SAPP_KEYCODE_SPACE: sapp_keycode = 32;
pub const sapp_keycode_SAPP_KEYCODE_APOSTROPHE: sapp_keycode = 39;
pub const sapp_keycode_SAPP_KEYCODE_COMMA: sapp_keycode = 44;
pub const sapp_keycode_SAPP_KEYCODE_MINUS: sapp_keycode = 45;
pub const sapp_keycode_SAPP_KEYCODE_PERIOD: sapp_keycode = 46;
pub const sapp_keycode_SAPP_KEYCODE_SLASH: sapp_keycode = 47;
pub const sapp_keycode_SAPP_KEYCODE_0: sapp_keycode = 48;
pub const sapp_keycode_SAPP_KEYCODE_1: sapp_keycode = 49;
pub const sapp_keycode_SAPP_KEYCODE_2: sapp_keycode = 50;
pub const sapp_keycode_SAPP_KEYCODE_3: sapp_keycode = 51;
pub const sapp_keycode_SAPP_KEYCODE_4: sapp_keycode = 52;
pub const sapp_keycode_SAPP_KEYCODE_5: sapp_keycode = 53;
pub const sapp_keycode_SAPP_KEYCODE_6: sapp_keycode = 54;
pub const sapp_keycode_SAPP_KEYCODE_7: sapp_keycode = 55;
pub const sapp_keycode_SAPP_KEYCODE_8: sapp_keycode = 56;
pub const sapp_keycode_SAPP_KEYCODE_9: sapp_keycode = 57;
pub const sapp_keycode_SAPP_KEYCODE_SEMICOLON: sapp_keycode = 59;
pub const sapp_keycode_SAPP_KEYCODE_EQUAL: sapp_keycode = 61;
pub const sapp_keycode_SAPP_KEYCODE_A: sapp_keycode = 65;
pub const sapp_keycode_SAPP_KEYCODE_B: sapp_keycode = 66;
pub const sapp_keycode_SAPP_KEYCODE_C: sapp_keycode = 67;
pub const sapp_keycode_SAPP_KEYCODE_D: sapp_keycode = 68;
pub const sapp_keycode_SAPP_KEYCODE_E: sapp_keycode = 69;
pub const sapp_keycode_SAPP_KEYCODE_F: sapp_keycode = 70;
pub const sapp_keycode_SAPP_KEYCODE_G: sapp_keycode = 71;
pub const sapp_keycode_SAPP_KEYCODE_H: sapp_keycode = 72;
pub const sapp_keycode_SAPP_KEYCODE_I: sapp_keycode = 73;
pub const sapp_keycode_SAPP_KEYCODE_J: sapp_keycode = 74;
pub const sapp_keycode_SAPP_KEYCODE_K: sapp_keycode = 75;
pub const sapp_keycode_SAPP_KEYCODE_L: sapp_keycode = 76;
pub const sapp_keycode_SAPP_KEYCODE_M: sapp_keycode = 77;
pub const sapp_keycode_SAPP_KEYCODE_N: sapp_keycode = 78;
pub const sapp_keycode_SAPP_KEYCODE_O: sapp_keycode = 79;
pub const sapp_keycode_SAPP_KEYCODE_P: sapp_keycode = 80;
pub const sapp_keycode_SAPP_KEYCODE_Q: sapp_keycode = 81;
pub const sapp_keycode_SAPP_KEYCODE_R: sapp_keycode = 82;
pub const sapp_keycode_SAPP_KEYCODE_S: sapp_keycode = 83;
pub const sapp_keycode_SAPP_KEYCODE_T: sapp_keycode = 84;
pub const sapp_keycode_SAPP_KEYCODE_U: sapp_keycode = 85;
pub const sapp_keycode_SAPP_KEYCODE_V: sapp_keycode = 86;
pub const sapp_keycode_SAPP_KEYCODE_W: sapp_keycode = 87;
pub const sapp_keycode_SAPP_KEYCODE_X: sapp_keycode = 88;
pub const sapp_keycode_SAPP_KEYCODE_Y: sapp_keycode = 89;
pub const sapp_keycode_SAPP_KEYCODE_Z: sapp_keycode = 90;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_BRACKET: sapp_keycode = 91;
pub const sapp_keycode_SAPP_KEYCODE_BACKSLASH: sapp_keycode = 92;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_BRACKET: sapp_keycode = 93;
pub const sapp_keycode_SAPP_KEYCODE_GRAVE_ACCENT: sapp_keycode = 96;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_1: sapp_keycode = 161;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_2: sapp_keycode = 162;
pub const sapp_keycode_SAPP_KEYCODE_ESCAPE: sapp_keycode = 256;
pub const sapp_keycode_SAPP_KEYCODE_ENTER: sapp_keycode = 257;
pub const sapp_keycode_SAPP_KEYCODE_TAB: sapp_keycode = 258;
pub const sapp_keycode_SAPP_KEYCODE_BACKSPACE: sapp_keycode = 259;
pub const sapp_keycode_SAPP_KEYCODE_INSERT: sapp_keycode = 260;
pub const sapp_keycode_SAPP_KEYCODE_DELETE: sapp_keycode = 261;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT: sapp_keycode = 262;
pub const sapp_keycode_SAPP_KEYCODE_LEFT: sapp_keycode = 263;
pub const sapp_keycode_SAPP_KEYCODE_DOWN: sapp_keycode = 264;
pub const sapp_keycode_SAPP_KEYCODE_UP: sapp_keycode = 265;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_UP: sapp_keycode = 266;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_DOWN: sapp_keycode = 267;
pub const sapp_keycode_SAPP_KEYCODE_HOME: sapp_keycode = 268;
pub const sapp_keycode_SAPP_KEYCODE_END: sapp_keycode = 269;
pub const sapp_keycode_SAPP_KEYCODE_CAPS_LOCK: sapp_keycode = 280;
pub const sapp_keycode_SAPP_KEYCODE_SCROLL_LOCK: sapp_keycode = 281;
pub const sapp_keycode_SAPP_KEYCODE_NUM_LOCK: sapp_keycode = 282;
pub const sapp_keycode_SAPP_KEYCODE_PRINT_SCREEN: sapp_keycode = 283;
pub const sapp_keycode_SAPP_KEYCODE_PAUSE: sapp_keycode = 284;
pub const sapp_keycode_SAPP_KEYCODE_F1: sapp_keycode = 290;
pub const sapp_keycode_SAPP_KEYCODE_F2: sapp_keycode = 291;
pub const sapp_keycode_SAPP_KEYCODE_F3: sapp_keycode = 292;
pub const sapp_keycode_SAPP_KEYCODE_F4: sapp_keycode = 293;
pub const sapp_keycode_SAPP_KEYCODE_F5: sapp_keycode = 294;
pub const sapp_keycode_SAPP_KEYCODE_F6: sapp_keycode = 295;
pub const sapp_keycode_SAPP_KEYCODE_F7: sapp_keycode = 296;
pub const sapp_keycode_SAPP_KEYCODE_F8: sapp_keycode = 297;
pub const sapp_keycode_SAPP_KEYCODE_F9: sapp_keycode = 298;
pub const sapp_keycode_SAPP_KEYCODE_F10: sapp_keycode = 299;
pub const sapp_keycode_SAPP_KEYCODE_F11: sapp_keycode = 300;
pub const sapp_keycode_SAPP_KEYCODE_F12: sapp_keycode = 301;
pub const sapp_keycode_SAPP_KEYCODE_F13: sapp_keycode = 302;
pub const sapp_keycode_SAPP_KEYCODE_F14: sapp_keycode = 303;
pub const sapp_keycode_SAPP_KEYCODE_F15: sapp_keycode = 304;
pub const sapp_keycode_SAPP_KEYCODE_F16: sapp_keycode = 305;
pub const sapp_keycode_SAPP_KEYCODE_F17: sapp_keycode = 306;
pub const sapp_keycode_SAPP_KEYCODE_F18: sapp_keycode = 307;
pub const sapp_keycode_SAPP_KEYCODE_F19: sapp_keycode = 308;
pub const sapp_keycode_SAPP_KEYCODE_F20: sapp_keycode = 309;
pub const sapp_keycode_SAPP_KEYCODE_F21: sapp_keycode = 310;
pub const sapp_keycode_SAPP_KEYCODE_F22: sapp_keycode = 311;
pub const sapp_keycode_SAPP_KEYCODE_F23: sapp_keycode = 312;
pub const sapp_keycode_SAPP_KEYCODE_F24: sapp_keycode = 313;
pub const sapp_keycode_SAPP_KEYCODE_F25: sapp_keycode = 314;
pub const sapp_keycode_SAPP_KEYCODE_KP_0: sapp_keycode = 320;
pub const sapp_keycode_SAPP_KEYCODE_KP_1: sapp_keycode = 321;
pub const sapp_keycode_SAPP_KEYCODE_KP_2: sapp_keycode = 322;
pub const sapp_keycode_SAPP_KEYCODE_KP_3: sapp_keycode = 323;
pub const sapp_keycode_SAPP_KEYCODE_KP_4: sapp_keycode = 324;
pub const sapp_keycode_SAPP_KEYCODE_KP_5: sapp_keycode = 325;
pub const sapp_keycode_SAPP_KEYCODE_KP_6: sapp_keycode = 326;
pub const sapp_keycode_SAPP_KEYCODE_KP_7: sapp_keycode = 327;
pub const sapp_keycode_SAPP_KEYCODE_KP_8: sapp_keycode = 328;
pub const sapp_keycode_SAPP_KEYCODE_KP_9: sapp_keycode = 329;
pub const sapp_keycode_SAPP_KEYCODE_KP_DECIMAL: sapp_keycode = 330;
pub const sapp_keycode_SAPP_KEYCODE_KP_DIVIDE: sapp_keycode = 331;
pub const sapp_keycode_SAPP_KEYCODE_KP_MULTIPLY: sapp_keycode = 332;
pub const sapp_keycode_SAPP_KEYCODE_KP_SUBTRACT: sapp_keycode = 333;
pub const sapp_keycode_SAPP_KEYCODE_KP_ADD: sapp_keycode = 334;
pub const sapp_keycode_SAPP_KEYCODE_KP_ENTER: sapp_keycode = 335;
pub const sapp_keycode_SAPP_KEYCODE_KP_EQUAL: sapp_keycode = 336;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SHIFT: sapp_keycode = 340;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_CONTROL: sapp_keycode = 341;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_ALT: sapp_keycode = 342;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SUPER: sapp_keycode = 343;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SHIFT: sapp_keycode = 344;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_CONTROL: sapp_keycode = 345;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_ALT: sapp_keycode = 346;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SUPER: sapp_keycode = 347;
pub const sapp_keycode_SAPP_KEYCODE_MENU: sapp_keycode = 348;
pub type sapp_keycode = ::std::os::raw::c_int;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_UNKNOWN: sapp_android_tooltype = 0;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_FINGER: sapp_android_tooltype = 1;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_STYLUS: sapp_android_tooltype = 2;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_MOUSE: sapp_android_tooltype = 3;
pub type sapp_android_tooltype = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_touchpoint {
    pub identifier: usize,
    pub pos_x: f32,
    pub pos_y: f32,
    pub android_tooltype: sapp_android_tooltype,
    pub changed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_touchpoint"][::std::mem::size_of::<sapp_touchpoint>() - 20usize];
    ["Alignment of sapp_touchpoint"][::std::mem::align_of::<sapp_touchpoint>() - 4usize];
    ["Offset of field: sapp_touchpoint::identifier"]
        [::std::mem::offset_of!(sapp_touchpoint, identifier) - 0usize];
    ["Offset of field: sapp_touchpoint::pos_x"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_x) - 4usize];
    ["Offset of field: sapp_touchpoint::pos_y"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_y) - 8usize];
    ["Offset of field: sapp_touchpoint::android_tooltype"]
        [::std::mem::offset_of!(sapp_touchpoint, android_tooltype) - 12usize];
    ["Offset of field: sapp_touchpoint::changed"]
        [::std::mem::offset_of!(sapp_touchpoint, changed) - 16usize];
};
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_LEFT: sapp_mousebutton = 0;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_RIGHT: sapp_mousebutton = 1;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_MIDDLE: sapp_mousebutton = 2;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_INVALID: sapp_mousebutton = 256;
pub type sapp_mousebutton = ::std::os::raw::c_int;
pub const SAPP_MODIFIER_SHIFT: _bindgen_ty_2 = 1;
pub const SAPP_MODIFIER_CTRL: _bindgen_ty_2 = 2;
pub const SAPP_MODIFIER_ALT: _bindgen_ty_2 = 4;
pub const SAPP_MODIFIER_SUPER: _bindgen_ty_2 = 8;
pub const SAPP_MODIFIER_LMB: _bindgen_ty_2 = 256;
pub const SAPP_MODIFIER_RMB: _bindgen_ty_2 = 512;
pub const SAPP_MODIFIER_MMB: _bindgen_ty_2 = 1024;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_event {
    pub frame_count: u64,
    pub type_: sapp_event_type,
    pub key_code: sapp_keycode,
    pub char_code: u32,
    pub key_repeat: bool,
    pub modifiers: u32,
    pub mouse_button: sapp_mousebutton,
    pub mouse_x: f32,
    pub mouse_y: f32,
    pub mouse_dx: f32,
    pub mouse_dy: f32,
    pub scroll_x: f32,
    pub scroll_y: f32,
    pub num_touches: ::std::os::raw::c_int,
    pub touches: [sapp_touchpoint; 8usize],
    pub window_width: ::std::os::raw::c_int,
    pub window_height: ::std::os::raw::c_int,
    pub framebuffer_width: ::std::os::raw::c_int,
    pub framebuffer_height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_event"][::std::mem::size_of::<sapp_event>() - 240usize];
    ["Alignment of sapp_event"][::std::mem::align_of::<sapp_event>() - 8usize];
    ["Offset of field: sapp_event::frame_count"]
        [::std::mem::offset_of!(sapp_event, frame_count) - 0usize];
    ["Offset of field: sapp_event::type_"][::std::mem::offset_of!(sapp_event, type_) - 8usize];
    ["Offset of field: sapp_event::key_code"]
        [::std::mem::offset_of!(sapp_event, key_code) - 12usize];
    ["Offset of field: sapp_event::char_code"]
        [::std::mem::offset_of!(sapp_event, char_code) - 16usize];
    ["Offset of field: sapp_event::key_repeat"]
        [::std::mem::offset_of!(sapp_event, key_repeat) - 20usize];
    ["Offset of field: sapp_event::modifiers"]
        [::std::mem::offset_of!(sapp_event, modifiers) - 24usize];
    ["Offset of field: sapp_event::mouse_button"]
        [::std::mem::offset_of!(sapp_event, mouse_button) - 28usize];
    ["Offset of field: sapp_event::mouse_x"][::std::mem::offset_of!(sapp_event, mouse_x) - 32usize];
    ["Offset of field: sapp_event::mouse_y"][::std::mem::offset_of!(sapp_event, mouse_y) - 36usize];
    ["Offset of field: sapp_event::mouse_dx"]
        [::std::mem::offset_of!(sapp_event, mouse_dx) - 40usize];
    ["Offset of field: sapp_event::mouse_dy"]
        [::std::mem::offset_of!(sapp_event, mouse_dy) - 44usize];
    ["Offset of field: sapp_event::scroll_x"]
        [::std::mem::offset_of!(sapp_event, scroll_x) - 48usize];
    ["Offset of field: sapp_event::scroll_y"]
        [::std::mem::offset_of!(sapp_event, scroll_y) - 52usize];
    ["Offset of field: sapp_event::num_touches"]
        [::std::mem::offset_of!(sapp_event, num_touches) - 56usize];
    ["Offset of field: sapp_event::touches"][::std::mem::offset_of!(sapp_event, touches) - 60usize];
    ["Offset of field: sapp_event::window_width"]
        [::std::mem::offset_of!(sapp_event, window_width) - 220usize];
    ["Offset of field: sapp_event::window_height"]
        [::std::mem::offset_of!(sapp_event, window_height) - 224usize];
    ["Offset of field: sapp_event::framebuffer_width"]
        [::std::mem::offset_of!(sapp_event, framebuffer_width) - 228usize];
    ["Offset of field: sapp_event::framebuffer_height"]
        [::std::mem::offset_of!(sapp_event, framebuffer_height) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_range"][::std::mem::size_of::<sapp_range>() - 8usize];
    ["Alignment of sapp_range"][::std::mem::align_of::<sapp_range>() - 4usize];
    ["Offset of field: sapp_range::ptr"][::std::mem::offset_of!(sapp_range, ptr) - 0usize];
    ["Offset of field: sapp_range::size"][::std::mem::offset_of!(sapp_range, size) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_image_desc {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: sapp_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_image_desc"][::std::mem::size_of::<sapp_image_desc>() - 16usize];
    ["Alignment of sapp_image_desc"][::std::mem::align_of::<sapp_image_desc>() - 4usize];
    ["Offset of field: sapp_image_desc::width"]
        [::std::mem::offset_of!(sapp_image_desc, width) - 0usize];
    ["Offset of field: sapp_image_desc::height"]
        [::std::mem::offset_of!(sapp_image_desc, height) - 4usize];
    ["Offset of field: sapp_image_desc::pixels"]
        [::std::mem::offset_of!(sapp_image_desc, pixels) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_icon_desc {
    pub sokol_default: bool,
    pub images: [sapp_image_desc; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_icon_desc"][::std::mem::size_of::<sapp_icon_desc>() - 132usize];
    ["Alignment of sapp_icon_desc"][::std::mem::align_of::<sapp_icon_desc>() - 4usize];
    ["Offset of field: sapp_icon_desc::sokol_default"]
        [::std::mem::offset_of!(sapp_icon_desc, sokol_default) - 0usize];
    ["Offset of field: sapp_icon_desc::images"]
        [::std::mem::offset_of!(sapp_icon_desc, images) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_allocator"][::std::mem::size_of::<sapp_allocator>() - 12usize];
    ["Alignment of sapp_allocator"][::std::mem::align_of::<sapp_allocator>() - 4usize];
    ["Offset of field: sapp_allocator::alloc_fn"]
        [::std::mem::offset_of!(sapp_allocator, alloc_fn) - 0usize];
    ["Offset of field: sapp_allocator::free_fn"]
        [::std::mem::offset_of!(sapp_allocator, free_fn) - 4usize];
    ["Offset of field: sapp_allocator::user_data"]
        [::std::mem::offset_of!(sapp_allocator, user_data) - 8usize];
};
pub const sapp_log_item_SAPP_LOGITEM_OK: sapp_log_item = 0;
pub const sapp_log_item_SAPP_LOGITEM_MALLOC_FAILED: sapp_log_item = 1;
pub const sapp_log_item_SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE: sapp_log_item = 2;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED: sapp_log_item = 3;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED: sapp_log_item = 4;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED: sapp_log_item = 5;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED: sapp_log_item = 6;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED: sapp_log_item = 7;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED: sapp_log_item = 8;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED: sapp_log_item = 9;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED: sapp_log_item = 10;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED: sapp_log_item = 11;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED: sapp_log_item = 12;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED: sapp_log_item = 13;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED: sapp_log_item =
    14;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED: sapp_log_item = 15;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED: sapp_log_item = 16;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT: sapp_log_item = 17;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER: sapp_log_item =
    18;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED:
    sapp_log_item = 19;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED: sapp_log_item = 20;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED: sapp_log_item = 21;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED:
    sapp_log_item = 22;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK:
    sapp_log_item = 23;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK:
    sapp_log_item = 24;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED: sapp_log_item = 25;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED: sapp_log_item = 26;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED: sapp_log_item = 27;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND: sapp_log_item = 28;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED: sapp_log_item = 29;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW: sapp_log_item = 30;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS: sapp_log_item = 31;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG: sapp_log_item = 32;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED: sapp_log_item = 33;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING: sapp_log_item = 34;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED: sapp_log_item = 35;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED: sapp_log_item = 36;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED: sapp_log_item = 37;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED: sapp_log_item = 38;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED: sapp_log_item = 39;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED: sapp_log_item = 40;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED: sapp_log_item = 41;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS: sapp_log_item = 42;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL: sapp_log_item = 43;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED: sapp_log_item = 44;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED: sapp_log_item = 45;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED: sapp_log_item = 46;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED: sapp_log_item = 47;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED: sapp_log_item = 48;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED: sapp_log_item = 49;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME: sapp_log_item = 50;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB: sapp_log_item = 51;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB: sapp_log_item = 52;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_READ_MSG_FAILED: sapp_log_item = 53;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED: sapp_log_item = 54;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_CREATE: sapp_log_item = 55;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_RESUME: sapp_log_item = 56;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_PAUSE: sapp_log_item = 57;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_FOCUS: sapp_log_item = 58;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS: sapp_log_item = 59;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW: sapp_log_item = 60;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE: sapp_log_item = 61;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_DESTROY: sapp_log_item = 62;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNKNOWN_MSG: sapp_log_item = 63;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED: sapp_log_item = 64;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE: sapp_log_item = 65;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART: sapp_log_item = 66;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME: sapp_log_item = 67;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE: sapp_log_item =
    68;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED: sapp_log_item =
    69;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE: sapp_log_item = 70;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP: sapp_log_item = 71;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED: sapp_log_item =
    72;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED:
    sapp_log_item = 73;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED: sapp_log_item =
    74;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED: sapp_log_item =
    75;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED: sapp_log_item =
    76;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY: sapp_log_item = 77;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY: sapp_log_item = 78;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE: sapp_log_item = 79;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE: sapp_log_item = 80;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED: sapp_log_item = 81;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS: sapp_log_item = 82;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED: sapp_log_item = 83;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SWAPCHAIN_FAILED: sapp_log_item = 84;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED:
    sapp_log_item = 85;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED:
    sapp_log_item = 86;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED: sapp_log_item = 87;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED: sapp_log_item = 88;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_ERROR: sapp_log_item = 89;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_UNKNOWN: sapp_log_item = 90;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE: sapp_log_item = 91;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_ERROR: sapp_log_item = 92;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN: sapp_log_item = 93;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_CREATE_INSTANCE_FAILED: sapp_log_item = 94;
pub const sapp_log_item_SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH: sapp_log_item = 95;
pub const sapp_log_item_SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG: sapp_log_item = 96;
pub const sapp_log_item_SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG: sapp_log_item = 97;
pub type sapp_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_logger"][::std::mem::size_of::<sapp_logger>() - 8usize];
    ["Alignment of sapp_logger"][::std::mem::align_of::<sapp_logger>() - 4usize];
    ["Offset of field: sapp_logger::func"][::std::mem::offset_of!(sapp_logger, func) - 0usize];
    ["Offset of field: sapp_logger::user_data"]
        [::std::mem::offset_of!(sapp_logger, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_desc {
    pub init_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub frame_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub cleanup_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub event_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_event)>,
    pub user_data: *mut ::std::os::raw::c_void,
    pub init_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub frame_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub cleanup_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub event_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const sapp_event, arg2: *mut ::std::os::raw::c_void),
    >,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub swap_interval: ::std::os::raw::c_int,
    pub high_dpi: bool,
    pub fullscreen: bool,
    pub alpha: bool,
    pub window_title: *const ::std::os::raw::c_char,
    pub enable_clipboard: bool,
    pub clipboard_size: ::std::os::raw::c_int,
    pub enable_dragndrop: bool,
    pub max_dropped_files: ::std::os::raw::c_int,
    pub max_dropped_file_path_length: ::std::os::raw::c_int,
    pub icon: sapp_icon_desc,
    pub allocator: sapp_allocator,
    pub logger: sapp_logger,
    pub gl_major_version: ::std::os::raw::c_int,
    pub gl_minor_version: ::std::os::raw::c_int,
    pub win32_console_utf8: bool,
    pub win32_console_create: bool,
    pub win32_console_attach: bool,
    pub html5_canvas_name: *const ::std::os::raw::c_char,
    pub html5_canvas_resize: bool,
    pub html5_preserve_drawing_buffer: bool,
    pub html5_premultiplied_alpha: bool,
    pub html5_ask_leave_site: bool,
    pub html5_bubble_mouse_events: bool,
    pub html5_bubble_touch_events: bool,
    pub html5_bubble_wheel_events: bool,
    pub html5_bubble_key_events: bool,
    pub html5_bubble_char_events: bool,
    pub html5_use_emsc_set_main_loop: bool,
    pub html5_emsc_set_main_loop_simulate_infinite_loop: bool,
    pub ios_keyboard_resizes_canvas: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_desc"][::std::mem::size_of::<sapp_desc>() - 260usize];
    ["Alignment of sapp_desc"][::std::mem::align_of::<sapp_desc>() - 4usize];
    ["Offset of field: sapp_desc::init_cb"][::std::mem::offset_of!(sapp_desc, init_cb) - 0usize];
    ["Offset of field: sapp_desc::frame_cb"][::std::mem::offset_of!(sapp_desc, frame_cb) - 4usize];
    ["Offset of field: sapp_desc::cleanup_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_cb) - 8usize];
    ["Offset of field: sapp_desc::event_cb"][::std::mem::offset_of!(sapp_desc, event_cb) - 12usize];
    ["Offset of field: sapp_desc::user_data"]
        [::std::mem::offset_of!(sapp_desc, user_data) - 16usize];
    ["Offset of field: sapp_desc::init_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, init_userdata_cb) - 20usize];
    ["Offset of field: sapp_desc::frame_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, frame_userdata_cb) - 24usize];
    ["Offset of field: sapp_desc::cleanup_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_userdata_cb) - 28usize];
    ["Offset of field: sapp_desc::event_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, event_userdata_cb) - 32usize];
    ["Offset of field: sapp_desc::width"][::std::mem::offset_of!(sapp_desc, width) - 36usize];
    ["Offset of field: sapp_desc::height"][::std::mem::offset_of!(sapp_desc, height) - 40usize];
    ["Offset of field: sapp_desc::sample_count"]
        [::std::mem::offset_of!(sapp_desc, sample_count) - 44usize];
    ["Offset of field: sapp_desc::swap_interval"]
        [::std::mem::offset_of!(sapp_desc, swap_interval) - 48usize];
    ["Offset of field: sapp_desc::high_dpi"][::std::mem::offset_of!(sapp_desc, high_dpi) - 52usize];
    ["Offset of field: sapp_desc::fullscreen"]
        [::std::mem::offset_of!(sapp_desc, fullscreen) - 53usize];
    ["Offset of field: sapp_desc::alpha"][::std::mem::offset_of!(sapp_desc, alpha) - 54usize];
    ["Offset of field: sapp_desc::window_title"]
        [::std::mem::offset_of!(sapp_desc, window_title) - 56usize];
    ["Offset of field: sapp_desc::enable_clipboard"]
        [::std::mem::offset_of!(sapp_desc, enable_clipboard) - 60usize];
    ["Offset of field: sapp_desc::clipboard_size"]
        [::std::mem::offset_of!(sapp_desc, clipboard_size) - 64usize];
    ["Offset of field: sapp_desc::enable_dragndrop"]
        [::std::mem::offset_of!(sapp_desc, enable_dragndrop) - 68usize];
    ["Offset of field: sapp_desc::max_dropped_files"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_files) - 72usize];
    ["Offset of field: sapp_desc::max_dropped_file_path_length"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_file_path_length) - 76usize];
    ["Offset of field: sapp_desc::icon"][::std::mem::offset_of!(sapp_desc, icon) - 80usize];
    ["Offset of field: sapp_desc::allocator"]
        [::std::mem::offset_of!(sapp_desc, allocator) - 212usize];
    ["Offset of field: sapp_desc::logger"][::std::mem::offset_of!(sapp_desc, logger) - 224usize];
    ["Offset of field: sapp_desc::gl_major_version"]
        [::std::mem::offset_of!(sapp_desc, gl_major_version) - 232usize];
    ["Offset of field: sapp_desc::gl_minor_version"]
        [::std::mem::offset_of!(sapp_desc, gl_minor_version) - 236usize];
    ["Offset of field: sapp_desc::win32_console_utf8"]
        [::std::mem::offset_of!(sapp_desc, win32_console_utf8) - 240usize];
    ["Offset of field: sapp_desc::win32_console_create"]
        [::std::mem::offset_of!(sapp_desc, win32_console_create) - 241usize];
    ["Offset of field: sapp_desc::win32_console_attach"]
        [::std::mem::offset_of!(sapp_desc, win32_console_attach) - 242usize];
    ["Offset of field: sapp_desc::html5_canvas_name"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_name) - 244usize];
    ["Offset of field: sapp_desc::html5_canvas_resize"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_resize) - 248usize];
    ["Offset of field: sapp_desc::html5_preserve_drawing_buffer"]
        [::std::mem::offset_of!(sapp_desc, html5_preserve_drawing_buffer) - 249usize];
    ["Offset of field: sapp_desc::html5_premultiplied_alpha"]
        [::std::mem::offset_of!(sapp_desc, html5_premultiplied_alpha) - 250usize];
    ["Offset of field: sapp_desc::html5_ask_leave_site"]
        [::std::mem::offset_of!(sapp_desc, html5_ask_leave_site) - 251usize];
    ["Offset of field: sapp_desc::html5_bubble_mouse_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_mouse_events) - 252usize];
    ["Offset of field: sapp_desc::html5_bubble_touch_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_touch_events) - 253usize];
    ["Offset of field: sapp_desc::html5_bubble_wheel_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_wheel_events) - 254usize];
    ["Offset of field: sapp_desc::html5_bubble_key_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_key_events) - 255usize];
    ["Offset of field: sapp_desc::html5_bubble_char_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_char_events) - 256usize];
    ["Offset of field: sapp_desc::html5_use_emsc_set_main_loop"]
        [::std::mem::offset_of!(sapp_desc, html5_use_emsc_set_main_loop) - 257usize];
    ["Offset of field: sapp_desc::html5_emsc_set_main_loop_simulate_infinite_loop"][::std::mem::offset_of!(
        sapp_desc,
        html5_emsc_set_main_loop_simulate_infinite_loop
    ) - 258usize];
    ["Offset of field: sapp_desc::ios_keyboard_resizes_canvas"]
        [::std::mem::offset_of!(sapp_desc, ios_keyboard_resizes_canvas) - 259usize];
};
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_NO_ERROR: sapp_html5_fetch_error = 0;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL: sapp_html5_fetch_error =
    1;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_OTHER: sapp_html5_fetch_error = 2;
pub type sapp_html5_fetch_error = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_response {
    pub succeeded: bool,
    pub error_code: sapp_html5_fetch_error,
    pub file_index: ::std::os::raw::c_int,
    pub data: sapp_range,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_response"]
        [::std::mem::size_of::<sapp_html5_fetch_response>() - 32usize];
    ["Alignment of sapp_html5_fetch_response"]
        [::std::mem::align_of::<sapp_html5_fetch_response>() - 4usize];
    ["Offset of field: sapp_html5_fetch_response::succeeded"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, succeeded) - 0usize];
    ["Offset of field: sapp_html5_fetch_response::error_code"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, error_code) - 4usize];
    ["Offset of field: sapp_html5_fetch_response::file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, file_index) - 8usize];
    ["Offset of field: sapp_html5_fetch_response::data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, data) - 12usize];
    ["Offset of field: sapp_html5_fetch_response::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, buffer) - 20usize];
    ["Offset of field: sapp_html5_fetch_response::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, user_data) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_request {
    pub dropped_file_index: ::std::os::raw::c_int,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_html5_fetch_response)>,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_request"]
        [::std::mem::size_of::<sapp_html5_fetch_request>() - 20usize];
    ["Alignment of sapp_html5_fetch_request"]
        [::std::mem::align_of::<sapp_html5_fetch_request>() - 4usize];
    ["Offset of field: sapp_html5_fetch_request::dropped_file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, dropped_file_index) - 0usize];
    ["Offset of field: sapp_html5_fetch_request::callback"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, callback) - 4usize];
    ["Offset of field: sapp_html5_fetch_request::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, buffer) - 8usize];
    ["Offset of field: sapp_html5_fetch_request::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, user_data) - 16usize];
};
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_DEFAULT: sapp_mouse_cursor = 0;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_ARROW: sapp_mouse_cursor = 1;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_IBEAM: sapp_mouse_cursor = 2;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_CROSSHAIR: sapp_mouse_cursor = 3;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_POINTING_HAND: sapp_mouse_cursor = 4;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_EW: sapp_mouse_cursor = 5;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NS: sapp_mouse_cursor = 6;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NWSE: sapp_mouse_cursor = 7;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NESW: sapp_mouse_cursor = 8;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_ALL: sapp_mouse_cursor = 9;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_NOT_ALLOWED: sapp_mouse_cursor = 10;
pub const sapp_mouse_cursor__SAPP_MOUSECURSOR_NUM: sapp_mouse_cursor = 11;
pub type sapp_mouse_cursor = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn sokol_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sapp_width() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_widthf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_height() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_heightf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_color_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_depth_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_sample_count() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_high_dpi() -> bool;
}
unsafe extern "C" {
    pub fn sapp_dpi_scale() -> f32;
}
unsafe extern "C" {
    pub fn sapp_show_keyboard(show: bool);
}
unsafe extern "C" {
    pub fn sapp_keyboard_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_is_fullscreen() -> bool;
}
unsafe extern "C" {
    pub fn sapp_toggle_fullscreen();
}
unsafe extern "C" {
    pub fn sapp_show_mouse(show: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_lock_mouse(lock: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_locked() -> bool;
}
unsafe extern "C" {
    pub fn sapp_set_mouse_cursor(cursor: sapp_mouse_cursor);
}
unsafe extern "C" {
    pub fn sapp_get_mouse_cursor() -> sapp_mouse_cursor;
}
unsafe extern "C" {
    pub fn sapp_userdata() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_query_desc() -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_request_quit();
}
unsafe extern "C" {
    pub fn sapp_cancel_quit();
}
unsafe extern "C" {
    pub fn sapp_quit();
}
unsafe extern "C" {
    pub fn sapp_consume_event();
}
unsafe extern "C" {
    pub fn sapp_frame_count() -> u64;
}
unsafe extern "C" {
    pub fn sapp_frame_duration() -> f64;
}
unsafe extern "C" {
    pub fn sapp_set_clipboard_string(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_get_clipboard_string() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_set_window_title(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_set_icon(icon_desc: *const sapp_icon_desc);
}
unsafe extern "C" {
    pub fn sapp_get_num_dropped_files() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_get_dropped_file_path(
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_run(desc: *const sapp_desc);
}
unsafe extern "C" {
    pub fn sapp_egl_get_display() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_egl_get_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_html5_ask_leave_site(ask: bool);
}
unsafe extern "C" {
    pub fn sapp_html5_get_dropped_file_size(index: ::std::os::raw::c_int) -> u32;
}
unsafe extern "C" {
    pub fn sapp_html5_fetch_dropped_file(request: *const sapp_html5_fetch_request);
}
unsafe extern "C" {
    pub fn sapp_metal_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_current_drawable() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_depth_stencil_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_msaa_color_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_macos_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_ios_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_swap_chain() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_win32_get_hwnd() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_gl_get_framebuffer() -> u32;
}
unsafe extern "C" {
    pub fn sapp_android_get_native_activity() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slog_func(
        tag: *const ::std::os::raw::c_char,
        log_level: u32,
        log_item: u32,
        message: *const ::std::os::raw::c_char,
        line_nr: u32,
        filename: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn stm_setup();
}
unsafe extern "C" {
    pub fn stm_now() -> u64;
}
unsafe extern "C" {
    pub fn stm_diff(new_ticks: u64, old_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_since(start_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_laptime(last_time: *mut u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_round_to_common_refresh_rate(frame_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_sec(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ms(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_us(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ns(ticks: u64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer"][::std::mem::size_of::<sg_buffer>() - 4usize];
    ["Alignment of sg_buffer"][::std::mem::align_of::<sg_buffer>() - 4usize];
    ["Offset of field: sg_buffer::id"][::std::mem::offset_of!(sg_buffer, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image"][::std::mem::size_of::<sg_image>() - 4usize];
    ["Alignment of sg_image"][::std::mem::align_of::<sg_image>() - 4usize];
    ["Offset of field: sg_image::id"][::std::mem::offset_of!(sg_image, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler"][::std::mem::size_of::<sg_sampler>() - 4usize];
    ["Alignment of sg_sampler"][::std::mem::align_of::<sg_sampler>() - 4usize];
    ["Offset of field: sg_sampler::id"][::std::mem::offset_of!(sg_sampler, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader"][::std::mem::size_of::<sg_shader>() - 4usize];
    ["Alignment of sg_shader"][::std::mem::align_of::<sg_shader>() - 4usize];
    ["Offset of field: sg_shader::id"][::std::mem::offset_of!(sg_shader, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline"][::std::mem::size_of::<sg_pipeline>() - 4usize];
    ["Alignment of sg_pipeline"][::std::mem::align_of::<sg_pipeline>() - 4usize];
    ["Offset of field: sg_pipeline::id"][::std::mem::offset_of!(sg_pipeline, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments"][::std::mem::size_of::<sg_attachments>() - 4usize];
    ["Alignment of sg_attachments"][::std::mem::align_of::<sg_attachments>() - 4usize];
    ["Offset of field: sg_attachments::id"][::std::mem::offset_of!(sg_attachments, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_range"][::std::mem::size_of::<sg_range>() - 8usize];
    ["Alignment of sg_range"][::std::mem::align_of::<sg_range>() - 4usize];
    ["Offset of field: sg_range::ptr"][::std::mem::offset_of!(sg_range, ptr) - 0usize];
    ["Offset of field: sg_range::size"][::std::mem::offset_of!(sg_range, size) - 4usize];
};
pub const SG_INVALID_ID: _bindgen_ty_3 = 0;
pub const SG_NUM_SHADER_STAGES: _bindgen_ty_3 = 2;
pub const SG_NUM_INFLIGHT_FRAMES: _bindgen_ty_3 = 2;
pub const SG_MAX_COLOR_ATTACHMENTS: _bindgen_ty_3 = 4;
pub const SG_MAX_VERTEX_BUFFERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGES: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_SAMPLERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGESAMPLERPAIRS: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_UBS: _bindgen_ty_3 = 4;
pub const SG_MAX_UB_MEMBERS: _bindgen_ty_3 = 16;
pub const SG_MAX_VERTEX_ATTRIBUTES: _bindgen_ty_3 = 16;
pub const SG_MAX_MIPMAPS: _bindgen_ty_3 = 16;
pub const SG_MAX_TEXTUREARRAY_LAYERS: _bindgen_ty_3 = 128;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color"][::std::mem::size_of::<sg_color>() - 16usize];
    ["Alignment of sg_color"][::std::mem::align_of::<sg_color>() - 4usize];
    ["Offset of field: sg_color::r"][::std::mem::offset_of!(sg_color, r) - 0usize];
    ["Offset of field: sg_color::g"][::std::mem::offset_of!(sg_color, g) - 4usize];
    ["Offset of field: sg_color::b"][::std::mem::offset_of!(sg_color, b) - 8usize];
    ["Offset of field: sg_color::a"][::std::mem::offset_of!(sg_color, a) - 12usize];
};
pub const sg_backend_SG_BACKEND_GLCORE33: sg_backend = 0;
pub const sg_backend_SG_BACKEND_GLES3: sg_backend = 1;
pub const sg_backend_SG_BACKEND_D3D11: sg_backend = 2;
pub const sg_backend_SG_BACKEND_METAL_IOS: sg_backend = 3;
pub const sg_backend_SG_BACKEND_METAL_MACOS: sg_backend = 4;
pub const sg_backend_SG_BACKEND_METAL_SIMULATOR: sg_backend = 5;
pub const sg_backend_SG_BACKEND_WGPU: sg_backend = 6;
pub const sg_backend_SG_BACKEND_DUMMY: sg_backend = 7;
pub type sg_backend = ::std::os::raw::c_int;
pub const sg_pixel_format__SG_PIXELFORMAT_DEFAULT: sg_pixel_format = 0;
pub const sg_pixel_format_SG_PIXELFORMAT_NONE: sg_pixel_format = 1;
pub const sg_pixel_format_SG_PIXELFORMAT_R8: sg_pixel_format = 2;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SN: sg_pixel_format = 3;
pub const sg_pixel_format_SG_PIXELFORMAT_R8UI: sg_pixel_format = 4;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SI: sg_pixel_format = 5;
pub const sg_pixel_format_SG_PIXELFORMAT_R16: sg_pixel_format = 6;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SN: sg_pixel_format = 7;
pub const sg_pixel_format_SG_PIXELFORMAT_R16UI: sg_pixel_format = 8;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SI: sg_pixel_format = 9;
pub const sg_pixel_format_SG_PIXELFORMAT_R16F: sg_pixel_format = 10;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8: sg_pixel_format = 11;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SN: sg_pixel_format = 12;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8UI: sg_pixel_format = 13;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SI: sg_pixel_format = 14;
pub const sg_pixel_format_SG_PIXELFORMAT_R32UI: sg_pixel_format = 15;
pub const sg_pixel_format_SG_PIXELFORMAT_R32SI: sg_pixel_format = 16;
pub const sg_pixel_format_SG_PIXELFORMAT_R32F: sg_pixel_format = 17;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16: sg_pixel_format = 18;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SN: sg_pixel_format = 19;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16UI: sg_pixel_format = 20;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SI: sg_pixel_format = 21;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16F: sg_pixel_format = 22;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8: sg_pixel_format = 23;
pub const sg_pixel_format_SG_PIXELFORMAT_SRGB8A8: sg_pixel_format = 24;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SN: sg_pixel_format = 25;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8UI: sg_pixel_format = 26;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SI: sg_pixel_format = 27;
pub const sg_pixel_format_SG_PIXELFORMAT_BGRA8: sg_pixel_format = 28;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB10A2: sg_pixel_format = 29;
pub const sg_pixel_format_SG_PIXELFORMAT_RG11B10F: sg_pixel_format = 30;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB9E5: sg_pixel_format = 31;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32UI: sg_pixel_format = 32;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32SI: sg_pixel_format = 33;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32F: sg_pixel_format = 34;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16: sg_pixel_format = 35;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SN: sg_pixel_format = 36;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16UI: sg_pixel_format = 37;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SI: sg_pixel_format = 38;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16F: sg_pixel_format = 39;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32UI: sg_pixel_format = 40;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32SI: sg_pixel_format = 41;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32F: sg_pixel_format = 42;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH: sg_pixel_format = 43;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH_STENCIL: sg_pixel_format = 44;
pub const sg_pixel_format_SG_PIXELFORMAT_BC1_RGBA: sg_pixel_format = 45;
pub const sg_pixel_format_SG_PIXELFORMAT_BC2_RGBA: sg_pixel_format = 46;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_RGBA: sg_pixel_format = 47;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_SRGBA: sg_pixel_format = 48;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_R: sg_pixel_format = 49;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_RSN: sg_pixel_format = 50;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RG: sg_pixel_format = 51;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RGSN: sg_pixel_format = 52;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBF: sg_pixel_format = 53;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBUF: sg_pixel_format = 54;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_RGBA: sg_pixel_format = 55;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_SRGBA: sg_pixel_format = 56;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_2BPP: sg_pixel_format = 57;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_4BPP: sg_pixel_format = 58;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_2BPP: sg_pixel_format = 59;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_4BPP: sg_pixel_format = 60;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8: sg_pixel_format = 61;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8: sg_pixel_format = 62;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8A1: sg_pixel_format = 63;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGBA8: sg_pixel_format = 64;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8A8: sg_pixel_format = 65;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11: sg_pixel_format = 66;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11SN: sg_pixel_format = 67;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_RGBA: sg_pixel_format = 68;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_SRGBA: sg_pixel_format = 69;
pub const sg_pixel_format__SG_PIXELFORMAT_NUM: sg_pixel_format = 70;
pub const sg_pixel_format__SG_PIXELFORMAT_FORCE_U32: sg_pixel_format = 2147483647;
pub type sg_pixel_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pixelformat_info {
    pub sample: bool,
    pub filter: bool,
    pub render: bool,
    pub blend: bool,
    pub msaa: bool,
    pub depth: bool,
    pub compressed: bool,
    pub bytes_per_pixel: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pixelformat_info"][::std::mem::size_of::<sg_pixelformat_info>() - 12usize];
    ["Alignment of sg_pixelformat_info"][::std::mem::align_of::<sg_pixelformat_info>() - 4usize];
    ["Offset of field: sg_pixelformat_info::sample"]
        [::std::mem::offset_of!(sg_pixelformat_info, sample) - 0usize];
    ["Offset of field: sg_pixelformat_info::filter"]
        [::std::mem::offset_of!(sg_pixelformat_info, filter) - 1usize];
    ["Offset of field: sg_pixelformat_info::render"]
        [::std::mem::offset_of!(sg_pixelformat_info, render) - 2usize];
    ["Offset of field: sg_pixelformat_info::blend"]
        [::std::mem::offset_of!(sg_pixelformat_info, blend) - 3usize];
    ["Offset of field: sg_pixelformat_info::msaa"]
        [::std::mem::offset_of!(sg_pixelformat_info, msaa) - 4usize];
    ["Offset of field: sg_pixelformat_info::depth"]
        [::std::mem::offset_of!(sg_pixelformat_info, depth) - 5usize];
    ["Offset of field: sg_pixelformat_info::compressed"]
        [::std::mem::offset_of!(sg_pixelformat_info, compressed) - 6usize];
    ["Offset of field: sg_pixelformat_info::bytes_per_pixel"]
        [::std::mem::offset_of!(sg_pixelformat_info, bytes_per_pixel) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_features {
    pub origin_top_left: bool,
    pub image_clamp_to_border: bool,
    pub mrt_independent_blend_state: bool,
    pub mrt_independent_write_mask: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_features"][::std::mem::size_of::<sg_features>() - 4usize];
    ["Alignment of sg_features"][::std::mem::align_of::<sg_features>() - 1usize];
    ["Offset of field: sg_features::origin_top_left"]
        [::std::mem::offset_of!(sg_features, origin_top_left) - 0usize];
    ["Offset of field: sg_features::image_clamp_to_border"]
        [::std::mem::offset_of!(sg_features, image_clamp_to_border) - 1usize];
    ["Offset of field: sg_features::mrt_independent_blend_state"]
        [::std::mem::offset_of!(sg_features, mrt_independent_blend_state) - 2usize];
    ["Offset of field: sg_features::mrt_independent_write_mask"]
        [::std::mem::offset_of!(sg_features, mrt_independent_write_mask) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_limits {
    pub max_image_size_2d: ::std::os::raw::c_int,
    pub max_image_size_cube: ::std::os::raw::c_int,
    pub max_image_size_3d: ::std::os::raw::c_int,
    pub max_image_size_array: ::std::os::raw::c_int,
    pub max_image_array_layers: ::std::os::raw::c_int,
    pub max_vertex_attrs: ::std::os::raw::c_int,
    pub gl_max_vertex_uniform_components: ::std::os::raw::c_int,
    pub gl_max_combined_texture_image_units: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_limits"][::std::mem::size_of::<sg_limits>() - 32usize];
    ["Alignment of sg_limits"][::std::mem::align_of::<sg_limits>() - 4usize];
    ["Offset of field: sg_limits::max_image_size_2d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_2d) - 0usize];
    ["Offset of field: sg_limits::max_image_size_cube"]
        [::std::mem::offset_of!(sg_limits, max_image_size_cube) - 4usize];
    ["Offset of field: sg_limits::max_image_size_3d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_3d) - 8usize];
    ["Offset of field: sg_limits::max_image_size_array"]
        [::std::mem::offset_of!(sg_limits, max_image_size_array) - 12usize];
    ["Offset of field: sg_limits::max_image_array_layers"]
        [::std::mem::offset_of!(sg_limits, max_image_array_layers) - 16usize];
    ["Offset of field: sg_limits::max_vertex_attrs"]
        [::std::mem::offset_of!(sg_limits, max_vertex_attrs) - 20usize];
    ["Offset of field: sg_limits::gl_max_vertex_uniform_components"]
        [::std::mem::offset_of!(sg_limits, gl_max_vertex_uniform_components) - 24usize];
    ["Offset of field: sg_limits::gl_max_combined_texture_image_units"]
        [::std::mem::offset_of!(sg_limits, gl_max_combined_texture_image_units) - 28usize];
};
pub const sg_resource_state_SG_RESOURCESTATE_INITIAL: sg_resource_state = 0;
pub const sg_resource_state_SG_RESOURCESTATE_ALLOC: sg_resource_state = 1;
pub const sg_resource_state_SG_RESOURCESTATE_VALID: sg_resource_state = 2;
pub const sg_resource_state_SG_RESOURCESTATE_FAILED: sg_resource_state = 3;
pub const sg_resource_state_SG_RESOURCESTATE_INVALID: sg_resource_state = 4;
pub const sg_resource_state__SG_RESOURCESTATE_FORCE_U32: sg_resource_state = 2147483647;
pub type sg_resource_state = ::std::os::raw::c_int;
pub const sg_usage__SG_USAGE_DEFAULT: sg_usage = 0;
pub const sg_usage_SG_USAGE_IMMUTABLE: sg_usage = 1;
pub const sg_usage_SG_USAGE_DYNAMIC: sg_usage = 2;
pub const sg_usage_SG_USAGE_STREAM: sg_usage = 3;
pub const sg_usage__SG_USAGE_NUM: sg_usage = 4;
pub const sg_usage__SG_USAGE_FORCE_U32: sg_usage = 2147483647;
pub type sg_usage = ::std::os::raw::c_int;
pub const sg_buffer_type__SG_BUFFERTYPE_DEFAULT: sg_buffer_type = 0;
pub const sg_buffer_type_SG_BUFFERTYPE_VERTEXBUFFER: sg_buffer_type = 1;
pub const sg_buffer_type_SG_BUFFERTYPE_INDEXBUFFER: sg_buffer_type = 2;
pub const sg_buffer_type__SG_BUFFERTYPE_NUM: sg_buffer_type = 3;
pub const sg_buffer_type__SG_BUFFERTYPE_FORCE_U32: sg_buffer_type = 2147483647;
pub type sg_buffer_type = ::std::os::raw::c_int;
pub const sg_index_type__SG_INDEXTYPE_DEFAULT: sg_index_type = 0;
pub const sg_index_type_SG_INDEXTYPE_NONE: sg_index_type = 1;
pub const sg_index_type_SG_INDEXTYPE_UINT16: sg_index_type = 2;
pub const sg_index_type_SG_INDEXTYPE_UINT32: sg_index_type = 3;
pub const sg_index_type__SG_INDEXTYPE_NUM: sg_index_type = 4;
pub const sg_index_type__SG_INDEXTYPE_FORCE_U32: sg_index_type = 2147483647;
pub type sg_index_type = ::std::os::raw::c_int;
pub const sg_image_type__SG_IMAGETYPE_DEFAULT: sg_image_type = 0;
pub const sg_image_type_SG_IMAGETYPE_2D: sg_image_type = 1;
pub const sg_image_type_SG_IMAGETYPE_CUBE: sg_image_type = 2;
pub const sg_image_type_SG_IMAGETYPE_3D: sg_image_type = 3;
pub const sg_image_type_SG_IMAGETYPE_ARRAY: sg_image_type = 4;
pub const sg_image_type__SG_IMAGETYPE_NUM: sg_image_type = 5;
pub const sg_image_type__SG_IMAGETYPE_FORCE_U32: sg_image_type = 2147483647;
pub type sg_image_type = ::std::os::raw::c_int;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_DEFAULT: sg_image_sample_type = 0;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_FLOAT: sg_image_sample_type = 1;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_DEPTH: sg_image_sample_type = 2;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_SINT: sg_image_sample_type = 3;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UINT: sg_image_sample_type = 4;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT: sg_image_sample_type = 5;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_NUM: sg_image_sample_type = 6;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_FORCE_U32: sg_image_sample_type = 2147483647;
pub type sg_image_sample_type = ::std::os::raw::c_int;
pub const sg_sampler_type__SG_SAMPLERTYPE_DEFAULT: sg_sampler_type = 0;
pub const sg_sampler_type_SG_SAMPLERTYPE_FILTERING: sg_sampler_type = 1;
pub const sg_sampler_type_SG_SAMPLERTYPE_NONFILTERING: sg_sampler_type = 2;
pub const sg_sampler_type_SG_SAMPLERTYPE_COMPARISON: sg_sampler_type = 3;
pub const sg_sampler_type__SG_SAMPLERTYPE_NUM: sg_sampler_type = 4;
pub const sg_sampler_type__SG_SAMPLERTYPE_FORCE_U32: sg_sampler_type = 5;
pub type sg_sampler_type = ::std::os::raw::c_int;
pub const sg_cube_face_SG_CUBEFACE_POS_X: sg_cube_face = 0;
pub const sg_cube_face_SG_CUBEFACE_NEG_X: sg_cube_face = 1;
pub const sg_cube_face_SG_CUBEFACE_POS_Y: sg_cube_face = 2;
pub const sg_cube_face_SG_CUBEFACE_NEG_Y: sg_cube_face = 3;
pub const sg_cube_face_SG_CUBEFACE_POS_Z: sg_cube_face = 4;
pub const sg_cube_face_SG_CUBEFACE_NEG_Z: sg_cube_face = 5;
pub const sg_cube_face_SG_CUBEFACE_NUM: sg_cube_face = 6;
pub const sg_cube_face__SG_CUBEFACE_FORCE_U32: sg_cube_face = 2147483647;
pub type sg_cube_face = ::std::os::raw::c_int;
pub const sg_shader_stage_SG_SHADERSTAGE_VS: sg_shader_stage = 0;
pub const sg_shader_stage_SG_SHADERSTAGE_FS: sg_shader_stage = 1;
pub const sg_shader_stage__SG_SHADERSTAGE_FORCE_U32: sg_shader_stage = 2147483647;
pub type sg_shader_stage = ::std::os::raw::c_int;
pub const sg_primitive_type__SG_PRIMITIVETYPE_DEFAULT: sg_primitive_type = 0;
pub const sg_primitive_type_SG_PRIMITIVETYPE_POINTS: sg_primitive_type = 1;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINES: sg_primitive_type = 2;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINE_STRIP: sg_primitive_type = 3;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLES: sg_primitive_type = 4;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLE_STRIP: sg_primitive_type = 5;
pub const sg_primitive_type__SG_PRIMITIVETYPE_NUM: sg_primitive_type = 6;
pub const sg_primitive_type__SG_PRIMITIVETYPE_FORCE_U32: sg_primitive_type = 2147483647;
pub type sg_primitive_type = ::std::os::raw::c_int;
pub const sg_filter__SG_FILTER_DEFAULT: sg_filter = 0;
pub const sg_filter_SG_FILTER_NONE: sg_filter = 1;
pub const sg_filter_SG_FILTER_NEAREST: sg_filter = 2;
pub const sg_filter_SG_FILTER_LINEAR: sg_filter = 3;
pub const sg_filter__SG_FILTER_NUM: sg_filter = 4;
pub const sg_filter__SG_FILTER_FORCE_U32: sg_filter = 2147483647;
pub type sg_filter = ::std::os::raw::c_int;
pub const sg_wrap__SG_WRAP_DEFAULT: sg_wrap = 0;
pub const sg_wrap_SG_WRAP_REPEAT: sg_wrap = 1;
pub const sg_wrap_SG_WRAP_CLAMP_TO_EDGE: sg_wrap = 2;
pub const sg_wrap_SG_WRAP_CLAMP_TO_BORDER: sg_wrap = 3;
pub const sg_wrap_SG_WRAP_MIRRORED_REPEAT: sg_wrap = 4;
pub const sg_wrap__SG_WRAP_NUM: sg_wrap = 5;
pub const sg_wrap__SG_WRAP_FORCE_U32: sg_wrap = 2147483647;
pub type sg_wrap = ::std::os::raw::c_int;
pub const sg_border_color__SG_BORDERCOLOR_DEFAULT: sg_border_color = 0;
pub const sg_border_color_SG_BORDERCOLOR_TRANSPARENT_BLACK: sg_border_color = 1;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_BLACK: sg_border_color = 2;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_WHITE: sg_border_color = 3;
pub const sg_border_color__SG_BORDERCOLOR_NUM: sg_border_color = 4;
pub const sg_border_color__SG_BORDERCOLOR_FORCE_U32: sg_border_color = 2147483647;
pub type sg_border_color = ::std::os::raw::c_int;
pub const sg_vertex_format_SG_VERTEXFORMAT_INVALID: sg_vertex_format = 0;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT: sg_vertex_format = 1;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT2: sg_vertex_format = 2;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT3: sg_vertex_format = 3;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT4: sg_vertex_format = 4;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4: sg_vertex_format = 5;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4N: sg_vertex_format = 6;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4: sg_vertex_format = 7;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4N: sg_vertex_format = 8;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2: sg_vertex_format = 9;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2N: sg_vertex_format = 10;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT2N: sg_vertex_format = 11;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4: sg_vertex_format = 12;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4N: sg_vertex_format = 13;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT4N: sg_vertex_format = 14;
pub const sg_vertex_format_SG_VERTEXFORMAT_UINT10_N2: sg_vertex_format = 15;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF2: sg_vertex_format = 16;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF4: sg_vertex_format = 17;
pub const sg_vertex_format__SG_VERTEXFORMAT_NUM: sg_vertex_format = 18;
pub const sg_vertex_format__SG_VERTEXFORMAT_FORCE_U32: sg_vertex_format = 2147483647;
pub type sg_vertex_format = ::std::os::raw::c_int;
pub const sg_vertex_step__SG_VERTEXSTEP_DEFAULT: sg_vertex_step = 0;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_VERTEX: sg_vertex_step = 1;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_INSTANCE: sg_vertex_step = 2;
pub const sg_vertex_step__SG_VERTEXSTEP_NUM: sg_vertex_step = 3;
pub const sg_vertex_step__SG_VERTEXSTEP_FORCE_U32: sg_vertex_step = 2147483647;
pub type sg_vertex_step = ::std::os::raw::c_int;
pub const sg_uniform_type_SG_UNIFORMTYPE_INVALID: sg_uniform_type = 0;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT: sg_uniform_type = 1;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT2: sg_uniform_type = 2;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT3: sg_uniform_type = 3;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT4: sg_uniform_type = 4;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT: sg_uniform_type = 5;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT2: sg_uniform_type = 6;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT3: sg_uniform_type = 7;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT4: sg_uniform_type = 8;
pub const sg_uniform_type_SG_UNIFORMTYPE_MAT4: sg_uniform_type = 9;
pub const sg_uniform_type__SG_UNIFORMTYPE_NUM: sg_uniform_type = 10;
pub const sg_uniform_type__SG_UNIFORMTYPE_FORCE_U32: sg_uniform_type = 2147483647;
pub type sg_uniform_type = ::std::os::raw::c_int;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_DEFAULT: sg_uniform_layout = 0;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_NATIVE: sg_uniform_layout = 1;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_STD140: sg_uniform_layout = 2;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_NUM: sg_uniform_layout = 3;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_FORCE_U32: sg_uniform_layout = 2147483647;
pub type sg_uniform_layout = ::std::os::raw::c_int;
pub const sg_cull_mode__SG_CULLMODE_DEFAULT: sg_cull_mode = 0;
pub const sg_cull_mode_SG_CULLMODE_NONE: sg_cull_mode = 1;
pub const sg_cull_mode_SG_CULLMODE_FRONT: sg_cull_mode = 2;
pub const sg_cull_mode_SG_CULLMODE_BACK: sg_cull_mode = 3;
pub const sg_cull_mode__SG_CULLMODE_NUM: sg_cull_mode = 4;
pub const sg_cull_mode__SG_CULLMODE_FORCE_U32: sg_cull_mode = 2147483647;
pub type sg_cull_mode = ::std::os::raw::c_int;
pub const sg_face_winding__SG_FACEWINDING_DEFAULT: sg_face_winding = 0;
pub const sg_face_winding_SG_FACEWINDING_CCW: sg_face_winding = 1;
pub const sg_face_winding_SG_FACEWINDING_CW: sg_face_winding = 2;
pub const sg_face_winding__SG_FACEWINDING_NUM: sg_face_winding = 3;
pub const sg_face_winding__SG_FACEWINDING_FORCE_U32: sg_face_winding = 2147483647;
pub type sg_face_winding = ::std::os::raw::c_int;
pub const sg_compare_func__SG_COMPAREFUNC_DEFAULT: sg_compare_func = 0;
pub const sg_compare_func_SG_COMPAREFUNC_NEVER: sg_compare_func = 1;
pub const sg_compare_func_SG_COMPAREFUNC_LESS: sg_compare_func = 2;
pub const sg_compare_func_SG_COMPAREFUNC_EQUAL: sg_compare_func = 3;
pub const sg_compare_func_SG_COMPAREFUNC_LESS_EQUAL: sg_compare_func = 4;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER: sg_compare_func = 5;
pub const sg_compare_func_SG_COMPAREFUNC_NOT_EQUAL: sg_compare_func = 6;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER_EQUAL: sg_compare_func = 7;
pub const sg_compare_func_SG_COMPAREFUNC_ALWAYS: sg_compare_func = 8;
pub const sg_compare_func__SG_COMPAREFUNC_NUM: sg_compare_func = 9;
pub const sg_compare_func__SG_COMPAREFUNC_FORCE_U32: sg_compare_func = 2147483647;
pub type sg_compare_func = ::std::os::raw::c_int;
pub const sg_stencil_op__SG_STENCILOP_DEFAULT: sg_stencil_op = 0;
pub const sg_stencil_op_SG_STENCILOP_KEEP: sg_stencil_op = 1;
pub const sg_stencil_op_SG_STENCILOP_ZERO: sg_stencil_op = 2;
pub const sg_stencil_op_SG_STENCILOP_REPLACE: sg_stencil_op = 3;
pub const sg_stencil_op_SG_STENCILOP_INCR_CLAMP: sg_stencil_op = 4;
pub const sg_stencil_op_SG_STENCILOP_DECR_CLAMP: sg_stencil_op = 5;
pub const sg_stencil_op_SG_STENCILOP_INVERT: sg_stencil_op = 6;
pub const sg_stencil_op_SG_STENCILOP_INCR_WRAP: sg_stencil_op = 7;
pub const sg_stencil_op_SG_STENCILOP_DECR_WRAP: sg_stencil_op = 8;
pub const sg_stencil_op__SG_STENCILOP_NUM: sg_stencil_op = 9;
pub const sg_stencil_op__SG_STENCILOP_FORCE_U32: sg_stencil_op = 2147483647;
pub type sg_stencil_op = ::std::os::raw::c_int;
pub const sg_blend_factor__SG_BLENDFACTOR_DEFAULT: sg_blend_factor = 0;
pub const sg_blend_factor_SG_BLENDFACTOR_ZERO: sg_blend_factor = 1;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE: sg_blend_factor = 2;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_COLOR: sg_blend_factor = 3;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR: sg_blend_factor = 4;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA: sg_blend_factor = 5;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: sg_blend_factor = 6;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_COLOR: sg_blend_factor = 7;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_COLOR: sg_blend_factor = 8;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_ALPHA: sg_blend_factor = 9;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA: sg_blend_factor = 10;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA_SATURATED: sg_blend_factor = 11;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_COLOR: sg_blend_factor = 12;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR: sg_blend_factor = 13;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_ALPHA: sg_blend_factor = 14;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA: sg_blend_factor = 15;
pub const sg_blend_factor__SG_BLENDFACTOR_NUM: sg_blend_factor = 16;
pub const sg_blend_factor__SG_BLENDFACTOR_FORCE_U32: sg_blend_factor = 2147483647;
pub type sg_blend_factor = ::std::os::raw::c_int;
pub const sg_blend_op__SG_BLENDOP_DEFAULT: sg_blend_op = 0;
pub const sg_blend_op_SG_BLENDOP_ADD: sg_blend_op = 1;
pub const sg_blend_op_SG_BLENDOP_SUBTRACT: sg_blend_op = 2;
pub const sg_blend_op_SG_BLENDOP_REVERSE_SUBTRACT: sg_blend_op = 3;
pub const sg_blend_op__SG_BLENDOP_NUM: sg_blend_op = 4;
pub const sg_blend_op__SG_BLENDOP_FORCE_U32: sg_blend_op = 2147483647;
pub type sg_blend_op = ::std::os::raw::c_int;
pub const sg_color_mask__SG_COLORMASK_DEFAULT: sg_color_mask = 0;
pub const sg_color_mask_SG_COLORMASK_NONE: sg_color_mask = 16;
pub const sg_color_mask_SG_COLORMASK_R: sg_color_mask = 1;
pub const sg_color_mask_SG_COLORMASK_G: sg_color_mask = 2;
pub const sg_color_mask_SG_COLORMASK_RG: sg_color_mask = 3;
pub const sg_color_mask_SG_COLORMASK_B: sg_color_mask = 4;
pub const sg_color_mask_SG_COLORMASK_RB: sg_color_mask = 5;
pub const sg_color_mask_SG_COLORMASK_GB: sg_color_mask = 6;
pub const sg_color_mask_SG_COLORMASK_RGB: sg_color_mask = 7;
pub const sg_color_mask_SG_COLORMASK_A: sg_color_mask = 8;
pub const sg_color_mask_SG_COLORMASK_RA: sg_color_mask = 9;
pub const sg_color_mask_SG_COLORMASK_GA: sg_color_mask = 10;
pub const sg_color_mask_SG_COLORMASK_RGA: sg_color_mask = 11;
pub const sg_color_mask_SG_COLORMASK_BA: sg_color_mask = 12;
pub const sg_color_mask_SG_COLORMASK_RBA: sg_color_mask = 13;
pub const sg_color_mask_SG_COLORMASK_GBA: sg_color_mask = 14;
pub const sg_color_mask_SG_COLORMASK_RGBA: sg_color_mask = 15;
pub const sg_color_mask__SG_COLORMASK_FORCE_U32: sg_color_mask = 2147483647;
pub type sg_color_mask = ::std::os::raw::c_int;
pub const sg_load_action__SG_LOADACTION_DEFAULT: sg_load_action = 0;
pub const sg_load_action_SG_LOADACTION_CLEAR: sg_load_action = 1;
pub const sg_load_action_SG_LOADACTION_LOAD: sg_load_action = 2;
pub const sg_load_action_SG_LOADACTION_DONTCARE: sg_load_action = 3;
pub const sg_load_action__SG_LOADACTION_FORCE_U32: sg_load_action = 2147483647;
pub type sg_load_action = ::std::os::raw::c_int;
pub const sg_store_action__SG_STOREACTION_DEFAULT: sg_store_action = 0;
pub const sg_store_action_SG_STOREACTION_STORE: sg_store_action = 1;
pub const sg_store_action_SG_STOREACTION_DONTCARE: sg_store_action = 2;
pub const sg_store_action__SG_STOREACTION_FORCE_U32: sg_store_action = 2147483647;
pub type sg_store_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: sg_color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_attachment_action"]
        [::std::mem::size_of::<sg_color_attachment_action>() - 24usize];
    ["Alignment of sg_color_attachment_action"]
        [::std::mem::align_of::<sg_color_attachment_action>() - 4usize];
    ["Offset of field: sg_color_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_color_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_color_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_color_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_attachment_action"]
        [::std::mem::size_of::<sg_depth_attachment_action>() - 12usize];
    ["Alignment of sg_depth_attachment_action"]
        [::std::mem::align_of::<sg_depth_attachment_action>() - 4usize];
    ["Offset of field: sg_depth_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_depth_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_depth_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_depth_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_attachment_action"]
        [::std::mem::size_of::<sg_stencil_attachment_action>() - 12usize];
    ["Alignment of sg_stencil_attachment_action"]
        [::std::mem::align_of::<sg_stencil_attachment_action>() - 4usize];
    ["Offset of field: sg_stencil_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_stencil_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_stencil_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_action {
    pub colors: [sg_color_attachment_action; 4usize],
    pub depth: sg_depth_attachment_action,
    pub stencil: sg_stencil_attachment_action,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass_action"][::std::mem::size_of::<sg_pass_action>() - 120usize];
    ["Alignment of sg_pass_action"][::std::mem::align_of::<sg_pass_action>() - 4usize];
    ["Offset of field: sg_pass_action::colors"]
        [::std::mem::offset_of!(sg_pass_action, colors) - 0usize];
    ["Offset of field: sg_pass_action::depth"]
        [::std::mem::offset_of!(sg_pass_action, depth) - 96usize];
    ["Offset of field: sg_pass_action::stencil"]
        [::std::mem::offset_of!(sg_pass_action, stencil) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_swapchain {
    pub current_drawable: *const ::std::os::raw::c_void,
    pub depth_stencil_texture: *const ::std::os::raw::c_void,
    pub msaa_color_texture: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_swapchain"][::std::mem::size_of::<sg_metal_swapchain>() - 12usize];
    ["Alignment of sg_metal_swapchain"][::std::mem::align_of::<sg_metal_swapchain>() - 4usize];
    ["Offset of field: sg_metal_swapchain::current_drawable"]
        [::std::mem::offset_of!(sg_metal_swapchain, current_drawable) - 0usize];
    ["Offset of field: sg_metal_swapchain::depth_stencil_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, depth_stencil_texture) - 4usize];
    ["Offset of field: sg_metal_swapchain::msaa_color_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, msaa_color_texture) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_swapchain"][::std::mem::size_of::<sg_d3d11_swapchain>() - 12usize];
    ["Alignment of sg_d3d11_swapchain"][::std::mem::align_of::<sg_d3d11_swapchain>() - 4usize];
    ["Offset of field: sg_d3d11_swapchain::render_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, render_view) - 0usize];
    ["Offset of field: sg_d3d11_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, resolve_view) - 4usize];
    ["Offset of field: sg_d3d11_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, depth_stencil_view) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_swapchain"][::std::mem::size_of::<sg_wgpu_swapchain>() - 12usize];
    ["Alignment of sg_wgpu_swapchain"][::std::mem::align_of::<sg_wgpu_swapchain>() - 4usize];
    ["Offset of field: sg_wgpu_swapchain::render_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, render_view) - 0usize];
    ["Offset of field: sg_wgpu_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, resolve_view) - 4usize];
    ["Offset of field: sg_wgpu_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, depth_stencil_view) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_swapchain {
    pub framebuffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_swapchain"][::std::mem::size_of::<sg_gl_swapchain>() - 4usize];
    ["Alignment of sg_gl_swapchain"][::std::mem::align_of::<sg_gl_swapchain>() - 4usize];
    ["Offset of field: sg_gl_swapchain::framebuffer"]
        [::std::mem::offset_of!(sg_gl_swapchain, framebuffer) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_swapchain {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub metal: sg_metal_swapchain,
    pub d3d11: sg_d3d11_swapchain,
    pub wgpu: sg_wgpu_swapchain,
    pub gl: sg_gl_swapchain,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_swapchain"][::std::mem::size_of::<sg_swapchain>() - 60usize];
    ["Alignment of sg_swapchain"][::std::mem::align_of::<sg_swapchain>() - 4usize];
    ["Offset of field: sg_swapchain::width"][::std::mem::offset_of!(sg_swapchain, width) - 0usize];
    ["Offset of field: sg_swapchain::height"]
        [::std::mem::offset_of!(sg_swapchain, height) - 4usize];
    ["Offset of field: sg_swapchain::sample_count"]
        [::std::mem::offset_of!(sg_swapchain, sample_count) - 8usize];
    ["Offset of field: sg_swapchain::color_format"]
        [::std::mem::offset_of!(sg_swapchain, color_format) - 12usize];
    ["Offset of field: sg_swapchain::depth_format"]
        [::std::mem::offset_of!(sg_swapchain, depth_format) - 16usize];
    ["Offset of field: sg_swapchain::metal"][::std::mem::offset_of!(sg_swapchain, metal) - 20usize];
    ["Offset of field: sg_swapchain::d3d11"][::std::mem::offset_of!(sg_swapchain, d3d11) - 32usize];
    ["Offset of field: sg_swapchain::wgpu"][::std::mem::offset_of!(sg_swapchain, wgpu) - 44usize];
    ["Offset of field: sg_swapchain::gl"][::std::mem::offset_of!(sg_swapchain, gl) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass {
    pub _start_canary: u32,
    pub action: sg_pass_action,
    pub attachments: sg_attachments,
    pub swapchain: sg_swapchain,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass"][::std::mem::size_of::<sg_pass>() - 196usize];
    ["Alignment of sg_pass"][::std::mem::align_of::<sg_pass>() - 4usize];
    ["Offset of field: sg_pass::_start_canary"]
        [::std::mem::offset_of!(sg_pass, _start_canary) - 0usize];
    ["Offset of field: sg_pass::action"][::std::mem::offset_of!(sg_pass, action) - 4usize];
    ["Offset of field: sg_pass::attachments"]
        [::std::mem::offset_of!(sg_pass, attachments) - 124usize];
    ["Offset of field: sg_pass::swapchain"][::std::mem::offset_of!(sg_pass, swapchain) - 128usize];
    ["Offset of field: sg_pass::label"][::std::mem::offset_of!(sg_pass, label) - 188usize];
    ["Offset of field: sg_pass::_end_canary"]
        [::std::mem::offset_of!(sg_pass, _end_canary) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stage_bindings {
    pub images: [sg_image; 12usize],
    pub samplers: [sg_sampler; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stage_bindings"][::std::mem::size_of::<sg_stage_bindings>() - 80usize];
    ["Alignment of sg_stage_bindings"][::std::mem::align_of::<sg_stage_bindings>() - 4usize];
    ["Offset of field: sg_stage_bindings::images"]
        [::std::mem::offset_of!(sg_stage_bindings, images) - 0usize];
    ["Offset of field: sg_stage_bindings::samplers"]
        [::std::mem::offset_of!(sg_stage_bindings, samplers) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_bindings {
    pub _start_canary: u32,
    pub vertex_buffers: [sg_buffer; 8usize],
    pub vertex_buffer_offsets: [::std::os::raw::c_int; 8usize],
    pub index_buffer: sg_buffer,
    pub index_buffer_offset: ::std::os::raw::c_int,
    pub vs: sg_stage_bindings,
    pub fs: sg_stage_bindings,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_bindings"][::std::mem::size_of::<sg_bindings>() - 240usize];
    ["Alignment of sg_bindings"][::std::mem::align_of::<sg_bindings>() - 4usize];
    ["Offset of field: sg_bindings::_start_canary"]
        [::std::mem::offset_of!(sg_bindings, _start_canary) - 0usize];
    ["Offset of field: sg_bindings::vertex_buffers"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffers) - 4usize];
    ["Offset of field: sg_bindings::vertex_buffer_offsets"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffer_offsets) - 36usize];
    ["Offset of field: sg_bindings::index_buffer"]
        [::std::mem::offset_of!(sg_bindings, index_buffer) - 68usize];
    ["Offset of field: sg_bindings::index_buffer_offset"]
        [::std::mem::offset_of!(sg_bindings, index_buffer_offset) - 72usize];
    ["Offset of field: sg_bindings::vs"][::std::mem::offset_of!(sg_bindings, vs) - 76usize];
    ["Offset of field: sg_bindings::fs"][::std::mem::offset_of!(sg_bindings, fs) - 156usize];
    ["Offset of field: sg_bindings::_end_canary"]
        [::std::mem::offset_of!(sg_bindings, _end_canary) - 236usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_desc {
    pub _start_canary: u32,
    pub size: usize,
    pub type_: sg_buffer_type,
    pub usage: sg_usage,
    pub data: sg_range,
    pub label: *const ::std::os::raw::c_char,
    pub gl_buffers: [u32; 2usize],
    pub mtl_buffers: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_buffer: *const ::std::os::raw::c_void,
    pub wgpu_buffer: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_desc"][::std::mem::size_of::<sg_buffer_desc>() - 56usize];
    ["Alignment of sg_buffer_desc"][::std::mem::align_of::<sg_buffer_desc>() - 4usize];
    ["Offset of field: sg_buffer_desc::_start_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _start_canary) - 0usize];
    ["Offset of field: sg_buffer_desc::size"]
        [::std::mem::offset_of!(sg_buffer_desc, size) - 4usize];
    ["Offset of field: sg_buffer_desc::type_"]
        [::std::mem::offset_of!(sg_buffer_desc, type_) - 8usize];
    ["Offset of field: sg_buffer_desc::usage"]
        [::std::mem::offset_of!(sg_buffer_desc, usage) - 12usize];
    ["Offset of field: sg_buffer_desc::data"]
        [::std::mem::offset_of!(sg_buffer_desc, data) - 16usize];
    ["Offset of field: sg_buffer_desc::label"]
        [::std::mem::offset_of!(sg_buffer_desc, label) - 24usize];
    ["Offset of field: sg_buffer_desc::gl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, gl_buffers) - 28usize];
    ["Offset of field: sg_buffer_desc::mtl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, mtl_buffers) - 36usize];
    ["Offset of field: sg_buffer_desc::d3d11_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, d3d11_buffer) - 44usize];
    ["Offset of field: sg_buffer_desc::wgpu_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, wgpu_buffer) - 48usize];
    ["Offset of field: sg_buffer_desc::_end_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _end_canary) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_data {
    pub subimage: [[sg_range; 16usize]; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_data"][::std::mem::size_of::<sg_image_data>() - 768usize];
    ["Alignment of sg_image_data"][::std::mem::align_of::<sg_image_data>() - 4usize];
    ["Offset of field: sg_image_data::subimage"]
        [::std::mem::offset_of!(sg_image_data, subimage) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_desc {
    pub _start_canary: u32,
    pub type_: sg_image_type,
    pub render_target: bool,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub num_slices: ::std::os::raw::c_int,
    pub num_mipmaps: ::std::os::raw::c_int,
    pub usage: sg_usage,
    pub pixel_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub data: sg_image_data,
    pub label: *const ::std::os::raw::c_char,
    pub gl_textures: [u32; 2usize],
    pub gl_texture_target: u32,
    pub mtl_textures: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_texture: *const ::std::os::raw::c_void,
    pub d3d11_shader_resource_view: *const ::std::os::raw::c_void,
    pub wgpu_texture: *const ::std::os::raw::c_void,
    pub wgpu_texture_view: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_desc"][::std::mem::size_of::<sg_image_desc>() - 852usize];
    ["Alignment of sg_image_desc"][::std::mem::align_of::<sg_image_desc>() - 4usize];
    ["Offset of field: sg_image_desc::_start_canary"]
        [::std::mem::offset_of!(sg_image_desc, _start_canary) - 0usize];
    ["Offset of field: sg_image_desc::type_"]
        [::std::mem::offset_of!(sg_image_desc, type_) - 4usize];
    ["Offset of field: sg_image_desc::render_target"]
        [::std::mem::offset_of!(sg_image_desc, render_target) - 8usize];
    ["Offset of field: sg_image_desc::width"]
        [::std::mem::offset_of!(sg_image_desc, width) - 12usize];
    ["Offset of field: sg_image_desc::height"]
        [::std::mem::offset_of!(sg_image_desc, height) - 16usize];
    ["Offset of field: sg_image_desc::num_slices"]
        [::std::mem::offset_of!(sg_image_desc, num_slices) - 20usize];
    ["Offset of field: sg_image_desc::num_mipmaps"]
        [::std::mem::offset_of!(sg_image_desc, num_mipmaps) - 24usize];
    ["Offset of field: sg_image_desc::usage"]
        [::std::mem::offset_of!(sg_image_desc, usage) - 28usize];
    ["Offset of field: sg_image_desc::pixel_format"]
        [::std::mem::offset_of!(sg_image_desc, pixel_format) - 32usize];
    ["Offset of field: sg_image_desc::sample_count"]
        [::std::mem::offset_of!(sg_image_desc, sample_count) - 36usize];
    ["Offset of field: sg_image_desc::data"][::std::mem::offset_of!(sg_image_desc, data) - 40usize];
    ["Offset of field: sg_image_desc::label"]
        [::std::mem::offset_of!(sg_image_desc, label) - 808usize];
    ["Offset of field: sg_image_desc::gl_textures"]
        [::std::mem::offset_of!(sg_image_desc, gl_textures) - 812usize];
    ["Offset of field: sg_image_desc::gl_texture_target"]
        [::std::mem::offset_of!(sg_image_desc, gl_texture_target) - 820usize];
    ["Offset of field: sg_image_desc::mtl_textures"]
        [::std::mem::offset_of!(sg_image_desc, mtl_textures) - 824usize];
    ["Offset of field: sg_image_desc::d3d11_texture"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_texture) - 832usize];
    ["Offset of field: sg_image_desc::d3d11_shader_resource_view"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_shader_resource_view) - 836usize];
    ["Offset of field: sg_image_desc::wgpu_texture"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture) - 840usize];
    ["Offset of field: sg_image_desc::wgpu_texture_view"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture_view) - 844usize];
    ["Offset of field: sg_image_desc::_end_canary"]
        [::std::mem::offset_of!(sg_image_desc, _end_canary) - 848usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_desc {
    pub _start_canary: u32,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub wrap_w: sg_wrap,
    pub min_lod: f32,
    pub max_lod: f32,
    pub border_color: sg_border_color,
    pub compare: sg_compare_func,
    pub max_anisotropy: u32,
    pub label: *const ::std::os::raw::c_char,
    pub gl_sampler: u32,
    pub mtl_sampler: *const ::std::os::raw::c_void,
    pub d3d11_sampler: *const ::std::os::raw::c_void,
    pub wgpu_sampler: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_desc"][::std::mem::size_of::<sg_sampler_desc>() - 72usize];
    ["Alignment of sg_sampler_desc"][::std::mem::align_of::<sg_sampler_desc>() - 4usize];
    ["Offset of field: sg_sampler_desc::_start_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _start_canary) - 0usize];
    ["Offset of field: sg_sampler_desc::min_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, min_filter) - 4usize];
    ["Offset of field: sg_sampler_desc::mag_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mag_filter) - 8usize];
    ["Offset of field: sg_sampler_desc::mipmap_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mipmap_filter) - 12usize];
    ["Offset of field: sg_sampler_desc::wrap_u"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_u) - 16usize];
    ["Offset of field: sg_sampler_desc::wrap_v"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_v) - 20usize];
    ["Offset of field: sg_sampler_desc::wrap_w"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_w) - 24usize];
    ["Offset of field: sg_sampler_desc::min_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, min_lod) - 28usize];
    ["Offset of field: sg_sampler_desc::max_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, max_lod) - 32usize];
    ["Offset of field: sg_sampler_desc::border_color"]
        [::std::mem::offset_of!(sg_sampler_desc, border_color) - 36usize];
    ["Offset of field: sg_sampler_desc::compare"]
        [::std::mem::offset_of!(sg_sampler_desc, compare) - 40usize];
    ["Offset of field: sg_sampler_desc::max_anisotropy"]
        [::std::mem::offset_of!(sg_sampler_desc, max_anisotropy) - 44usize];
    ["Offset of field: sg_sampler_desc::label"]
        [::std::mem::offset_of!(sg_sampler_desc, label) - 48usize];
    ["Offset of field: sg_sampler_desc::gl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, gl_sampler) - 52usize];
    ["Offset of field: sg_sampler_desc::mtl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, mtl_sampler) - 56usize];
    ["Offset of field: sg_sampler_desc::d3d11_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, d3d11_sampler) - 60usize];
    ["Offset of field: sg_sampler_desc::wgpu_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, wgpu_sampler) - 64usize];
    ["Offset of field: sg_sampler_desc::_end_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _end_canary) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_attr_desc {
    pub name: *const ::std::os::raw::c_char,
    pub sem_name: *const ::std::os::raw::c_char,
    pub sem_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_attr_desc"][::std::mem::size_of::<sg_shader_attr_desc>() - 12usize];
    ["Alignment of sg_shader_attr_desc"][::std::mem::align_of::<sg_shader_attr_desc>() - 4usize];
    ["Offset of field: sg_shader_attr_desc::name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, name) - 0usize];
    ["Offset of field: sg_shader_attr_desc::sem_name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_name) - 4usize];
    ["Offset of field: sg_shader_attr_desc::sem_index"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_index) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_desc {
    pub name: *const ::std::os::raw::c_char,
    pub type_: sg_uniform_type,
    pub array_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_desc"][::std::mem::size_of::<sg_shader_uniform_desc>() - 12usize];
    ["Alignment of sg_shader_uniform_desc"]
        [::std::mem::align_of::<sg_shader_uniform_desc>() - 4usize];
    ["Offset of field: sg_shader_uniform_desc::name"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, name) - 0usize];
    ["Offset of field: sg_shader_uniform_desc::type_"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, type_) - 4usize];
    ["Offset of field: sg_shader_uniform_desc::array_count"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, array_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_block_desc {
    pub size: usize,
    pub layout: sg_uniform_layout,
    pub uniforms: [sg_shader_uniform_desc; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_block_desc"]
        [::std::mem::size_of::<sg_shader_uniform_block_desc>() - 200usize];
    ["Alignment of sg_shader_uniform_block_desc"]
        [::std::mem::align_of::<sg_shader_uniform_block_desc>() - 4usize];
    ["Offset of field: sg_shader_uniform_block_desc::size"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, size) - 0usize];
    ["Offset of field: sg_shader_uniform_block_desc::layout"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, layout) - 4usize];
    ["Offset of field: sg_shader_uniform_block_desc::uniforms"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, uniforms) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_desc {
    pub used: bool,
    pub multisampled: bool,
    pub image_type: sg_image_type,
    pub sample_type: sg_image_sample_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_desc"][::std::mem::size_of::<sg_shader_image_desc>() - 12usize];
    ["Alignment of sg_shader_image_desc"][::std::mem::align_of::<sg_shader_image_desc>() - 4usize];
    ["Offset of field: sg_shader_image_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_desc::multisampled"]
        [::std::mem::offset_of!(sg_shader_image_desc, multisampled) - 1usize];
    ["Offset of field: sg_shader_image_desc::image_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, image_type) - 4usize];
    ["Offset of field: sg_shader_image_desc::sample_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, sample_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_sampler_desc {
    pub used: bool,
    pub sampler_type: sg_sampler_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_sampler_desc"][::std::mem::size_of::<sg_shader_sampler_desc>() - 8usize];
    ["Alignment of sg_shader_sampler_desc"]
        [::std::mem::align_of::<sg_shader_sampler_desc>() - 4usize];
    ["Offset of field: sg_shader_sampler_desc::used"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, used) - 0usize];
    ["Offset of field: sg_shader_sampler_desc::sampler_type"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, sampler_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_sampler_pair_desc {
    pub used: bool,
    pub image_slot: ::std::os::raw::c_int,
    pub sampler_slot: ::std::os::raw::c_int,
    pub glsl_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_sampler_pair_desc"]
        [::std::mem::size_of::<sg_shader_image_sampler_pair_desc>() - 16usize];
    ["Alignment of sg_shader_image_sampler_pair_desc"]
        [::std::mem::align_of::<sg_shader_image_sampler_pair_desc>() - 4usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::image_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, image_slot) - 4usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::sampler_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, sampler_slot) - 8usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::glsl_name"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, glsl_name) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_stage_desc {
    pub source: *const ::std::os::raw::c_char,
    pub bytecode: sg_range,
    pub entry: *const ::std::os::raw::c_char,
    pub d3d11_target: *const ::std::os::raw::c_char,
    pub uniform_blocks: [sg_shader_uniform_block_desc; 4usize],
    pub images: [sg_shader_image_desc; 12usize],
    pub samplers: [sg_shader_sampler_desc; 8usize],
    pub image_sampler_pairs: [sg_shader_image_sampler_pair_desc; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_stage_desc"][::std::mem::size_of::<sg_shader_stage_desc>() - 1220usize];
    ["Alignment of sg_shader_stage_desc"][::std::mem::align_of::<sg_shader_stage_desc>() - 4usize];
    ["Offset of field: sg_shader_stage_desc::source"]
        [::std::mem::offset_of!(sg_shader_stage_desc, source) - 0usize];
    ["Offset of field: sg_shader_stage_desc::bytecode"]
        [::std::mem::offset_of!(sg_shader_stage_desc, bytecode) - 4usize];
    ["Offset of field: sg_shader_stage_desc::entry"]
        [::std::mem::offset_of!(sg_shader_stage_desc, entry) - 12usize];
    ["Offset of field: sg_shader_stage_desc::d3d11_target"]
        [::std::mem::offset_of!(sg_shader_stage_desc, d3d11_target) - 16usize];
    ["Offset of field: sg_shader_stage_desc::uniform_blocks"]
        [::std::mem::offset_of!(sg_shader_stage_desc, uniform_blocks) - 20usize];
    ["Offset of field: sg_shader_stage_desc::images"]
        [::std::mem::offset_of!(sg_shader_stage_desc, images) - 820usize];
    ["Offset of field: sg_shader_stage_desc::samplers"]
        [::std::mem::offset_of!(sg_shader_stage_desc, samplers) - 964usize];
    ["Offset of field: sg_shader_stage_desc::image_sampler_pairs"]
        [::std::mem::offset_of!(sg_shader_stage_desc, image_sampler_pairs) - 1028usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_desc {
    pub _start_canary: u32,
    pub attrs: [sg_shader_attr_desc; 16usize],
    pub vs: sg_shader_stage_desc,
    pub fs: sg_shader_stage_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_desc"][::std::mem::size_of::<sg_shader_desc>() - 2644usize];
    ["Alignment of sg_shader_desc"][::std::mem::align_of::<sg_shader_desc>() - 4usize];
    ["Offset of field: sg_shader_desc::_start_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _start_canary) - 0usize];
    ["Offset of field: sg_shader_desc::attrs"]
        [::std::mem::offset_of!(sg_shader_desc, attrs) - 4usize];
    ["Offset of field: sg_shader_desc::vs"][::std::mem::offset_of!(sg_shader_desc, vs) - 196usize];
    ["Offset of field: sg_shader_desc::fs"][::std::mem::offset_of!(sg_shader_desc, fs) - 1416usize];
    ["Offset of field: sg_shader_desc::label"]
        [::std::mem::offset_of!(sg_shader_desc, label) - 2636usize];
    ["Offset of field: sg_shader_desc::_end_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _end_canary) - 2640usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_buffer_layout_state {
    pub stride: ::std::os::raw::c_int,
    pub step_func: sg_vertex_step,
    pub step_rate: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_buffer_layout_state"]
        [::std::mem::size_of::<sg_vertex_buffer_layout_state>() - 12usize];
    ["Alignment of sg_vertex_buffer_layout_state"]
        [::std::mem::align_of::<sg_vertex_buffer_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::stride"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, stride) - 0usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_func"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_func) - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_rate"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_rate) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_attr_state {
    pub buffer_index: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub format: sg_vertex_format,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_attr_state"][::std::mem::size_of::<sg_vertex_attr_state>() - 12usize];
    ["Alignment of sg_vertex_attr_state"][::std::mem::align_of::<sg_vertex_attr_state>() - 4usize];
    ["Offset of field: sg_vertex_attr_state::buffer_index"]
        [::std::mem::offset_of!(sg_vertex_attr_state, buffer_index) - 0usize];
    ["Offset of field: sg_vertex_attr_state::offset"]
        [::std::mem::offset_of!(sg_vertex_attr_state, offset) - 4usize];
    ["Offset of field: sg_vertex_attr_state::format"]
        [::std::mem::offset_of!(sg_vertex_attr_state, format) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_layout_state {
    pub buffers: [sg_vertex_buffer_layout_state; 8usize],
    pub attrs: [sg_vertex_attr_state; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_layout_state"][::std::mem::size_of::<sg_vertex_layout_state>() - 288usize];
    ["Alignment of sg_vertex_layout_state"]
        [::std::mem::align_of::<sg_vertex_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_layout_state::buffers"]
        [::std::mem::offset_of!(sg_vertex_layout_state, buffers) - 0usize];
    ["Offset of field: sg_vertex_layout_state::attrs"]
        [::std::mem::offset_of!(sg_vertex_layout_state, attrs) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_face_state {
    pub compare: sg_compare_func,
    pub fail_op: sg_stencil_op,
    pub depth_fail_op: sg_stencil_op,
    pub pass_op: sg_stencil_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_face_state"][::std::mem::size_of::<sg_stencil_face_state>() - 16usize];
    ["Alignment of sg_stencil_face_state"]
        [::std::mem::align_of::<sg_stencil_face_state>() - 4usize];
    ["Offset of field: sg_stencil_face_state::compare"]
        [::std::mem::offset_of!(sg_stencil_face_state, compare) - 0usize];
    ["Offset of field: sg_stencil_face_state::fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, fail_op) - 4usize];
    ["Offset of field: sg_stencil_face_state::depth_fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, depth_fail_op) - 8usize];
    ["Offset of field: sg_stencil_face_state::pass_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, pass_op) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_state {
    pub enabled: bool,
    pub front: sg_stencil_face_state,
    pub back: sg_stencil_face_state,
    pub read_mask: u8,
    pub write_mask: u8,
    pub ref_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_state"][::std::mem::size_of::<sg_stencil_state>() - 40usize];
    ["Alignment of sg_stencil_state"][::std::mem::align_of::<sg_stencil_state>() - 4usize];
    ["Offset of field: sg_stencil_state::enabled"]
        [::std::mem::offset_of!(sg_stencil_state, enabled) - 0usize];
    ["Offset of field: sg_stencil_state::front"]
        [::std::mem::offset_of!(sg_stencil_state, front) - 4usize];
    ["Offset of field: sg_stencil_state::back"]
        [::std::mem::offset_of!(sg_stencil_state, back) - 20usize];
    ["Offset of field: sg_stencil_state::read_mask"]
        [::std::mem::offset_of!(sg_stencil_state, read_mask) - 36usize];
    ["Offset of field: sg_stencil_state::write_mask"]
        [::std::mem::offset_of!(sg_stencil_state, write_mask) - 37usize];
    ["Offset of field: sg_stencil_state::ref_"]
        [::std::mem::offset_of!(sg_stencil_state, ref_) - 38usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_state {
    pub pixel_format: sg_pixel_format,
    pub compare: sg_compare_func,
    pub write_enabled: bool,
    pub bias: f32,
    pub bias_slope_scale: f32,
    pub bias_clamp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_state"][::std::mem::size_of::<sg_depth_state>() - 24usize];
    ["Alignment of sg_depth_state"][::std::mem::align_of::<sg_depth_state>() - 4usize];
    ["Offset of field: sg_depth_state::pixel_format"]
        [::std::mem::offset_of!(sg_depth_state, pixel_format) - 0usize];
    ["Offset of field: sg_depth_state::compare"]
        [::std::mem::offset_of!(sg_depth_state, compare) - 4usize];
    ["Offset of field: sg_depth_state::write_enabled"]
        [::std::mem::offset_of!(sg_depth_state, write_enabled) - 8usize];
    ["Offset of field: sg_depth_state::bias"]
        [::std::mem::offset_of!(sg_depth_state, bias) - 12usize];
    ["Offset of field: sg_depth_state::bias_slope_scale"]
        [::std::mem::offset_of!(sg_depth_state, bias_slope_scale) - 16usize];
    ["Offset of field: sg_depth_state::bias_clamp"]
        [::std::mem::offset_of!(sg_depth_state, bias_clamp) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_blend_state {
    pub enabled: bool,
    pub src_factor_rgb: sg_blend_factor,
    pub dst_factor_rgb: sg_blend_factor,
    pub op_rgb: sg_blend_op,
    pub src_factor_alpha: sg_blend_factor,
    pub dst_factor_alpha: sg_blend_factor,
    pub op_alpha: sg_blend_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_blend_state"][::std::mem::size_of::<sg_blend_state>() - 28usize];
    ["Alignment of sg_blend_state"][::std::mem::align_of::<sg_blend_state>() - 4usize];
    ["Offset of field: sg_blend_state::enabled"]
        [::std::mem::offset_of!(sg_blend_state, enabled) - 0usize];
    ["Offset of field: sg_blend_state::src_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_rgb) - 4usize];
    ["Offset of field: sg_blend_state::dst_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_rgb) - 8usize];
    ["Offset of field: sg_blend_state::op_rgb"]
        [::std::mem::offset_of!(sg_blend_state, op_rgb) - 12usize];
    ["Offset of field: sg_blend_state::src_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_alpha) - 16usize];
    ["Offset of field: sg_blend_state::dst_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_alpha) - 20usize];
    ["Offset of field: sg_blend_state::op_alpha"]
        [::std::mem::offset_of!(sg_blend_state, op_alpha) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_target_state {
    pub pixel_format: sg_pixel_format,
    pub write_mask: sg_color_mask,
    pub blend: sg_blend_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_target_state"][::std::mem::size_of::<sg_color_target_state>() - 36usize];
    ["Alignment of sg_color_target_state"]
        [::std::mem::align_of::<sg_color_target_state>() - 4usize];
    ["Offset of field: sg_color_target_state::pixel_format"]
        [::std::mem::offset_of!(sg_color_target_state, pixel_format) - 0usize];
    ["Offset of field: sg_color_target_state::write_mask"]
        [::std::mem::offset_of!(sg_color_target_state, write_mask) - 4usize];
    ["Offset of field: sg_color_target_state::blend"]
        [::std::mem::offset_of!(sg_color_target_state, blend) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_desc {
    pub _start_canary: u32,
    pub shader: sg_shader,
    pub layout: sg_vertex_layout_state,
    pub depth: sg_depth_state,
    pub stencil: sg_stencil_state,
    pub color_count: ::std::os::raw::c_int,
    pub colors: [sg_color_target_state; 4usize],
    pub primitive_type: sg_primitive_type,
    pub index_type: sg_index_type,
    pub cull_mode: sg_cull_mode,
    pub face_winding: sg_face_winding,
    pub sample_count: ::std::os::raw::c_int,
    pub blend_color: sg_color,
    pub alpha_to_coverage_enabled: bool,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_desc"][::std::mem::size_of::<sg_pipeline_desc>() - 556usize];
    ["Alignment of sg_pipeline_desc"][::std::mem::align_of::<sg_pipeline_desc>() - 4usize];
    ["Offset of field: sg_pipeline_desc::_start_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _start_canary) - 0usize];
    ["Offset of field: sg_pipeline_desc::shader"]
        [::std::mem::offset_of!(sg_pipeline_desc, shader) - 4usize];
    ["Offset of field: sg_pipeline_desc::layout"]
        [::std::mem::offset_of!(sg_pipeline_desc, layout) - 8usize];
    ["Offset of field: sg_pipeline_desc::depth"]
        [::std::mem::offset_of!(sg_pipeline_desc, depth) - 296usize];
    ["Offset of field: sg_pipeline_desc::stencil"]
        [::std::mem::offset_of!(sg_pipeline_desc, stencil) - 320usize];
    ["Offset of field: sg_pipeline_desc::color_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, color_count) - 360usize];
    ["Offset of field: sg_pipeline_desc::colors"]
        [::std::mem::offset_of!(sg_pipeline_desc, colors) - 364usize];
    ["Offset of field: sg_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, primitive_type) - 508usize];
    ["Offset of field: sg_pipeline_desc::index_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, index_type) - 512usize];
    ["Offset of field: sg_pipeline_desc::cull_mode"]
        [::std::mem::offset_of!(sg_pipeline_desc, cull_mode) - 516usize];
    ["Offset of field: sg_pipeline_desc::face_winding"]
        [::std::mem::offset_of!(sg_pipeline_desc, face_winding) - 520usize];
    ["Offset of field: sg_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, sample_count) - 524usize];
    ["Offset of field: sg_pipeline_desc::blend_color"]
        [::std::mem::offset_of!(sg_pipeline_desc, blend_color) - 528usize];
    ["Offset of field: sg_pipeline_desc::alpha_to_coverage_enabled"]
        [::std::mem::offset_of!(sg_pipeline_desc, alpha_to_coverage_enabled) - 544usize];
    ["Offset of field: sg_pipeline_desc::label"]
        [::std::mem::offset_of!(sg_pipeline_desc, label) - 548usize];
    ["Offset of field: sg_pipeline_desc::_end_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _end_canary) - 552usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachment_desc {
    pub image: sg_image,
    pub mip_level: ::std::os::raw::c_int,
    pub slice: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachment_desc"][::std::mem::size_of::<sg_attachment_desc>() - 12usize];
    ["Alignment of sg_attachment_desc"][::std::mem::align_of::<sg_attachment_desc>() - 4usize];
    ["Offset of field: sg_attachment_desc::image"]
        [::std::mem::offset_of!(sg_attachment_desc, image) - 0usize];
    ["Offset of field: sg_attachment_desc::mip_level"]
        [::std::mem::offset_of!(sg_attachment_desc, mip_level) - 4usize];
    ["Offset of field: sg_attachment_desc::slice"]
        [::std::mem::offset_of!(sg_attachment_desc, slice) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_desc {
    pub _start_canary: u32,
    pub colors: [sg_attachment_desc; 4usize],
    pub resolves: [sg_attachment_desc; 4usize],
    pub depth_stencil: sg_attachment_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_desc"][::std::mem::size_of::<sg_attachments_desc>() - 120usize];
    ["Alignment of sg_attachments_desc"][::std::mem::align_of::<sg_attachments_desc>() - 4usize];
    ["Offset of field: sg_attachments_desc::_start_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _start_canary) - 0usize];
    ["Offset of field: sg_attachments_desc::colors"]
        [::std::mem::offset_of!(sg_attachments_desc, colors) - 4usize];
    ["Offset of field: sg_attachments_desc::resolves"]
        [::std::mem::offset_of!(sg_attachments_desc, resolves) - 52usize];
    ["Offset of field: sg_attachments_desc::depth_stencil"]
        [::std::mem::offset_of!(sg_attachments_desc, depth_stencil) - 100usize];
    ["Offset of field: sg_attachments_desc::label"]
        [::std::mem::offset_of!(sg_attachments_desc, label) - 112usize];
    ["Offset of field: sg_attachments_desc::_end_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _end_canary) - 116usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_trace_hooks {
    pub user_data: *mut ::std::os::raw::c_void,
    pub reset_state_cache:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub make_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_buffer_desc,
            result: sg_buffer,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_image: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_image_desc,
            result: sg_image,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_sampler_desc,
            result: sg_sampler,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_shader: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_shader_desc,
            result: sg_shader,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pipeline_desc,
            result: sg_pipeline,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_attachments_desc,
            result: sg_attachments,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub destroy_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_image: ::std::option::Option<
        unsafe extern "C" fn(img: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_shader: ::std::option::Option<
        unsafe extern "C" fn(shd: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub update_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub update_image: ::std::option::Option<
        unsafe extern "C" fn(
            img: sg_image,
            data: *const sg_image_data,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub append_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            result: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub begin_pass: ::std::option::Option<
        unsafe extern "C" fn(pass: *const sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_viewport: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_scissor_rect: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_bindings: ::std::option::Option<
        unsafe extern "C" fn(bindings: *const sg_bindings, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_uniforms: ::std::option::Option<
        unsafe extern "C" fn(
            stage: sg_shader_stage,
            ub_index: ::std::os::raw::c_int,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub draw: ::std::option::Option<
        unsafe extern "C" fn(
            base_element: ::std::os::raw::c_int,
            num_elements: ::std::os::raw::c_int,
            num_instances: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub end_pass:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub commit: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub alloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(result: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_image: ::std::option::Option<
        unsafe extern "C" fn(result: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(result: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_shader: ::std::option::Option<
        unsafe extern "C" fn(result: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(result: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(result: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub init_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf_id: sg_buffer,
            desc: *const sg_buffer_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_image: ::std::option::Option<
        unsafe extern "C" fn(
            img_id: sg_image,
            desc: *const sg_image_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            smp_id: sg_sampler,
            desc: *const sg_sampler_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_shader: ::std::option::Option<
        unsafe extern "C" fn(
            shd_id: sg_shader,
            desc: *const sg_shader_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            pip_id: sg_pipeline,
            desc: *const sg_pipeline_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            atts_id: sg_attachments,
            desc: *const sg_attachments_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub uninit_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub push_debug_group: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub pop_debug_group:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_trace_hooks"][::std::mem::size_of::<sg_trace_hooks>() - 232usize];
    ["Alignment of sg_trace_hooks"][::std::mem::align_of::<sg_trace_hooks>() - 4usize];
    ["Offset of field: sg_trace_hooks::user_data"]
        [::std::mem::offset_of!(sg_trace_hooks, user_data) - 0usize];
    ["Offset of field: sg_trace_hooks::reset_state_cache"]
        [::std::mem::offset_of!(sg_trace_hooks, reset_state_cache) - 4usize];
    ["Offset of field: sg_trace_hooks::make_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, make_buffer) - 8usize];
    ["Offset of field: sg_trace_hooks::make_image"]
        [::std::mem::offset_of!(sg_trace_hooks, make_image) - 12usize];
    ["Offset of field: sg_trace_hooks::make_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, make_sampler) - 16usize];
    ["Offset of field: sg_trace_hooks::make_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, make_shader) - 20usize];
    ["Offset of field: sg_trace_hooks::make_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, make_pipeline) - 24usize];
    ["Offset of field: sg_trace_hooks::make_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, make_attachments) - 28usize];
    ["Offset of field: sg_trace_hooks::destroy_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_buffer) - 32usize];
    ["Offset of field: sg_trace_hooks::destroy_image"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_image) - 36usize];
    ["Offset of field: sg_trace_hooks::destroy_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_sampler) - 40usize];
    ["Offset of field: sg_trace_hooks::destroy_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_shader) - 44usize];
    ["Offset of field: sg_trace_hooks::destroy_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_pipeline) - 48usize];
    ["Offset of field: sg_trace_hooks::destroy_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_attachments) - 52usize];
    ["Offset of field: sg_trace_hooks::update_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, update_buffer) - 56usize];
    ["Offset of field: sg_trace_hooks::update_image"]
        [::std::mem::offset_of!(sg_trace_hooks, update_image) - 60usize];
    ["Offset of field: sg_trace_hooks::append_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, append_buffer) - 64usize];
    ["Offset of field: sg_trace_hooks::begin_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, begin_pass) - 68usize];
    ["Offset of field: sg_trace_hooks::apply_viewport"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_viewport) - 72usize];
    ["Offset of field: sg_trace_hooks::apply_scissor_rect"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_scissor_rect) - 76usize];
    ["Offset of field: sg_trace_hooks::apply_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_pipeline) - 80usize];
    ["Offset of field: sg_trace_hooks::apply_bindings"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_bindings) - 84usize];
    ["Offset of field: sg_trace_hooks::apply_uniforms"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_uniforms) - 88usize];
    ["Offset of field: sg_trace_hooks::draw"]
        [::std::mem::offset_of!(sg_trace_hooks, draw) - 92usize];
    ["Offset of field: sg_trace_hooks::end_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, end_pass) - 96usize];
    ["Offset of field: sg_trace_hooks::commit"]
        [::std::mem::offset_of!(sg_trace_hooks, commit) - 100usize];
    ["Offset of field: sg_trace_hooks::alloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_buffer) - 104usize];
    ["Offset of field: sg_trace_hooks::alloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_image) - 108usize];
    ["Offset of field: sg_trace_hooks::alloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_sampler) - 112usize];
    ["Offset of field: sg_trace_hooks::alloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_shader) - 116usize];
    ["Offset of field: sg_trace_hooks::alloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_pipeline) - 120usize];
    ["Offset of field: sg_trace_hooks::alloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_attachments) - 124usize];
    ["Offset of field: sg_trace_hooks::dealloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_buffer) - 128usize];
    ["Offset of field: sg_trace_hooks::dealloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_image) - 132usize];
    ["Offset of field: sg_trace_hooks::dealloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_sampler) - 136usize];
    ["Offset of field: sg_trace_hooks::dealloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_shader) - 140usize];
    ["Offset of field: sg_trace_hooks::dealloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_pipeline) - 144usize];
    ["Offset of field: sg_trace_hooks::dealloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_attachments) - 148usize];
    ["Offset of field: sg_trace_hooks::init_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, init_buffer) - 152usize];
    ["Offset of field: sg_trace_hooks::init_image"]
        [::std::mem::offset_of!(sg_trace_hooks, init_image) - 156usize];
    ["Offset of field: sg_trace_hooks::init_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, init_sampler) - 160usize];
    ["Offset of field: sg_trace_hooks::init_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, init_shader) - 164usize];
    ["Offset of field: sg_trace_hooks::init_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, init_pipeline) - 168usize];
    ["Offset of field: sg_trace_hooks::init_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, init_attachments) - 172usize];
    ["Offset of field: sg_trace_hooks::uninit_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_buffer) - 176usize];
    ["Offset of field: sg_trace_hooks::uninit_image"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_image) - 180usize];
    ["Offset of field: sg_trace_hooks::uninit_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_sampler) - 184usize];
    ["Offset of field: sg_trace_hooks::uninit_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_shader) - 188usize];
    ["Offset of field: sg_trace_hooks::uninit_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_pipeline) - 192usize];
    ["Offset of field: sg_trace_hooks::uninit_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_attachments) - 196usize];
    ["Offset of field: sg_trace_hooks::fail_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_buffer) - 200usize];
    ["Offset of field: sg_trace_hooks::fail_image"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_image) - 204usize];
    ["Offset of field: sg_trace_hooks::fail_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_sampler) - 208usize];
    ["Offset of field: sg_trace_hooks::fail_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_shader) - 212usize];
    ["Offset of field: sg_trace_hooks::fail_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_pipeline) - 216usize];
    ["Offset of field: sg_trace_hooks::fail_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_attachments) - 220usize];
    ["Offset of field: sg_trace_hooks::push_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, push_debug_group) - 224usize];
    ["Offset of field: sg_trace_hooks::pop_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, pop_debug_group) - 228usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_slot_info {
    pub state: sg_resource_state,
    pub res_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_slot_info"][::std::mem::size_of::<sg_slot_info>() - 8usize];
    ["Alignment of sg_slot_info"][::std::mem::align_of::<sg_slot_info>() - 4usize];
    ["Offset of field: sg_slot_info::state"][::std::mem::offset_of!(sg_slot_info, state) - 0usize];
    ["Offset of field: sg_slot_info::res_id"]
        [::std::mem::offset_of!(sg_slot_info, res_id) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_info {
    pub slot: sg_slot_info,
    pub update_frame_index: u32,
    pub append_frame_index: u32,
    pub append_pos: ::std::os::raw::c_int,
    pub append_overflow: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_info"][::std::mem::size_of::<sg_buffer_info>() - 32usize];
    ["Alignment of sg_buffer_info"][::std::mem::align_of::<sg_buffer_info>() - 4usize];
    ["Offset of field: sg_buffer_info::slot"]
        [::std::mem::offset_of!(sg_buffer_info, slot) - 0usize];
    ["Offset of field: sg_buffer_info::update_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, update_frame_index) - 8usize];
    ["Offset of field: sg_buffer_info::append_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, append_frame_index) - 12usize];
    ["Offset of field: sg_buffer_info::append_pos"]
        [::std::mem::offset_of!(sg_buffer_info, append_pos) - 16usize];
    ["Offset of field: sg_buffer_info::append_overflow"]
        [::std::mem::offset_of!(sg_buffer_info, append_overflow) - 20usize];
    ["Offset of field: sg_buffer_info::num_slots"]
        [::std::mem::offset_of!(sg_buffer_info, num_slots) - 24usize];
    ["Offset of field: sg_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_buffer_info, active_slot) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_info {
    pub slot: sg_slot_info,
    pub upd_frame_index: u32,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_info"][::std::mem::size_of::<sg_image_info>() - 20usize];
    ["Alignment of sg_image_info"][::std::mem::align_of::<sg_image_info>() - 4usize];
    ["Offset of field: sg_image_info::slot"][::std::mem::offset_of!(sg_image_info, slot) - 0usize];
    ["Offset of field: sg_image_info::upd_frame_index"]
        [::std::mem::offset_of!(sg_image_info, upd_frame_index) - 8usize];
    ["Offset of field: sg_image_info::num_slots"]
        [::std::mem::offset_of!(sg_image_info, num_slots) - 12usize];
    ["Offset of field: sg_image_info::active_slot"]
        [::std::mem::offset_of!(sg_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_info"][::std::mem::size_of::<sg_sampler_info>() - 8usize];
    ["Alignment of sg_sampler_info"][::std::mem::align_of::<sg_sampler_info>() - 4usize];
    ["Offset of field: sg_sampler_info::slot"]
        [::std::mem::offset_of!(sg_sampler_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_info"][::std::mem::size_of::<sg_shader_info>() - 8usize];
    ["Alignment of sg_shader_info"][::std::mem::align_of::<sg_shader_info>() - 4usize];
    ["Offset of field: sg_shader_info::slot"]
        [::std::mem::offset_of!(sg_shader_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_info"][::std::mem::size_of::<sg_pipeline_info>() - 8usize];
    ["Alignment of sg_pipeline_info"][::std::mem::align_of::<sg_pipeline_info>() - 4usize];
    ["Offset of field: sg_pipeline_info::slot"]
        [::std::mem::offset_of!(sg_pipeline_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_info"][::std::mem::size_of::<sg_attachments_info>() - 8usize];
    ["Alignment of sg_attachments_info"][::std::mem::align_of::<sg_attachments_info>() - 4usize];
    ["Offset of field: sg_attachments_info::slot"]
        [::std::mem::offset_of!(sg_attachments_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_gl {
    pub num_bind_buffer: u32,
    pub num_active_texture: u32,
    pub num_bind_texture: u32,
    pub num_bind_sampler: u32,
    pub num_use_program: u32,
    pub num_render_state: u32,
    pub num_vertex_attrib_pointer: u32,
    pub num_vertex_attrib_divisor: u32,
    pub num_enable_vertex_attrib_array: u32,
    pub num_disable_vertex_attrib_array: u32,
    pub num_uniform: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_gl"][::std::mem::size_of::<sg_frame_stats_gl>() - 44usize];
    ["Alignment of sg_frame_stats_gl"][::std::mem::align_of::<sg_frame_stats_gl>() - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_gl::num_active_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_active_texture) - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_texture) - 8usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_sampler"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_sampler) - 12usize];
    ["Offset of field: sg_frame_stats_gl::num_use_program"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_use_program) - 16usize];
    ["Offset of field: sg_frame_stats_gl::num_render_state"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_render_state) - 20usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_pointer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_pointer) - 24usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_divisor"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_divisor) - 28usize];
    ["Offset of field: sg_frame_stats_gl::num_enable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_enable_vertex_attrib_array) - 32usize];
    ["Offset of field: sg_frame_stats_gl::num_disable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_disable_vertex_attrib_array) - 36usize];
    ["Offset of field: sg_frame_stats_gl::num_uniform"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_uniform) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pass {
    pub num_om_set_render_targets: u32,
    pub num_clear_render_target_view: u32,
    pub num_clear_depth_stencil_view: u32,
    pub num_resolve_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pass"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pass>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_pass"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pass>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_om_set_render_targets"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_om_set_render_targets) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_render_target_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_render_target_view) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_depth_stencil_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_depth_stencil_view) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_resolve_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_resolve_subresource) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pipeline {
    pub num_rs_set_state: u32,
    pub num_om_set_depth_stencil_state: u32,
    pub num_om_set_blend_state: u32,
    pub num_ia_set_primitive_topology: u32,
    pub num_ia_set_input_layout: u32,
    pub num_vs_set_shader: u32,
    pub num_vs_set_constant_buffers: u32,
    pub num_ps_set_shader: u32,
    pub num_ps_set_constant_buffers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pipeline>() - 36usize];
    ["Alignment of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_rs_set_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_rs_set_state) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_om_set_depth_stencil_state
    ) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_blend_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_om_set_blend_state) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_primitive_topology"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ia_set_primitive_topology
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_input_layout"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ia_set_input_layout) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_vs_set_shader) - 20usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_vs_set_constant_buffers
    ) - 24usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ps_set_shader) - 28usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ps_set_constant_buffers
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_bindings {
    pub num_ia_set_vertex_buffers: u32,
    pub num_ia_set_index_buffer: u32,
    pub num_vs_set_shader_resources: u32,
    pub num_ps_set_shader_resources: u32,
    pub num_vs_set_samplers: u32,
    pub num_ps_set_samplers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_bindings"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_bindings>() - 24usize];
    ["Alignment of sg_frame_stats_d3d11_bindings"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_vertex_buffers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_vertex_buffers) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_index_buffer) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_vs_set_shader_resources
    ) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_ps_set_shader_resources
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_vs_set_samplers) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ps_set_samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_uniforms {
    pub num_update_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Alignment of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_uniforms::num_update_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_uniforms, num_update_subresource) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_draw {
    pub num_draw_indexed_instanced: u32,
    pub num_draw_indexed: u32,
    pub num_draw_instanced: u32,
    pub num_draw: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_draw"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_draw>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_draw"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_draw>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed_instanced) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_instanced) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11 {
    pub pass: sg_frame_stats_d3d11_pass,
    pub pipeline: sg_frame_stats_d3d11_pipeline,
    pub bindings: sg_frame_stats_d3d11_bindings,
    pub uniforms: sg_frame_stats_d3d11_uniforms,
    pub draw: sg_frame_stats_d3d11_draw,
    pub num_map: u32,
    pub num_unmap: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11"][::std::mem::size_of::<sg_frame_stats_d3d11>() - 104usize];
    ["Alignment of sg_frame_stats_d3d11"][::std::mem::align_of::<sg_frame_stats_d3d11>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11::pass"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pass) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pipeline) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, bindings) - 52usize];
    ["Offset of field: sg_frame_stats_d3d11::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, uniforms) - 76usize];
    ["Offset of field: sg_frame_stats_d3d11::draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, draw) - 80usize];
    ["Offset of field: sg_frame_stats_d3d11::num_map"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_map) - 96usize];
    ["Offset of field: sg_frame_stats_d3d11::num_unmap"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_unmap) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_idpool {
    pub num_added: u32,
    pub num_released: u32,
    pub num_garbage_collected: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_idpool"]
        [::std::mem::size_of::<sg_frame_stats_metal_idpool>() - 12usize];
    ["Alignment of sg_frame_stats_metal_idpool"]
        [::std::mem::align_of::<sg_frame_stats_metal_idpool>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_added"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_added) - 0usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_released"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_released) - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_garbage_collected"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_garbage_collected) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_pipeline {
    pub num_set_blend_color: u32,
    pub num_set_cull_mode: u32,
    pub num_set_front_facing_winding: u32,
    pub num_set_stencil_reference_value: u32,
    pub num_set_depth_bias: u32,
    pub num_set_render_pipeline_state: u32,
    pub num_set_depth_stencil_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_metal_pipeline>() - 28usize];
    ["Alignment of sg_frame_stats_metal_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_metal_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_blend_color"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_blend_color) - 0usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_cull_mode"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_cull_mode) - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_front_facing_winding"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_front_facing_winding
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_stencil_reference_value"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_stencil_reference_value
    )
        - 12usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_bias"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_depth_bias) - 16usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_render_pipeline_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_render_pipeline_state
    ) - 20usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_depth_stencil_state
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_set_vertex_texture: u32,
    pub num_set_vertex_sampler_state: u32,
    pub num_set_fragment_texture: u32,
    pub num_set_fragment_sampler_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_bindings"]
        [::std::mem::size_of::<sg_frame_stats_metal_bindings>() - 20usize];
    ["Alignment of sg_frame_stats_metal_bindings"]
        [::std::mem::align_of::<sg_frame_stats_metal_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_texture) - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_vertex_sampler_state
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_fragment_texture) - 12usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_fragment_sampler_state
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_uniforms {
    pub num_set_vertex_buffer_offset: u32,
    pub num_set_fragment_buffer_offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_metal_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_metal_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_metal_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_vertex_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_vertex_buffer_offset
    ) - 0usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_fragment_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_fragment_buffer_offset
    ) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal {
    pub idpool: sg_frame_stats_metal_idpool,
    pub pipeline: sg_frame_stats_metal_pipeline,
    pub bindings: sg_frame_stats_metal_bindings,
    pub uniforms: sg_frame_stats_metal_uniforms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal"][::std::mem::size_of::<sg_frame_stats_metal>() - 68usize];
    ["Alignment of sg_frame_stats_metal"][::std::mem::align_of::<sg_frame_stats_metal>() - 4usize];
    ["Offset of field: sg_frame_stats_metal::idpool"]
        [::std::mem::offset_of!(sg_frame_stats_metal, idpool) - 0usize];
    ["Offset of field: sg_frame_stats_metal::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_metal, pipeline) - 12usize];
    ["Offset of field: sg_frame_stats_metal::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_metal, bindings) - 40usize];
    ["Offset of field: sg_frame_stats_metal::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_metal, uniforms) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_uniforms {
    pub num_set_bindgroup: u32,
    pub size_write_buffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, num_set_bindgroup) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::size_write_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, size_write_buffer) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_skip_redundant_vertex_buffer: u32,
    pub num_set_index_buffer: u32,
    pub num_skip_redundant_index_buffer: u32,
    pub num_create_bindgroup: u32,
    pub num_discard_bindgroup: u32,
    pub num_set_bindgroup: u32,
    pub num_skip_redundant_bindgroup: u32,
    pub num_bindgroup_cache_hits: u32,
    pub num_bindgroup_cache_misses: u32,
    pub num_bindgroup_cache_collisions: u32,
    pub num_bindgroup_cache_hash_vs_key_mismatch: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_bindings"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_bindings>() - 48usize];
    ["Alignment of sg_frame_stats_wgpu_bindings"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_vertex_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_vertex_buffer
    ) - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_index_buffer) - 8usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_index_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_index_buffer
    ) - 12usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_create_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_create_bindgroup) - 16usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_discard_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_discard_bindgroup) - 20usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_bindgroup) - 24usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_bindgroup"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_bindgroup
    ) - 28usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hits"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_bindgroup_cache_hits) - 32usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_misses"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_misses
    ) - 36usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_collisions"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_collisions
    ) - 40usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hash_vs_key_mismatch"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_hash_vs_key_mismatch
    )
        - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu {
    pub uniforms: sg_frame_stats_wgpu_uniforms,
    pub bindings: sg_frame_stats_wgpu_bindings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu"][::std::mem::size_of::<sg_frame_stats_wgpu>() - 56usize];
    ["Alignment of sg_frame_stats_wgpu"][::std::mem::align_of::<sg_frame_stats_wgpu>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, uniforms) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, bindings) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats {
    pub frame_index: u32,
    pub num_passes: u32,
    pub num_apply_viewport: u32,
    pub num_apply_scissor_rect: u32,
    pub num_apply_pipeline: u32,
    pub num_apply_bindings: u32,
    pub num_apply_uniforms: u32,
    pub num_draw: u32,
    pub num_update_buffer: u32,
    pub num_append_buffer: u32,
    pub num_update_image: u32,
    pub size_apply_uniforms: u32,
    pub size_update_buffer: u32,
    pub size_append_buffer: u32,
    pub size_update_image: u32,
    pub gl: sg_frame_stats_gl,
    pub d3d11: sg_frame_stats_d3d11,
    pub metal: sg_frame_stats_metal,
    pub wgpu: sg_frame_stats_wgpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats"][::std::mem::size_of::<sg_frame_stats>() - 332usize];
    ["Alignment of sg_frame_stats"][::std::mem::align_of::<sg_frame_stats>() - 4usize];
    ["Offset of field: sg_frame_stats::frame_index"]
        [::std::mem::offset_of!(sg_frame_stats, frame_index) - 0usize];
    ["Offset of field: sg_frame_stats::num_passes"]
        [::std::mem::offset_of!(sg_frame_stats, num_passes) - 4usize];
    ["Offset of field: sg_frame_stats::num_apply_viewport"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_viewport) - 8usize];
    ["Offset of field: sg_frame_stats::num_apply_scissor_rect"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_scissor_rect) - 12usize];
    ["Offset of field: sg_frame_stats::num_apply_pipeline"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_pipeline) - 16usize];
    ["Offset of field: sg_frame_stats::num_apply_bindings"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_bindings) - 20usize];
    ["Offset of field: sg_frame_stats::num_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_uniforms) - 24usize];
    ["Offset of field: sg_frame_stats::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats, num_draw) - 28usize];
    ["Offset of field: sg_frame_stats::num_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_buffer) - 32usize];
    ["Offset of field: sg_frame_stats::num_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_append_buffer) - 36usize];
    ["Offset of field: sg_frame_stats::num_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_image) - 40usize];
    ["Offset of field: sg_frame_stats::size_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, size_apply_uniforms) - 44usize];
    ["Offset of field: sg_frame_stats::size_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_buffer) - 48usize];
    ["Offset of field: sg_frame_stats::size_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_append_buffer) - 52usize];
    ["Offset of field: sg_frame_stats::size_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_image) - 56usize];
    ["Offset of field: sg_frame_stats::gl"][::std::mem::offset_of!(sg_frame_stats, gl) - 60usize];
    ["Offset of field: sg_frame_stats::d3d11"]
        [::std::mem::offset_of!(sg_frame_stats, d3d11) - 104usize];
    ["Offset of field: sg_frame_stats::metal"]
        [::std::mem::offset_of!(sg_frame_stats, metal) - 208usize];
    ["Offset of field: sg_frame_stats::wgpu"]
        [::std::mem::offset_of!(sg_frame_stats, wgpu) - 276usize];
};
pub const sg_log_item_SG_LOGITEM_OK: sg_log_item = 0;
pub const sg_log_item_SG_LOGITEM_MALLOC_FAILED: sg_log_item = 1;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 2;
pub const sg_log_item_SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED: sg_log_item = 3;
pub const sg_log_item_SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED: sg_log_item = 4;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_COMPILATION_FAILED: sg_log_item = 5;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_LINKING_FAILED: sg_log_item = 6;
pub const sg_log_item_SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER: sg_log_item = 7;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER: sg_log_item = 8;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNDEFINED: sg_log_item = 9;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT: sg_log_item = 10;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT: sg_log_item =
    11;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNSUPPORTED: sg_log_item = 12;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE: sg_log_item = 13;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNKNOWN: sg_log_item = 14;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED: sg_log_item = 15;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item =
    16;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED: sg_log_item = 17;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 18;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED: sg_log_item = 19;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED: sg_log_item = 20;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 21;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED: sg_log_item = 22;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED: sg_log_item = 23;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED: sg_log_item = 24;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED: sg_log_item = 25;
pub const sg_log_item_SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED: sg_log_item = 26;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED: sg_log_item = 27;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT: sg_log_item = 28;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED: sg_log_item = 29;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED: sg_log_item = 30;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED: sg_log_item = 31;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED: sg_log_item = 32;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED: sg_log_item = 33;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RTV_FAILED: sg_log_item = 34;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DSV_FAILED: sg_log_item = 35;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED: sg_log_item = 36;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED: sg_log_item = 37;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED: sg_log_item = 38;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_BUFFER_FAILED: sg_log_item = 39;
pub const sg_log_item_SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 40;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_TEXTURE_FAILED: sg_log_item = 41;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_SAMPLER_FAILED: sg_log_item = 42;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED: sg_log_item = 43;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_CREATION_FAILED: sg_log_item = 44;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT: sg_log_item = 45;
pub const sg_log_item_SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND: sg_log_item = 46;
pub const sg_log_item_SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND: sg_log_item = 47;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_FAILED: sg_log_item = 48;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_OUTPUT: sg_log_item = 49;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_DSS_FAILED: sg_log_item = 50;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPS_POOL_EXHAUSTED: sg_log_item = 51;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE: sg_log_item = 52;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_POW2: sg_log_item = 53;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATEBINDGROUP_FAILED: sg_log_item = 54;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_BUFFER_FAILED: sg_log_item = 55;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_FAILED: sg_log_item = 56;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 57;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SAMPLER_FAILED: sg_log_item = 58;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SHADER_MODULE_FAILED: sg_log_item = 59;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_IMAGES: sg_log_item = 60;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_SAMPLERS: sg_log_item = 61;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED: sg_log_item = 62;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_PIPELINE_LAYOUT_FAILED: sg_log_item = 63;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_RENDER_PIPELINE_FAILED: sg_log_item = 64;
pub const sg_log_item_SG_LOGITEM_WGPU_ATTACHMENTS_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 65;
pub const sg_log_item_SG_LOGITEM_IDENTICAL_COMMIT_LISTENER: sg_log_item = 66;
pub const sg_log_item_SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL: sg_log_item = 67;
pub const sg_log_item_SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED: sg_log_item = 68;
pub const sg_log_item_SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE: sg_log_item = 69;
pub const sg_log_item_SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE: sg_log_item = 70;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SAMPLER_INVALID_STATE: sg_log_item = 71;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE: sg_log_item = 72;
pub const sg_log_item_SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE: sg_log_item = 73;
pub const sg_log_item_SG_LOGITEM_DEALLOC_ATTACHMENTS_INVALID_STATE: sg_log_item = 74;
pub const sg_log_item_SG_LOGITEM_INIT_BUFFER_INVALID_STATE: sg_log_item = 75;
pub const sg_log_item_SG_LOGITEM_INIT_IMAGE_INVALID_STATE: sg_log_item = 76;
pub const sg_log_item_SG_LOGITEM_INIT_SAMPLER_INVALID_STATE: sg_log_item = 77;
pub const sg_log_item_SG_LOGITEM_INIT_SHADER_INVALID_STATE: sg_log_item = 78;
pub const sg_log_item_SG_LOGITEM_INIT_PIPELINE_INVALID_STATE: sg_log_item = 79;
pub const sg_log_item_SG_LOGITEM_INIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 80;
pub const sg_log_item_SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE: sg_log_item = 81;
pub const sg_log_item_SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE: sg_log_item = 82;
pub const sg_log_item_SG_LOGITEM_UNINIT_SAMPLER_INVALID_STATE: sg_log_item = 83;
pub const sg_log_item_SG_LOGITEM_UNINIT_SHADER_INVALID_STATE: sg_log_item = 84;
pub const sg_log_item_SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE: sg_log_item = 85;
pub const sg_log_item_SG_LOGITEM_UNINIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 86;
pub const sg_log_item_SG_LOGITEM_FAIL_BUFFER_INVALID_STATE: sg_log_item = 87;
pub const sg_log_item_SG_LOGITEM_FAIL_IMAGE_INVALID_STATE: sg_log_item = 88;
pub const sg_log_item_SG_LOGITEM_FAIL_SAMPLER_INVALID_STATE: sg_log_item = 89;
pub const sg_log_item_SG_LOGITEM_FAIL_SHADER_INVALID_STATE: sg_log_item = 90;
pub const sg_log_item_SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE: sg_log_item = 91;
pub const sg_log_item_SG_LOGITEM_FAIL_ATTACHMENTS_INVALID_STATE: sg_log_item = 92;
pub const sg_log_item_SG_LOGITEM_BUFFER_POOL_EXHAUSTED: sg_log_item = 93;
pub const sg_log_item_SG_LOGITEM_IMAGE_POOL_EXHAUSTED: sg_log_item = 94;
pub const sg_log_item_SG_LOGITEM_SAMPLER_POOL_EXHAUSTED: sg_log_item = 95;
pub const sg_log_item_SG_LOGITEM_SHADER_POOL_EXHAUSTED: sg_log_item = 96;
pub const sg_log_item_SG_LOGITEM_PIPELINE_POOL_EXHAUSTED: sg_log_item = 97;
pub const sg_log_item_SG_LOGITEM_PASS_POOL_EXHAUSTED: sg_log_item = 98;
pub const sg_log_item_SG_LOGITEM_BEGINPASS_ATTACHMENT_INVALID: sg_log_item = 99;
pub const sg_log_item_SG_LOGITEM_DRAW_WITHOUT_BINDINGS: sg_log_item = 100;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY: sg_log_item = 101;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE: sg_log_item = 102;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA: sg_log_item = 103;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE: sg_log_item = 104;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA: sg_log_item = 105;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA: sg_log_item = 106;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE: sg_log_item = 107;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY: sg_log_item = 108;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH: sg_log_item = 109;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT: sg_log_item = 110;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT: sg_log_item = 111;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT: sg_log_item = 112;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT: sg_log_item = 113;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT: sg_log_item = 114;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS: sg_log_item = 115;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_3D_IMAGE: sg_log_item = 116;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE: sg_log_item = 117;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE: sg_log_item = 118;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA: sg_log_item = 119;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA: sg_log_item = 120;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA: sg_log_item = 121;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE: sg_log_item = 122;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_CANARY: sg_log_item = 123;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MINFILTER_NONE: sg_log_item = 124;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MAGFILTER_NONE: sg_log_item = 125;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING:
    sg_log_item = 126;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_CANARY: sg_log_item = 127;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE: sg_log_item = 128;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE: sg_log_item = 129;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE: sg_log_item = 130;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE: sg_log_item = 131;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS: sg_log_item = 132;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS: sg_log_item = 133;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS: sg_log_item = 134;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME: sg_log_item = 135;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH: sg_log_item = 136;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT: sg_log_item = 137;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE: sg_log_item = 138;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGES: sg_log_item = 139;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_SAMPLERS: sg_log_item = 140;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_IMAGE_SLOT_OUT_OF_RANGE:
    sg_log_item = 141;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE : sg_log_item = 142 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_NAME_REQUIRED_FOR_GL:
    sg_log_item = 143;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_NAME_BUT_NOT_USED:
    sg_log_item = 144;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_IMAGE_BUT_NOT_USED:
    sg_log_item = 145;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_SAMPLER_BUT_NOT_USED:
    sg_log_item = 146;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED: sg_log_item =
    147;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED: sg_log_item = 148;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS:
    sg_log_item = 149;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS : sg_log_item = 150 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGE_SAMPLER_PAIRS: sg_log_item = 151;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS: sg_log_item = 152;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG: sg_log_item = 153;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY: sg_log_item = 154;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER: sg_log_item = 155;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS: sg_log_item = 156;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4: sg_log_item = 157;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS: sg_log_item = 158;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_CANARY: sg_log_item = 159;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_ATTACHMENTS: sg_log_item = 160;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_CONT_COLOR_ATTS: sg_log_item = 161;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE: sg_log_item = 162;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_MIPLEVEL: sg_log_item = 163;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_FACE: sg_log_item = 164;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_LAYER: sg_log_item = 165;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_SLICE: sg_log_item = 166;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_NO_RT: sg_log_item = 167;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_COLOR_INV_PIXELFORMAT: sg_log_item = 168;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_INV_PIXELFORMAT: sg_log_item = 169;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SIZES: sg_log_item = 170;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SAMPLE_COUNTS: sg_log_item = 171;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_COLOR_IMAGE_MSAA: sg_log_item =
    172;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE: sg_log_item = 173;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SAMPLE_COUNT: sg_log_item = 174;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_MIPLEVEL: sg_log_item = 175;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_FACE: sg_log_item = 176;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_LAYER: sg_log_item = 177;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SLICE: sg_log_item = 178;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_NO_RT: sg_log_item = 179;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_SIZES: sg_log_item = 180;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_FORMAT: sg_log_item = 181;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE: sg_log_item = 182;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_MIPLEVEL: sg_log_item = 183;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_FACE: sg_log_item = 184;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_LAYER: sg_log_item = 185;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_SLICE: sg_log_item = 186;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_NO_RT: sg_log_item = 187;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SIZES: sg_log_item = 188;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SAMPLE_COUNT: sg_log_item =
    189;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_CANARY: sg_log_item = 190;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_EXISTS: sg_log_item = 191;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_VALID: sg_log_item = 192;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE: sg_log_item = 193;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE: sg_log_item = 194;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE: sg_log_item =
    195;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH: sg_log_item = 196;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH_NOTSET: sg_log_item =
    197;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT: sg_log_item = 198;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT_NOTSET: sg_log_item =
    199;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT: sg_log_item = 200;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT_NOTSET:
    sg_log_item = 201;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT: sg_log_item = 202;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT_NOTSET:
    sg_log_item = 203;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_DEPTHFORMAT_NOTSET:
    sg_log_item = 204;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE:
    sg_log_item = 205;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE_NOTSET : sg_log_item = 206 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE:
    sg_log_item = 207;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE_NOTSET : sg_log_item = 208 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE:
    sg_log_item = 209;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE_NOTSET : sg_log_item = 210 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW: sg_log_item =
    211;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 212;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW:
    sg_log_item = 213;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 214;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 215;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 216 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW: sg_log_item =
    217;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 218;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW: sg_log_item =
    219;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 220;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 221;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 222 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_GL_EXPECT_FRAMEBUFFER_NOTSET:
    sg_log_item = 223;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID: sg_log_item = 224;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS: sg_log_item = 225;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID: sg_log_item = 226;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS: sg_log_item = 227;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_VALID: sg_log_item = 228;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_EXISTS: sg_log_item = 229;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_VALID: sg_log_item = 230;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_ATT_COUNT: sg_log_item = 231;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT: sg_log_item = 232;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT: sg_log_item = 233;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT: sg_log_item = 234;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE: sg_log_item = 235;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS: sg_log_item = 236;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID: sg_log_item = 237;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VBS: sg_log_item = 238;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_EXISTS: sg_log_item = 239;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_TYPE: sg_log_item = 240;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW: sg_log_item = 241;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_NO_IB: sg_log_item = 242;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB: sg_log_item = 243;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_EXISTS: sg_log_item = 244;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_TYPE: sg_log_item = 245;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW: sg_log_item = 246;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_IMAGE_BINDING: sg_log_item = 247;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS: sg_log_item = 248;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_TYPE_MISMATCH: sg_log_item = 249;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_MSAA: sg_log_item = 250;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 251;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_DEPTH_IMAGE: sg_log_item = 252;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 253;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_BINDING: sg_log_item = 254;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    255;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 256;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 257;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 258;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_SMP_EXISTS: sg_log_item = 259;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_IMAGE_BINDING: sg_log_item = 260;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS: sg_log_item = 261;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_TYPE_MISMATCH: sg_log_item = 262;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_MSAA: sg_log_item = 263;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 264;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_DEPTH_IMAGE: sg_log_item = 265;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 266;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_BINDING: sg_log_item = 267;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    268;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 269;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 270;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 271;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_SMP_EXISTS: sg_log_item = 272;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE: sg_log_item = 273;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT: sg_log_item = 274;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_SIZE: sg_log_item = 275;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE: sg_log_item = 276;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE: sg_log_item = 277;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE: sg_log_item = 278;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND: sg_log_item = 279;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_USAGE: sg_log_item = 280;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_SIZE: sg_log_item = 281;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE: sg_log_item = 282;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_USAGE: sg_log_item = 283;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_ONCE: sg_log_item = 284;
pub const sg_log_item_SG_LOGITEM_VALIDATION_FAILED: sg_log_item = 285;
pub type sg_log_item = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment_defaults {
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment_defaults"][::std::mem::size_of::<sg_environment_defaults>() - 12usize];
    ["Alignment of sg_environment_defaults"]
        [::std::mem::align_of::<sg_environment_defaults>() - 4usize];
    ["Offset of field: sg_environment_defaults::color_format"]
        [::std::mem::offset_of!(sg_environment_defaults, color_format) - 0usize];
    ["Offset of field: sg_environment_defaults::depth_format"]
        [::std::mem::offset_of!(sg_environment_defaults, depth_format) - 4usize];
    ["Offset of field: sg_environment_defaults::sample_count"]
        [::std::mem::offset_of!(sg_environment_defaults, sample_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_environment"][::std::mem::size_of::<sg_metal_environment>() - 4usize];
    ["Alignment of sg_metal_environment"][::std::mem::align_of::<sg_metal_environment>() - 4usize];
    ["Offset of field: sg_metal_environment::device"]
        [::std::mem::offset_of!(sg_metal_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_environment {
    pub device: *const ::std::os::raw::c_void,
    pub device_context: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_environment"][::std::mem::size_of::<sg_d3d11_environment>() - 8usize];
    ["Alignment of sg_d3d11_environment"][::std::mem::align_of::<sg_d3d11_environment>() - 4usize];
    ["Offset of field: sg_d3d11_environment::device"]
        [::std::mem::offset_of!(sg_d3d11_environment, device) - 0usize];
    ["Offset of field: sg_d3d11_environment::device_context"]
        [::std::mem::offset_of!(sg_d3d11_environment, device_context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_environment"][::std::mem::size_of::<sg_wgpu_environment>() - 4usize];
    ["Alignment of sg_wgpu_environment"][::std::mem::align_of::<sg_wgpu_environment>() - 4usize];
    ["Offset of field: sg_wgpu_environment::device"]
        [::std::mem::offset_of!(sg_wgpu_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment {
    pub defaults: sg_environment_defaults,
    pub metal: sg_metal_environment,
    pub d3d11: sg_d3d11_environment,
    pub wgpu: sg_wgpu_environment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment"][::std::mem::size_of::<sg_environment>() - 28usize];
    ["Alignment of sg_environment"][::std::mem::align_of::<sg_environment>() - 4usize];
    ["Offset of field: sg_environment::defaults"]
        [::std::mem::offset_of!(sg_environment, defaults) - 0usize];
    ["Offset of field: sg_environment::metal"]
        [::std::mem::offset_of!(sg_environment, metal) - 12usize];
    ["Offset of field: sg_environment::d3d11"]
        [::std::mem::offset_of!(sg_environment, d3d11) - 16usize];
    ["Offset of field: sg_environment::wgpu"]
        [::std::mem::offset_of!(sg_environment, wgpu) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_commit_listener {
    pub func: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_commit_listener"][::std::mem::size_of::<sg_commit_listener>() - 8usize];
    ["Alignment of sg_commit_listener"][::std::mem::align_of::<sg_commit_listener>() - 4usize];
    ["Offset of field: sg_commit_listener::func"]
        [::std::mem::offset_of!(sg_commit_listener, func) - 0usize];
    ["Offset of field: sg_commit_listener::user_data"]
        [::std::mem::offset_of!(sg_commit_listener, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_allocator"][::std::mem::size_of::<sg_allocator>() - 12usize];
    ["Alignment of sg_allocator"][::std::mem::align_of::<sg_allocator>() - 4usize];
    ["Offset of field: sg_allocator::alloc_fn"]
        [::std::mem::offset_of!(sg_allocator, alloc_fn) - 0usize];
    ["Offset of field: sg_allocator::free_fn"]
        [::std::mem::offset_of!(sg_allocator, free_fn) - 4usize];
    ["Offset of field: sg_allocator::user_data"]
        [::std::mem::offset_of!(sg_allocator, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_logger"][::std::mem::size_of::<sg_logger>() - 8usize];
    ["Alignment of sg_logger"][::std::mem::align_of::<sg_logger>() - 4usize];
    ["Offset of field: sg_logger::func"][::std::mem::offset_of!(sg_logger, func) - 0usize];
    ["Offset of field: sg_logger::user_data"]
        [::std::mem::offset_of!(sg_logger, user_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_desc {
    pub _start_canary: u32,
    pub buffer_pool_size: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub sampler_pool_size: ::std::os::raw::c_int,
    pub shader_pool_size: ::std::os::raw::c_int,
    pub pipeline_pool_size: ::std::os::raw::c_int,
    pub attachments_pool_size: ::std::os::raw::c_int,
    pub uniform_buffer_size: ::std::os::raw::c_int,
    pub max_commit_listeners: ::std::os::raw::c_int,
    pub disable_validation: bool,
    pub mtl_force_managed_storage_mode: bool,
    pub mtl_use_command_buffer_with_retained_references: bool,
    pub wgpu_disable_bindgroups_cache: bool,
    pub wgpu_bindgroups_cache_size: ::std::os::raw::c_int,
    pub allocator: sg_allocator,
    pub logger: sg_logger,
    pub environment: sg_environment,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_desc"][::std::mem::size_of::<sg_desc>() - 96usize];
    ["Alignment of sg_desc"][::std::mem::align_of::<sg_desc>() - 4usize];
    ["Offset of field: sg_desc::_start_canary"]
        [::std::mem::offset_of!(sg_desc, _start_canary) - 0usize];
    ["Offset of field: sg_desc::buffer_pool_size"]
        [::std::mem::offset_of!(sg_desc, buffer_pool_size) - 4usize];
    ["Offset of field: sg_desc::image_pool_size"]
        [::std::mem::offset_of!(sg_desc, image_pool_size) - 8usize];
    ["Offset of field: sg_desc::sampler_pool_size"]
        [::std::mem::offset_of!(sg_desc, sampler_pool_size) - 12usize];
    ["Offset of field: sg_desc::shader_pool_size"]
        [::std::mem::offset_of!(sg_desc, shader_pool_size) - 16usize];
    ["Offset of field: sg_desc::pipeline_pool_size"]
        [::std::mem::offset_of!(sg_desc, pipeline_pool_size) - 20usize];
    ["Offset of field: sg_desc::attachments_pool_size"]
        [::std::mem::offset_of!(sg_desc, attachments_pool_size) - 24usize];
    ["Offset of field: sg_desc::uniform_buffer_size"]
        [::std::mem::offset_of!(sg_desc, uniform_buffer_size) - 28usize];
    ["Offset of field: sg_desc::max_commit_listeners"]
        [::std::mem::offset_of!(sg_desc, max_commit_listeners) - 32usize];
    ["Offset of field: sg_desc::disable_validation"]
        [::std::mem::offset_of!(sg_desc, disable_validation) - 36usize];
    ["Offset of field: sg_desc::mtl_force_managed_storage_mode"]
        [::std::mem::offset_of!(sg_desc, mtl_force_managed_storage_mode) - 37usize];
    ["Offset of field: sg_desc::mtl_use_command_buffer_with_retained_references"][::std::mem::offset_of!(
        sg_desc,
        mtl_use_command_buffer_with_retained_references
    ) - 38usize];
    ["Offset of field: sg_desc::wgpu_disable_bindgroups_cache"]
        [::std::mem::offset_of!(sg_desc, wgpu_disable_bindgroups_cache) - 39usize];
    ["Offset of field: sg_desc::wgpu_bindgroups_cache_size"]
        [::std::mem::offset_of!(sg_desc, wgpu_bindgroups_cache_size) - 40usize];
    ["Offset of field: sg_desc::allocator"][::std::mem::offset_of!(sg_desc, allocator) - 44usize];
    ["Offset of field: sg_desc::logger"][::std::mem::offset_of!(sg_desc, logger) - 56usize];
    ["Offset of field: sg_desc::environment"]
        [::std::mem::offset_of!(sg_desc, environment) - 64usize];
    ["Offset of field: sg_desc::_end_canary"]
        [::std::mem::offset_of!(sg_desc, _end_canary) - 92usize];
};
unsafe extern "C" {
    pub fn sg_setup(desc: *const sg_desc);
}
unsafe extern "C" {
    pub fn sg_shutdown();
}
unsafe extern "C" {
    pub fn sg_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sg_reset_state_cache();
}
unsafe extern "C" {
    pub fn sg_install_trace_hooks(trace_hooks: *const sg_trace_hooks) -> sg_trace_hooks;
}
unsafe extern "C" {
    pub fn sg_push_debug_group(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sg_pop_debug_group();
}
unsafe extern "C" {
    pub fn sg_add_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_remove_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_make_buffer(desc: *const sg_buffer_desc) -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_make_image(desc: *const sg_image_desc) -> sg_image;
}
unsafe extern "C" {
    pub fn sg_make_sampler(desc: *const sg_sampler_desc) -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_make_shader(desc: *const sg_shader_desc) -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_make_pipeline(desc: *const sg_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_make_attachments(desc: *const sg_attachments_desc) -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_destroy_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_destroy_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_destroy_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_destroy_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_destroy_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_destroy_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_update_buffer(buf: sg_buffer, data: *const sg_range);
}
unsafe extern "C" {
    pub fn sg_update_image(img: sg_image, data: *const sg_image_data);
}
unsafe extern "C" {
    pub fn sg_append_buffer(buf: sg_buffer, data: *const sg_range) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_overflow(buf: sg_buffer) -> bool;
}
unsafe extern "C" {
    pub fn sg_query_buffer_will_overflow(buf: sg_buffer, size: usize) -> bool;
}
unsafe extern "C" {
    pub fn sg_begin_pass(pass: *const sg_pass);
}
unsafe extern "C" {
    pub fn sg_apply_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_apply_bindings(bindings: *const sg_bindings);
}
unsafe extern "C" {
    pub fn sg_apply_uniforms(
        stage: sg_shader_stage,
        ub_index: ::std::os::raw::c_int,
        data: *const sg_range,
    );
}
unsafe extern "C" {
    pub fn sg_draw(
        base_element: ::std::os::raw::c_int,
        num_elements: ::std::os::raw::c_int,
        num_instances: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sg_end_pass();
}
unsafe extern "C" {
    pub fn sg_commit();
}
unsafe extern "C" {
    pub fn sg_query_desc() -> sg_desc;
}
unsafe extern "C" {
    pub fn sg_query_backend() -> sg_backend;
}
unsafe extern "C" {
    pub fn sg_query_features() -> sg_features;
}
unsafe extern "C" {
    pub fn sg_query_limits() -> sg_limits;
}
unsafe extern "C" {
    pub fn sg_query_pixelformat(fmt: sg_pixel_format) -> sg_pixelformat_info;
}
unsafe extern "C" {
    pub fn sg_query_row_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_surface_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_state(buf: sg_buffer) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_image_state(img: sg_image) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_sampler_state(smp: sg_sampler) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_shader_state(shd: sg_shader) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_state(pip: sg_pipeline) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_attachments_state(atts: sg_attachments) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_buffer_info(buf: sg_buffer) -> sg_buffer_info;
}
unsafe extern "C" {
    pub fn sg_query_image_info(img: sg_image) -> sg_image_info;
}
unsafe extern "C" {
    pub fn sg_query_sampler_info(smp: sg_sampler) -> sg_sampler_info;
}
unsafe extern "C" {
    pub fn sg_query_shader_info(shd: sg_shader) -> sg_shader_info;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_info(pip: sg_pipeline) -> sg_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_query_attachments_info(atts: sg_attachments) -> sg_attachments_info;
}
unsafe extern "C" {
    pub fn sg_query_buffer_desc(buf: sg_buffer) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_desc(img: sg_image) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_desc(smp: sg_sampler) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_desc(shd: sg_shader) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_desc(pip: sg_pipeline) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_desc(atts: sg_attachments) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_query_buffer_defaults(desc: *const sg_buffer_desc) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_defaults(desc: *const sg_image_desc) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_defaults(desc: *const sg_sampler_desc) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_defaults(desc: *const sg_shader_desc) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_defaults(desc: *const sg_pipeline_desc) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_defaults(desc: *const sg_attachments_desc) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_alloc_buffer() -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_alloc_image() -> sg_image;
}
unsafe extern "C" {
    pub fn sg_alloc_sampler() -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_alloc_shader() -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_alloc_pipeline() -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_alloc_attachments() -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_dealloc_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_dealloc_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_dealloc_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_dealloc_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_dealloc_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_dealloc_attachments(attachments: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_init_buffer(buf: sg_buffer, desc: *const sg_buffer_desc);
}
unsafe extern "C" {
    pub fn sg_init_image(img: sg_image, desc: *const sg_image_desc);
}
unsafe extern "C" {
    pub fn sg_init_sampler(smg: sg_sampler, desc: *const sg_sampler_desc);
}
unsafe extern "C" {
    pub fn sg_init_shader(shd: sg_shader, desc: *const sg_shader_desc);
}
unsafe extern "C" {
    pub fn sg_init_pipeline(pip: sg_pipeline, desc: *const sg_pipeline_desc);
}
unsafe extern "C" {
    pub fn sg_init_attachments(attachments: sg_attachments, desc: *const sg_attachments_desc);
}
unsafe extern "C" {
    pub fn sg_uninit_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_uninit_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_uninit_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_uninit_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_uninit_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_uninit_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_fail_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_fail_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_fail_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_fail_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_fail_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_fail_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_enable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_disable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_frame_stats_enabled() -> bool;
}
unsafe extern "C" {
    pub fn sg_query_frame_stats() -> sg_frame_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_buffer_info"][::std::mem::size_of::<sg_d3d11_buffer_info>() - 4usize];
    ["Alignment of sg_d3d11_buffer_info"][::std::mem::align_of::<sg_d3d11_buffer_info>() - 4usize];
    ["Offset of field: sg_d3d11_buffer_info::buf"]
        [::std::mem::offset_of!(sg_d3d11_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_image_info {
    pub tex2d: *const ::std::os::raw::c_void,
    pub tex3d: *const ::std::os::raw::c_void,
    pub res: *const ::std::os::raw::c_void,
    pub srv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_image_info"][::std::mem::size_of::<sg_d3d11_image_info>() - 16usize];
    ["Alignment of sg_d3d11_image_info"][::std::mem::align_of::<sg_d3d11_image_info>() - 4usize];
    ["Offset of field: sg_d3d11_image_info::tex2d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex2d) - 0usize];
    ["Offset of field: sg_d3d11_image_info::tex3d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex3d) - 4usize];
    ["Offset of field: sg_d3d11_image_info::res"]
        [::std::mem::offset_of!(sg_d3d11_image_info, res) - 8usize];
    ["Offset of field: sg_d3d11_image_info::srv"]
        [::std::mem::offset_of!(sg_d3d11_image_info, srv) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_sampler_info"][::std::mem::size_of::<sg_d3d11_sampler_info>() - 4usize];
    ["Alignment of sg_d3d11_sampler_info"]
        [::std::mem::align_of::<sg_d3d11_sampler_info>() - 4usize];
    ["Offset of field: sg_d3d11_sampler_info::smp"]
        [::std::mem::offset_of!(sg_d3d11_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_shader_info {
    pub vs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub fs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub vs: *const ::std::os::raw::c_void,
    pub fs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_shader_info"][::std::mem::size_of::<sg_d3d11_shader_info>() - 40usize];
    ["Alignment of sg_d3d11_shader_info"][::std::mem::align_of::<sg_d3d11_shader_info>() - 4usize];
    ["Offset of field: sg_d3d11_shader_info::vs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs_cbufs) - 0usize];
    ["Offset of field: sg_d3d11_shader_info::fs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs_cbufs) - 16usize];
    ["Offset of field: sg_d3d11_shader_info::vs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs) - 32usize];
    ["Offset of field: sg_d3d11_shader_info::fs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_pipeline_info {
    pub il: *const ::std::os::raw::c_void,
    pub rs: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
    pub bs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_pipeline_info"][::std::mem::size_of::<sg_d3d11_pipeline_info>() - 16usize];
    ["Alignment of sg_d3d11_pipeline_info"]
        [::std::mem::align_of::<sg_d3d11_pipeline_info>() - 4usize];
    ["Offset of field: sg_d3d11_pipeline_info::il"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, il) - 0usize];
    ["Offset of field: sg_d3d11_pipeline_info::rs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, rs) - 4usize];
    ["Offset of field: sg_d3d11_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, dss) - 8usize];
    ["Offset of field: sg_d3d11_pipeline_info::bs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, bs) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_attachments_info {
    pub color_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub dsv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_attachments_info"]
        [::std::mem::size_of::<sg_d3d11_attachments_info>() - 36usize];
    ["Alignment of sg_d3d11_attachments_info"]
        [::std::mem::align_of::<sg_d3d11_attachments_info>() - 4usize];
    ["Offset of field: sg_d3d11_attachments_info::color_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, color_rtv) - 0usize];
    ["Offset of field: sg_d3d11_attachments_info::resolve_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, resolve_rtv) - 16usize];
    ["Offset of field: sg_d3d11_attachments_info::dsv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, dsv) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_buffer_info {
    pub buf: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_buffer_info"][::std::mem::size_of::<sg_mtl_buffer_info>() - 12usize];
    ["Alignment of sg_mtl_buffer_info"][::std::mem::align_of::<sg_mtl_buffer_info>() - 4usize];
    ["Offset of field: sg_mtl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_mtl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_image_info {
    pub tex: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_image_info"][::std::mem::size_of::<sg_mtl_image_info>() - 12usize];
    ["Alignment of sg_mtl_image_info"][::std::mem::align_of::<sg_mtl_image_info>() - 4usize];
    ["Offset of field: sg_mtl_image_info::tex"]
        [::std::mem::offset_of!(sg_mtl_image_info, tex) - 0usize];
    ["Offset of field: sg_mtl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_image_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_sampler_info"][::std::mem::size_of::<sg_mtl_sampler_info>() - 4usize];
    ["Alignment of sg_mtl_sampler_info"][::std::mem::align_of::<sg_mtl_sampler_info>() - 4usize];
    ["Offset of field: sg_mtl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_mtl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_shader_info {
    pub vs_lib: *const ::std::os::raw::c_void,
    pub fs_lib: *const ::std::os::raw::c_void,
    pub vs_func: *const ::std::os::raw::c_void,
    pub fs_func: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_shader_info"][::std::mem::size_of::<sg_mtl_shader_info>() - 16usize];
    ["Alignment of sg_mtl_shader_info"][::std::mem::align_of::<sg_mtl_shader_info>() - 4usize];
    ["Offset of field: sg_mtl_shader_info::vs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_lib) - 0usize];
    ["Offset of field: sg_mtl_shader_info::fs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_lib) - 4usize];
    ["Offset of field: sg_mtl_shader_info::vs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_func) - 8usize];
    ["Offset of field: sg_mtl_shader_info::fs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_func) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_pipeline_info {
    pub rps: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_pipeline_info"][::std::mem::size_of::<sg_mtl_pipeline_info>() - 8usize];
    ["Alignment of sg_mtl_pipeline_info"][::std::mem::align_of::<sg_mtl_pipeline_info>() - 4usize];
    ["Offset of field: sg_mtl_pipeline_info::rps"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, rps) - 0usize];
    ["Offset of field: sg_mtl_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, dss) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_buffer_info"][::std::mem::size_of::<sg_wgpu_buffer_info>() - 4usize];
    ["Alignment of sg_wgpu_buffer_info"][::std::mem::align_of::<sg_wgpu_buffer_info>() - 4usize];
    ["Offset of field: sg_wgpu_buffer_info::buf"]
        [::std::mem::offset_of!(sg_wgpu_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_image_info {
    pub tex: *const ::std::os::raw::c_void,
    pub view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_image_info"][::std::mem::size_of::<sg_wgpu_image_info>() - 8usize];
    ["Alignment of sg_wgpu_image_info"][::std::mem::align_of::<sg_wgpu_image_info>() - 4usize];
    ["Offset of field: sg_wgpu_image_info::tex"]
        [::std::mem::offset_of!(sg_wgpu_image_info, tex) - 0usize];
    ["Offset of field: sg_wgpu_image_info::view"]
        [::std::mem::offset_of!(sg_wgpu_image_info, view) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_sampler_info"][::std::mem::size_of::<sg_wgpu_sampler_info>() - 4usize];
    ["Alignment of sg_wgpu_sampler_info"][::std::mem::align_of::<sg_wgpu_sampler_info>() - 4usize];
    ["Offset of field: sg_wgpu_sampler_info::smp"]
        [::std::mem::offset_of!(sg_wgpu_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_shader_info {
    pub vs_mod: *const ::std::os::raw::c_void,
    pub fs_mod: *const ::std::os::raw::c_void,
    pub bgl: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_shader_info"][::std::mem::size_of::<sg_wgpu_shader_info>() - 12usize];
    ["Alignment of sg_wgpu_shader_info"][::std::mem::align_of::<sg_wgpu_shader_info>() - 4usize];
    ["Offset of field: sg_wgpu_shader_info::vs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, vs_mod) - 0usize];
    ["Offset of field: sg_wgpu_shader_info::fs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, fs_mod) - 4usize];
    ["Offset of field: sg_wgpu_shader_info::bgl"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, bgl) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_pipeline_info {
    pub pip: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_pipeline_info"][::std::mem::size_of::<sg_wgpu_pipeline_info>() - 4usize];
    ["Alignment of sg_wgpu_pipeline_info"]
        [::std::mem::align_of::<sg_wgpu_pipeline_info>() - 4usize];
    ["Offset of field: sg_wgpu_pipeline_info::pip"]
        [::std::mem::offset_of!(sg_wgpu_pipeline_info, pip) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_attachments_info {
    pub color_view: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_view: [*const ::std::os::raw::c_void; 4usize],
    pub ds_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_attachments_info"]
        [::std::mem::size_of::<sg_wgpu_attachments_info>() - 36usize];
    ["Alignment of sg_wgpu_attachments_info"]
        [::std::mem::align_of::<sg_wgpu_attachments_info>() - 4usize];
    ["Offset of field: sg_wgpu_attachments_info::color_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, color_view) - 0usize];
    ["Offset of field: sg_wgpu_attachments_info::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, resolve_view) - 16usize];
    ["Offset of field: sg_wgpu_attachments_info::ds_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, ds_view) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_buffer_info {
    pub buf: [u32; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_buffer_info"][::std::mem::size_of::<sg_gl_buffer_info>() - 12usize];
    ["Alignment of sg_gl_buffer_info"][::std::mem::align_of::<sg_gl_buffer_info>() - 4usize];
    ["Offset of field: sg_gl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_gl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_gl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_buffer_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_image_info {
    pub tex: [u32; 2usize],
    pub tex_target: u32,
    pub msaa_render_buffer: u32,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_image_info"][::std::mem::size_of::<sg_gl_image_info>() - 20usize];
    ["Alignment of sg_gl_image_info"][::std::mem::align_of::<sg_gl_image_info>() - 4usize];
    ["Offset of field: sg_gl_image_info::tex"]
        [::std::mem::offset_of!(sg_gl_image_info, tex) - 0usize];
    ["Offset of field: sg_gl_image_info::tex_target"]
        [::std::mem::offset_of!(sg_gl_image_info, tex_target) - 8usize];
    ["Offset of field: sg_gl_image_info::msaa_render_buffer"]
        [::std::mem::offset_of!(sg_gl_image_info, msaa_render_buffer) - 12usize];
    ["Offset of field: sg_gl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_sampler_info {
    pub smp: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_sampler_info"][::std::mem::size_of::<sg_gl_sampler_info>() - 4usize];
    ["Alignment of sg_gl_sampler_info"][::std::mem::align_of::<sg_gl_sampler_info>() - 4usize];
    ["Offset of field: sg_gl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_gl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_shader_info {
    pub prog: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_shader_info"][::std::mem::size_of::<sg_gl_shader_info>() - 4usize];
    ["Alignment of sg_gl_shader_info"][::std::mem::align_of::<sg_gl_shader_info>() - 4usize];
    ["Offset of field: sg_gl_shader_info::prog"]
        [::std::mem::offset_of!(sg_gl_shader_info, prog) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_attachments_info {
    pub framebuffer: u32,
    pub msaa_resolve_framebuffer: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_attachments_info"][::std::mem::size_of::<sg_gl_attachments_info>() - 20usize];
    ["Alignment of sg_gl_attachments_info"]
        [::std::mem::align_of::<sg_gl_attachments_info>() - 4usize];
    ["Offset of field: sg_gl_attachments_info::framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, framebuffer) - 0usize];
    ["Offset of field: sg_gl_attachments_info::msaa_resolve_framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, msaa_resolve_framebuffer) - 4usize];
};
unsafe extern "C" {
    pub fn sg_d3d11_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_buffer_info(buf: sg_buffer) -> sg_d3d11_buffer_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_image_info(img: sg_image) -> sg_d3d11_image_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_sampler_info(smp: sg_sampler) -> sg_d3d11_sampler_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_shader_info(shd: sg_shader) -> sg_d3d11_shader_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_pipeline_info(pip: sg_pipeline) -> sg_d3d11_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_attachments_info(atts: sg_attachments) -> sg_d3d11_attachments_info;
}
unsafe extern "C" {
    pub fn sg_mtl_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_render_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_query_buffer_info(buf: sg_buffer) -> sg_mtl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_image_info(img: sg_image) -> sg_mtl_image_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_sampler_info(smp: sg_sampler) -> sg_mtl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_shader_info(shd: sg_shader) -> sg_mtl_shader_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_pipeline_info(pip: sg_pipeline) -> sg_mtl_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_queue() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_render_pass_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_buffer_info(buf: sg_buffer) -> sg_wgpu_buffer_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_image_info(img: sg_image) -> sg_wgpu_image_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_sampler_info(smp: sg_sampler) -> sg_wgpu_sampler_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_shader_info(shd: sg_shader) -> sg_wgpu_shader_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_pipeline_info(pip: sg_pipeline) -> sg_wgpu_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_attachments_info(atts: sg_attachments) -> sg_wgpu_attachments_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_buffer_info(buf: sg_buffer) -> sg_gl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_image_info(img: sg_image) -> sg_gl_image_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_sampler_info(smp: sg_sampler) -> sg_gl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_shader_info(shd: sg_shader) -> sg_gl_shader_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_attachments_info(atts: sg_attachments) -> sg_gl_attachments_info;
}
unsafe extern "C" {
    pub fn sglue_environment() -> sg_environment;
}
unsafe extern "C" {
    pub fn sglue_swapchain() -> sg_swapchain;
}
pub const sgp_error_SGP_NO_ERROR: sgp_error = 0;
pub const sgp_error_SGP_ERROR_SOKOL_INVALID: sgp_error = 1;
pub const sgp_error_SGP_ERROR_VERTICES_FULL: sgp_error = 2;
pub const sgp_error_SGP_ERROR_UNIFORMS_FULL: sgp_error = 3;
pub const sgp_error_SGP_ERROR_COMMANDS_FULL: sgp_error = 4;
pub const sgp_error_SGP_ERROR_VERTICES_OVERFLOW: sgp_error = 5;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_OVERFLOW: sgp_error = 6;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_UNDERFLOW: sgp_error = 7;
pub const sgp_error_SGP_ERROR_STATE_STACK_OVERFLOW: sgp_error = 8;
pub const sgp_error_SGP_ERROR_STATE_STACK_UNDERFLOW: sgp_error = 9;
pub const sgp_error_SGP_ERROR_ALLOC_FAILED: sgp_error = 10;
pub const sgp_error_SGP_ERROR_MAKE_VERTEX_BUFFER_FAILED: sgp_error = 11;
pub const sgp_error_SGP_ERROR_MAKE_WHITE_IMAGE_FAILED: sgp_error = 12;
pub const sgp_error_SGP_ERROR_MAKE_NEAREST_SAMPLER_FAILED: sgp_error = 13;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_SHADER_FAILED: sgp_error = 14;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_PIPELINE_FAILED: sgp_error = 15;
pub type sgp_error = ::std::os::raw::c_int;
pub const sgp_blend_mode_SGP_BLENDMODE_NONE: sgp_blend_mode = 0;
pub const sgp_blend_mode_SGP_BLENDMODE_BLEND: sgp_blend_mode = 1;
pub const sgp_blend_mode_SGP_BLENDMODE_ADD: sgp_blend_mode = 2;
pub const sgp_blend_mode_SGP_BLENDMODE_MOD: sgp_blend_mode = 3;
pub const sgp_blend_mode_SGP_BLENDMODE_MUL: sgp_blend_mode = 4;
pub const sgp_blend_mode__SGP_BLENDMODE_NUM: sgp_blend_mode = 5;
pub type sgp_blend_mode = ::std::os::raw::c_int;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COORD: sgp_vs_attr_location = 0;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COLOR: sgp_vs_attr_location = 1;
pub type sgp_vs_attr_location = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_isize {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_isize"][::std::mem::size_of::<sgp_isize>() - 8usize];
    ["Alignment of sgp_isize"][::std::mem::align_of::<sgp_isize>() - 4usize];
    ["Offset of field: sgp_isize::w"][::std::mem::offset_of!(sgp_isize, w) - 0usize];
    ["Offset of field: sgp_isize::h"][::std::mem::offset_of!(sgp_isize, h) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_irect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_irect"][::std::mem::size_of::<sgp_irect>() - 16usize];
    ["Alignment of sgp_irect"][::std::mem::align_of::<sgp_irect>() - 4usize];
    ["Offset of field: sgp_irect::x"][::std::mem::offset_of!(sgp_irect, x) - 0usize];
    ["Offset of field: sgp_irect::y"][::std::mem::offset_of!(sgp_irect, y) - 4usize];
    ["Offset of field: sgp_irect::w"][::std::mem::offset_of!(sgp_irect, w) - 8usize];
    ["Offset of field: sgp_irect::h"][::std::mem::offset_of!(sgp_irect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_rect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_rect"][::std::mem::size_of::<sgp_rect>() - 16usize];
    ["Alignment of sgp_rect"][::std::mem::align_of::<sgp_rect>() - 4usize];
    ["Offset of field: sgp_rect::x"][::std::mem::offset_of!(sgp_rect, x) - 0usize];
    ["Offset of field: sgp_rect::y"][::std::mem::offset_of!(sgp_rect, y) - 4usize];
    ["Offset of field: sgp_rect::w"][::std::mem::offset_of!(sgp_rect, w) - 8usize];
    ["Offset of field: sgp_rect::h"][::std::mem::offset_of!(sgp_rect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textured_rect {
    pub dst: sgp_rect,
    pub src: sgp_rect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textured_rect"][::std::mem::size_of::<sgp_textured_rect>() - 32usize];
    ["Alignment of sgp_textured_rect"][::std::mem::align_of::<sgp_textured_rect>() - 4usize];
    ["Offset of field: sgp_textured_rect::dst"]
        [::std::mem::offset_of!(sgp_textured_rect, dst) - 0usize];
    ["Offset of field: sgp_textured_rect::src"]
        [::std::mem::offset_of!(sgp_textured_rect, src) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vec2"][::std::mem::size_of::<sgp_vec2>() - 8usize];
    ["Alignment of sgp_vec2"][::std::mem::align_of::<sgp_vec2>() - 4usize];
    ["Offset of field: sgp_vec2::x"][::std::mem::offset_of!(sgp_vec2, x) - 0usize];
    ["Offset of field: sgp_vec2::y"][::std::mem::offset_of!(sgp_vec2, y) - 4usize];
};
pub type sgp_point = sgp_vec2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_line {
    pub a: sgp_point,
    pub b: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_line"][::std::mem::size_of::<sgp_line>() - 16usize];
    ["Alignment of sgp_line"][::std::mem::align_of::<sgp_line>() - 4usize];
    ["Offset of field: sgp_line::a"][::std::mem::offset_of!(sgp_line, a) - 0usize];
    ["Offset of field: sgp_line::b"][::std::mem::offset_of!(sgp_line, b) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_triangle {
    pub a: sgp_point,
    pub b: sgp_point,
    pub c: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_triangle"][::std::mem::size_of::<sgp_triangle>() - 24usize];
    ["Alignment of sgp_triangle"][::std::mem::align_of::<sgp_triangle>() - 4usize];
    ["Offset of field: sgp_triangle::a"][::std::mem::offset_of!(sgp_triangle, a) - 0usize];
    ["Offset of field: sgp_triangle::b"][::std::mem::offset_of!(sgp_triangle, b) - 8usize];
    ["Offset of field: sgp_triangle::c"][::std::mem::offset_of!(sgp_triangle, c) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_mat2x3 {
    pub v: [[f32; 3usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_mat2x3"][::std::mem::size_of::<sgp_mat2x3>() - 24usize];
    ["Alignment of sgp_mat2x3"][::std::mem::align_of::<sgp_mat2x3>() - 4usize];
    ["Offset of field: sgp_mat2x3::v"][::std::mem::offset_of!(sgp_mat2x3, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color"][::std::mem::size_of::<sgp_color>() - 16usize];
    ["Alignment of sgp_color"][::std::mem::align_of::<sgp_color>() - 4usize];
    ["Offset of field: sgp_color::r"][::std::mem::offset_of!(sgp_color, r) - 0usize];
    ["Offset of field: sgp_color::g"][::std::mem::offset_of!(sgp_color, g) - 4usize];
    ["Offset of field: sgp_color::b"][::std::mem::offset_of!(sgp_color, b) - 8usize];
    ["Offset of field: sgp_color::a"][::std::mem::offset_of!(sgp_color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color_ub4 {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color_ub4"][::std::mem::size_of::<sgp_color_ub4>() - 4usize];
    ["Alignment of sgp_color_ub4"][::std::mem::align_of::<sgp_color_ub4>() - 1usize];
    ["Offset of field: sgp_color_ub4::r"][::std::mem::offset_of!(sgp_color_ub4, r) - 0usize];
    ["Offset of field: sgp_color_ub4::g"][::std::mem::offset_of!(sgp_color_ub4, g) - 1usize];
    ["Offset of field: sgp_color_ub4::b"][::std::mem::offset_of!(sgp_color_ub4, b) - 2usize];
    ["Offset of field: sgp_color_ub4::a"][::std::mem::offset_of!(sgp_color_ub4, a) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vertex {
    pub position: sgp_vec2,
    pub texcoord: sgp_vec2,
    pub color: sgp_color_ub4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vertex"][::std::mem::size_of::<sgp_vertex>() - 20usize];
    ["Alignment of sgp_vertex"][::std::mem::align_of::<sgp_vertex>() - 4usize];
    ["Offset of field: sgp_vertex::position"]
        [::std::mem::offset_of!(sgp_vertex, position) - 0usize];
    ["Offset of field: sgp_vertex::texcoord"]
        [::std::mem::offset_of!(sgp_vertex, texcoord) - 8usize];
    ["Offset of field: sgp_vertex::color"][::std::mem::offset_of!(sgp_vertex, color) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_uniform {
    pub size: u32,
    pub content: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_uniform"][::std::mem::size_of::<sgp_uniform>() - 20usize];
    ["Alignment of sgp_uniform"][::std::mem::align_of::<sgp_uniform>() - 4usize];
    ["Offset of field: sgp_uniform::size"][::std::mem::offset_of!(sgp_uniform, size) - 0usize];
    ["Offset of field: sgp_uniform::content"]
        [::std::mem::offset_of!(sgp_uniform, content) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textures_uniform {
    pub count: u32,
    pub images: [sg_image; 4usize],
    pub samplers: [sg_sampler; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textures_uniform"][::std::mem::size_of::<sgp_textures_uniform>() - 36usize];
    ["Alignment of sgp_textures_uniform"][::std::mem::align_of::<sgp_textures_uniform>() - 4usize];
    ["Offset of field: sgp_textures_uniform::count"]
        [::std::mem::offset_of!(sgp_textures_uniform, count) - 0usize];
    ["Offset of field: sgp_textures_uniform::images"]
        [::std::mem::offset_of!(sgp_textures_uniform, images) - 4usize];
    ["Offset of field: sgp_textures_uniform::samplers"]
        [::std::mem::offset_of!(sgp_textures_uniform, samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_state {
    pub frame_size: sgp_isize,
    pub viewport: sgp_irect,
    pub scissor: sgp_irect,
    pub proj: sgp_mat2x3,
    pub transform: sgp_mat2x3,
    pub mvp: sgp_mat2x3,
    pub thickness: f32,
    pub color: sgp_color_ub4,
    pub textures: sgp_textures_uniform,
    pub uniform: sgp_uniform,
    pub blend_mode: sgp_blend_mode,
    pub pipeline: sg_pipeline,
    pub _base_vertex: u32,
    pub _base_uniform: u32,
    pub _base_command: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_state"][::std::mem::size_of::<sgp_state>() - 196usize];
    ["Alignment of sgp_state"][::std::mem::align_of::<sgp_state>() - 4usize];
    ["Offset of field: sgp_state::frame_size"]
        [::std::mem::offset_of!(sgp_state, frame_size) - 0usize];
    ["Offset of field: sgp_state::viewport"][::std::mem::offset_of!(sgp_state, viewport) - 8usize];
    ["Offset of field: sgp_state::scissor"][::std::mem::offset_of!(sgp_state, scissor) - 24usize];
    ["Offset of field: sgp_state::proj"][::std::mem::offset_of!(sgp_state, proj) - 40usize];
    ["Offset of field: sgp_state::transform"]
        [::std::mem::offset_of!(sgp_state, transform) - 64usize];
    ["Offset of field: sgp_state::mvp"][::std::mem::offset_of!(sgp_state, mvp) - 88usize];
    ["Offset of field: sgp_state::thickness"]
        [::std::mem::offset_of!(sgp_state, thickness) - 112usize];
    ["Offset of field: sgp_state::color"][::std::mem::offset_of!(sgp_state, color) - 116usize];
    ["Offset of field: sgp_state::textures"]
        [::std::mem::offset_of!(sgp_state, textures) - 120usize];
    ["Offset of field: sgp_state::uniform"][::std::mem::offset_of!(sgp_state, uniform) - 156usize];
    ["Offset of field: sgp_state::blend_mode"]
        [::std::mem::offset_of!(sgp_state, blend_mode) - 176usize];
    ["Offset of field: sgp_state::pipeline"]
        [::std::mem::offset_of!(sgp_state, pipeline) - 180usize];
    ["Offset of field: sgp_state::_base_vertex"]
        [::std::mem::offset_of!(sgp_state, _base_vertex) - 184usize];
    ["Offset of field: sgp_state::_base_uniform"]
        [::std::mem::offset_of!(sgp_state, _base_uniform) - 188usize];
    ["Offset of field: sgp_state::_base_command"]
        [::std::mem::offset_of!(sgp_state, _base_command) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_desc {
    pub max_vertices: u32,
    pub max_commands: u32,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_desc"][::std::mem::size_of::<sgp_desc>() - 20usize];
    ["Alignment of sgp_desc"][::std::mem::align_of::<sgp_desc>() - 4usize];
    ["Offset of field: sgp_desc::max_vertices"]
        [::std::mem::offset_of!(sgp_desc, max_vertices) - 0usize];
    ["Offset of field: sgp_desc::max_commands"]
        [::std::mem::offset_of!(sgp_desc, max_commands) - 4usize];
    ["Offset of field: sgp_desc::color_format"]
        [::std::mem::offset_of!(sgp_desc, color_format) - 8usize];
    ["Offset of field: sgp_desc::depth_format"]
        [::std::mem::offset_of!(sgp_desc, depth_format) - 12usize];
    ["Offset of field: sgp_desc::sample_count"]
        [::std::mem::offset_of!(sgp_desc, sample_count) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_pipeline_desc {
    pub shader: sg_shader,
    pub primitive_type: sg_primitive_type,
    pub blend_mode: sgp_blend_mode,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub has_vs_color: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_pipeline_desc"][::std::mem::size_of::<sgp_pipeline_desc>() - 28usize];
    ["Alignment of sgp_pipeline_desc"][::std::mem::align_of::<sgp_pipeline_desc>() - 4usize];
    ["Offset of field: sgp_pipeline_desc::shader"]
        [::std::mem::offset_of!(sgp_pipeline_desc, shader) - 0usize];
    ["Offset of field: sgp_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sgp_pipeline_desc, primitive_type) - 4usize];
    ["Offset of field: sgp_pipeline_desc::blend_mode"]
        [::std::mem::offset_of!(sgp_pipeline_desc, blend_mode) - 8usize];
    ["Offset of field: sgp_pipeline_desc::color_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, color_format) - 12usize];
    ["Offset of field: sgp_pipeline_desc::depth_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, depth_format) - 16usize];
    ["Offset of field: sgp_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sgp_pipeline_desc, sample_count) - 20usize];
    ["Offset of field: sgp_pipeline_desc::has_vs_color"]
        [::std::mem::offset_of!(sgp_pipeline_desc, has_vs_color) - 24usize];
};
unsafe extern "C" {
    pub fn sgp_setup(desc: *const sgp_desc);
}
unsafe extern "C" {
    pub fn sgp_shutdown();
}
unsafe extern "C" {
    pub fn sgp_is_valid() -> bool;
}
unsafe extern "C" {
    pub fn sgp_get_last_error() -> sgp_error;
}
unsafe extern "C" {
    pub fn sgp_get_error_message(error: sgp_error) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sgp_make_pipeline(desc: *const sgp_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sgp_begin(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_flush();
}
unsafe extern "C" {
    pub fn sgp_end();
}
unsafe extern "C" {
    pub fn sgp_project(left: f32, right: f32, top: f32, bottom: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_project();
}
unsafe extern "C" {
    pub fn sgp_push_transform();
}
unsafe extern "C" {
    pub fn sgp_pop_transform();
}
unsafe extern "C" {
    pub fn sgp_reset_transform();
}
unsafe extern "C" {
    pub fn sgp_translate(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate(theta: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate_at(theta: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_scale(sx: f32, sy: f32);
}
unsafe extern "C" {
    pub fn sgp_scale_at(sx: f32, sy: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_set_pipeline(pipeline: sg_pipeline);
}
unsafe extern "C" {
    pub fn sgp_reset_pipeline();
}
unsafe extern "C" {
    pub fn sgp_set_uniform(data: *const ::std::os::raw::c_void, size: u32);
}
unsafe extern "C" {
    pub fn sgp_reset_uniform();
}
unsafe extern "C" {
    pub fn sgp_set_blend_mode(blend_mode: sgp_blend_mode);
}
unsafe extern "C" {
    pub fn sgp_reset_blend_mode();
}
unsafe extern "C" {
    pub fn sgp_set_color(r: f32, g: f32, b: f32, a: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_color();
}
unsafe extern "C" {
    pub fn sgp_set_image(channel: ::std::os::raw::c_int, image: sg_image);
}
unsafe extern "C" {
    pub fn sgp_unset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_reset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_set_sampler(channel: ::std::os::raw::c_int, sampler: sg_sampler);
}
unsafe extern "C" {
    pub fn sgp_reset_sampler(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_viewport();
}
unsafe extern "C" {
    pub fn sgp_scissor(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_scissor();
}
unsafe extern "C" {
    pub fn sgp_reset_state();
}
unsafe extern "C" {
    pub fn sgp_clear();
}
unsafe extern "C" {
    pub fn sgp_draw(primitive_type: sg_primitive_type, vertices: *const sgp_vertex, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_points(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_point(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines(lines: *const sgp_line, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_line(ax: f32, ay: f32, bx: f32, by: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles(triangles: *const sgp_triangle, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangle(ax: f32, ay: f32, bx: f32, by: f32, cx: f32, cy: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rects(rects: *const sgp_rect, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rect(x: f32, y: f32, w: f32, h: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rects(
        channel: ::std::os::raw::c_int,
        rects: *const sgp_textured_rect,
        count: u32,
    );
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rect(
        channel: ::std::os::raw::c_int,
        dest_rect: sgp_rect,
        src_rect: sgp_rect,
    );
}
unsafe extern "C" {
    pub fn sgp_query_state() -> *mut sgp_state;
}
unsafe extern "C" {
    pub fn sgp_query_desc() -> sgp_desc;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 12usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 4usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 4usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 8usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 4usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 4usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 4usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 4usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
unsafe extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
unsafe extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
unsafe extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_uint,
        _ElementCount: ::std::os::raw::c_uint,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_uint,
        _ElementCount: ::std::os::raw::c_uint,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub const STBI_default: _bindgen_ty_4 = 0;
pub const STBI_grey: _bindgen_ty_4 = 1;
pub const STBI_grey_alpha: _bindgen_ty_4 = 2;
pub const STBI_rgb: _bindgen_ty_4 = 3;
pub const STBI_rgb_alpha: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_uint,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
unsafe extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
unsafe extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
unsafe extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
unsafe extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
unsafe extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub type stbi_uc = ::std::os::raw::c_uchar;
pub type stbi_us = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbi_io_callbacks {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, n: ::std::os::raw::c_int),
    >,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbi_io_callbacks"][::std::mem::size_of::<stbi_io_callbacks>() - 12usize];
    ["Alignment of stbi_io_callbacks"][::std::mem::align_of::<stbi_io_callbacks>() - 4usize];
    ["Offset of field: stbi_io_callbacks::read"]
        [::std::mem::offset_of!(stbi_io_callbacks, read) - 0usize];
    ["Offset of field: stbi_io_callbacks::skip"]
        [::std::mem::offset_of!(stbi_io_callbacks, skip) - 4usize];
    ["Offset of field: stbi_io_callbacks::eof"]
        [::std::mem::offset_of!(stbi_io_callbacks, eof) - 8usize];
};
unsafe extern "C" {
    pub fn stbi_load_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_gif_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        delays: *mut *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        z: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
        req_comp: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_from_file_16(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_failure_reason() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_image_free(retval_from_stbi_load: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn stbi_info_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load_thread(
        flag_true_if_should_unpremultiply: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb_thread(
        flag_true_if_should_convert: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize_headerflag(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
        parse_header: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
